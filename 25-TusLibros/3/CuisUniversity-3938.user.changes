

----STARTUP---- (31 October 2019 16:36:48) as /home/asansone/Desktop/linux64/CuisUniversity-3938.image!


Object subclass: #Carrito
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Carrito category: #TusLibros stamp: 'a s 10/31/2019 16:39:26'!
Object subclass: #Carrito
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CarritoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CarritoTest category: #TusLibros stamp: 'a s 10/31/2019 16:39:59'!
TestCase subclass: #CarritoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CarritoTest methodsFor: 'no messages' stamp: 'a s 10/31/2019 16:41:28'!
test01CarritoNuevoEstaVacio

	self assert: Carrito new isEmpty! !

!testRun: #CarritoTest #test01CarritoNuevoEstaVacio stamp: 'a s 10/31/2019 16:41:31'!
ERROR!
!Carrito methodsFor: 'comparing' stamp: 'a s 10/31/2019 16:41:45'!
isEmpty
	self shouldBeImplemented.! !
!Carrito methodsFor: 'comparing' stamp: 'a s 10/31/2019 16:42:11' prior: 50777389!
isEmpty
	
	^ true! !

!testRun: #CarritoTest #test01CarritoNuevoEstaVacio stamp: 'a s 10/31/2019 16:42:16'!
PASSED!

!testRun: #CarritoTest #test01CarritoNuevoEstaVacio stamp: 'a s 10/31/2019 16:42:16'!
PASSED!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'a s 10/31/2019 16:44:23'!
test02CarritoConUnItemNoEstaVacio

	| carrito |
	
	carrito := Carrito new.
	
	carrito add: 'elemento'.
	
	self deny: carrito isEmpty
	! !

!testRun: #CarritoTest #test02CarritoConUnItemNoEstaVacio stamp: 'a s 10/31/2019 16:44:38'!
ERROR!
!Carrito methodsFor: 'as yet unclassified' stamp: 'a s 10/31/2019 16:45:01'!
add: aString 
	self shouldBeImplemented.! !

!classDefinition: #Carrito category: #TusLibros stamp: 'a s 10/31/2019 16:46:11'!
Object subclass: #Carrito
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Carrito methodsFor: 'as yet unclassified' stamp: 'a s 10/31/2019 16:46:05' prior: 50777413!
add: anElement
	
	elements add: anElement! !
!Carrito methodsFor: 'as yet unclassified' stamp: 'a s 10/31/2019 16:46:31'!
initalize

	elements := OrderedCollection new.! !
!Carrito methodsFor: 'comparing' stamp: 'a s 10/31/2019 16:47:05' prior: 50777393!
isEmpty
	
	^ elements isEmpty! !

!testRun: #CarritoTest #test01CarritoNuevoEstaVacio stamp: 'a s 10/31/2019 16:47:06'!
ERROR!

!testRun: #CarritoTest #test02CarritoConUnItemNoEstaVacio stamp: 'a s 10/31/2019 16:47:06'!
ERROR!

!testRun: #CarritoTest #test01CarritoNuevoEstaVacio stamp: 'a s 10/31/2019 16:47:24'!
ERROR!

!testRun: #CarritoTest #test02CarritoConUnItemNoEstaVacio stamp: 'a s 10/31/2019 16:47:24'!
ERROR!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'a s 10/31/2019 16:48:06' prior: 50777381!
test01CarritoNuevoEstaVacio

	| carrito |
	
	carrito := Carrito new.
	
	self assert: carrito isEmpty.! !
!Carrito methodsFor: 'initialization' stamp: 'a s 10/31/2019 16:48:59'!
initialize

	elements := OrderedCollection new.! !

!methodRemoval: Carrito #initalize stamp: 'a s 10/31/2019 16:48:59'!
initalize

	elements := OrderedCollection new.!

!testRun: #CarritoTest #test01CarritoNuevoEstaVacio stamp: 'a s 10/31/2019 16:49:02'!
PASSED!

!testRun: #CarritoTest #test02CarritoConUnItemNoEstaVacio stamp: 'a s 10/31/2019 16:49:02'!
PASSED!
!CarritoTest methodsFor: 'testing' stamp: 'a s 10/31/2019 16:52:01'!
test02ElCarritoNoContieneItemsQueNoFueronAgregados

	| carrito |
	
	carrito := Carrito new.
	
	carrito add: 'elemento'.
	
	self deny: carrito isEmpty
	! !

!methodRemoval: CarritoTest #test02ElCarritoNoContieneItemsQueNoFueronAgregados stamp: 'a s 10/31/2019 16:52:10'!
test02ElCarritoNoContieneItemsQueNoFueronAgregados

	| carrito |
	
	carrito := Carrito new.
	
	carrito add: 'elemento'.
	
	self deny: carrito isEmpty
	!
!CarritoTest methodsFor: 'testing' stamp: 'a s 10/31/2019 16:52:59'!
test03ElCarritoNoContieneItemsQueNoFueronAgregados

	| carrito |
	
	carrito := Carrito new.
		
	self deny: (carrito hasItem: 'cosa')
	! !

!testRun: #CarritoTest #test03ElCarritoNoContieneItemsQueNoFueronAgregados stamp: 'a s 10/31/2019 16:53:02'!
ERROR!
!Carrito methodsFor: 'testing' stamp: 'a s 10/31/2019 16:53:22'!
hasItem: aString 
	self shouldBeImplemented.! !
!Carrito methodsFor: 'testing' stamp: 'a s 10/31/2019 16:53:32' prior: 50777496!
hasItem: anItem

	^ true 
	
	! !

!testRun: #CarritoTest #test03ElCarritoNoContieneItemsQueNoFueronAgregados stamp: 'a s 10/31/2019 16:53:42'!
FAILURE!
!Carrito methodsFor: 'testing' stamp: 'a s 10/31/2019 16:53:59' prior: 50777501!
hasItem: anItem

	^ false
	
	! !

!testRun: #CarritoTest #test01CarritoNuevoEstaVacio stamp: 'a s 10/31/2019 16:54:00'!
PASSED!

!testRun: #CarritoTest #test02CarritoConUnItemNoEstaVacio stamp: 'a s 10/31/2019 16:54:00'!
PASSED!

!testRun: #CarritoTest #test03ElCarritoNoContieneItemsQueNoFueronAgregados stamp: 'a s 10/31/2019 16:54:00'!
PASSED!
!CarritoTest methodsFor: 'testing' stamp: 'a s 10/31/2019 16:55:07'!
test04ElCarritoContieneUnItemSiEsteFueAgregado

	| carrito |
	
	carrito := Carrito new.
	
	carrito add: 'cosa'.
		
	self assert: (carrito hasItem: 'cosa')
	! !

!testRun: #CarritoTest #test04ElCarritoContieneUnItemSiEsteFueAgregado stamp: 'a s 10/31/2019 16:55:11'!
FAILURE!
!Carrito methodsFor: 'testing' stamp: 'a s 10/31/2019 16:55:28' prior: 50777509!
hasItem: anItem

	^ elements includes: anItem
	
	! !

!testRun: #CarritoTest #test01CarritoNuevoEstaVacio stamp: 'a s 10/31/2019 16:55:29'!
PASSED!

!testRun: #CarritoTest #test02CarritoConUnItemNoEstaVacio stamp: 'a s 10/31/2019 16:55:29'!
PASSED!

!testRun: #CarritoTest #test03ElCarritoNoContieneItemsQueNoFueronAgregados stamp: 'a s 10/31/2019 16:55:29'!
PASSED!

!testRun: #CarritoTest #test04ElCarritoContieneUnItemSiEsteFueAgregado stamp: 'a s 10/31/2019 16:55:29'!
PASSED!

----STARTUP---- (31 October 2019 17:03:12) as /home/asansone/Desktop/linux64/CuisUniversity-3938.image!


----End fileIn of /home/asansone/Desktop/Ing1/TusLibros-1/TusLibros.st----!

!testRun: #CarritoTest #test01CarritoNuevoEstaVacio stamp: 'a s 10/31/2019 17:04:24'!
PASSED!

!testRun: #CarritoTest #test02CarritoConUnItemNoEstaVacio stamp: 'a s 10/31/2019 17:04:24'!
PASSED!

!testRun: #CarritoTest #test03ElCarritoNoContieneItemsQueNoFueronAgregados stamp: 'a s 10/31/2019 17:04:24'!
PASSED!

!testRun: #CarritoTest #test04ElCarritoContieneUnItemSiEsteFueAgregado stamp: 'a s 10/31/2019 17:04:24'!
PASSED!
!CarritoTest methodsFor: 'testing' stamp: 'a s 10/31/2019 17:05:45'!
test04ElCarritoContiene0VecesUnItemNoAgregado

	| carrito |
	
	carrito := Carrito new.
	
	self assert: (Carrito times: 'algo') equals: 0.
	! !
!CarritoTest methodsFor: 'testing' stamp: 'a s 10/31/2019 17:05:55' prior: 50777636!
test04ElCarritoContiene0VecesUnItemNoAgregado

	| carrito |
	
	carrito := Carrito new.
	
	self assert: (carrito times: 'algo') equals: 0.
	! !

!testRun: #CarritoTest #test04ElCarritoContiene0VecesUnItemNoAgregado stamp: 'a s 10/31/2019 17:05:56'!
ERROR!
!Carrito methodsFor: 'testing' stamp: 'a s 10/31/2019 17:06:11'!
times: aString 
	self shouldBeImplemented.! !
!Carrito methodsFor: 'testing' stamp: 'a s 10/31/2019 17:06:21' prior: 50777654!
times: anItem

	^ 0! !

!testRun: #CarritoTest #test04ElCarritoContiene0VecesUnItemNoAgregado stamp: 'a s 10/31/2019 17:06:26'!
PASSED!

!testRun: #CarritoTest #test01CarritoNuevoEstaVacio stamp: 'a s 10/31/2019 17:06:26'!
PASSED!

!testRun: #CarritoTest #test02CarritoConUnItemNoEstaVacio stamp: 'a s 10/31/2019 17:06:26'!
PASSED!

!testRun: #CarritoTest #test03ElCarritoNoContieneItemsQueNoFueronAgregados stamp: 'a s 10/31/2019 17:06:26'!
PASSED!

!testRun: #CarritoTest #test04ElCarritoContiene0VecesUnItemNoAgregado stamp: 'a s 10/31/2019 17:06:26'!
PASSED!

!testRun: #CarritoTest #test04ElCarritoContieneUnItemSiEsteFueAgregado stamp: 'a s 10/31/2019 17:06:26'!
PASSED!
!CarritoTest methodsFor: 'testing' stamp: 'a s 10/31/2019 17:06:29' prior: 50777644!
test04ElCarritoContiene0VecesUnItemNoAgregado

	| carrito |
	
	carrito := Carrito new.
	
	self assert: (carrito times: 'algo') equals: 0.! !

!testRun: #CarritoTest #test04ElCarritoContiene0VecesUnItemNoAgregado stamp: 'a s 10/31/2019 17:06:29'!
PASSED!

!testRun: #CarritoTest #test01CarritoNuevoEstaVacio stamp: 'a s 10/31/2019 17:06:29'!
PASSED!

!testRun: #CarritoTest #test02CarritoConUnItemNoEstaVacio stamp: 'a s 10/31/2019 17:06:29'!
PASSED!

!testRun: #CarritoTest #test03ElCarritoNoContieneItemsQueNoFueronAgregados stamp: 'a s 10/31/2019 17:06:29'!
PASSED!

!testRun: #CarritoTest #test04ElCarritoContiene0VecesUnItemNoAgregado stamp: 'a s 10/31/2019 17:06:29'!
PASSED!

!testRun: #CarritoTest #test04ElCarritoContieneUnItemSiEsteFueAgregado stamp: 'a s 10/31/2019 17:06:29'!
PASSED!
!CarritoTest methodsFor: 'testing' stamp: 'a s 10/31/2019 17:07:09'!
test05ElCarritoContieneUnItemSiEsteFueAgregado

	| carrito |
	
	carrito := Carrito new.
	
	carrito add: 'cosa'.
		
	self assert: (carrito hasItem: 'cosa')
	! !

!methodRemoval: CarritoTest #test04ElCarritoContieneUnItemSiEsteFueAgregado stamp: 'a s 10/31/2019 17:07:09'!
test04ElCarritoContieneUnItemSiEsteFueAgregado

	| carrito |
	
	carrito := Carrito new.
	
	carrito add: 'cosa'.
		
	self assert: (carrito hasItem: 'cosa')
	!
!CarritoTest methodsFor: 'testing' stamp: 'a s 10/31/2019 17:07:47'!
test06ElCarritoContiene2VecesUnItemAgregado2Veces

	| carrito |
	
	carrito := Carrito new.
	
	carrito add: 'cosa'.
		
	self assert: (carrito hasItem: 'cosa')
	! !
!CarritoTest methodsFor: 'testing' stamp: 'a s 10/31/2019 17:07:54'!
test04ElCarritoContieneUnItemSiEsteFueAgregado

	| carrito |
	
	carrito := Carrito new.
	
	carrito add: 'cosa'.
		
	self assert: (carrito hasItem: 'cosa')
	! !

!methodRemoval: CarritoTest #test05ElCarritoContieneUnItemSiEsteFueAgregado stamp: 'a s 10/31/2019 17:07:54'!
test05ElCarritoContieneUnItemSiEsteFueAgregado

	| carrito |
	
	carrito := Carrito new.
	
	carrito add: 'cosa'.
		
	self assert: (carrito hasItem: 'cosa')
	!
!CarritoTest methodsFor: 'testing' stamp: 'a s 10/31/2019 17:08:01'!
test05ElCarritoContiene0VecesUnItemNoAgregado

	| carrito |
	
	carrito := Carrito new.
	
	self assert: (carrito times: 'algo') equals: 0.! !

!methodRemoval: CarritoTest #test04ElCarritoContiene0VecesUnItemNoAgregado stamp: 'a s 10/31/2019 17:08:01'!
test04ElCarritoContiene0VecesUnItemNoAgregado

	| carrito |
	
	carrito := Carrito new.
	
	self assert: (carrito times: 'algo') equals: 0.!
!CarritoTest methodsFor: 'testing' stamp: 'a s 10/31/2019 17:08:49' prior: 50777725!
test06ElCarritoContiene2VecesUnItemAgregado2Veces

	| carrito |
	
	carrito := Carrito new.
	
	carrito add: 'cosa'.
	carrito add: 'cosa'.
		
	self assert: (carrito times: 'cosa') equals: 2.
	! !

!testRun: #CarritoTest #test06ElCarritoContiene2VecesUnItemAgregado2Veces stamp: 'a s 10/31/2019 17:08:52'!
FAILURE!
!Carrito methodsFor: 'testing' stamp: 'a s 10/31/2019 17:09:09' prior: 50777658!
times: anItem

	^ elements times: anItem.! !

!testRun: #CarritoTest #test01CarritoNuevoEstaVacio stamp: 'a s 10/31/2019 17:09:10'!
PASSED!

!testRun: #CarritoTest #test02CarritoConUnItemNoEstaVacio stamp: 'a s 10/31/2019 17:09:10'!
PASSED!

!testRun: #CarritoTest #test03ElCarritoNoContieneItemsQueNoFueronAgregados stamp: 'a s 10/31/2019 17:09:10'!
PASSED!

!testRun: #CarritoTest #test04ElCarritoContieneUnItemSiEsteFueAgregado stamp: 'a s 10/31/2019 17:09:10'!
PASSED!

!testRun: #CarritoTest #test05ElCarritoContiene0VecesUnItemNoAgregado stamp: 'a s 10/31/2019 17:09:10'!
ERROR!

!testRun: #CarritoTest #test06ElCarritoContiene2VecesUnItemAgregado2Veces stamp: 'a s 10/31/2019 17:09:10'!
ERROR!

----End fileIn of /home/asansone/Desktop/linux64/Packages/TerseGuide.pck.st----!
!Carrito methodsFor: 'testing' stamp: 'a s 10/31/2019 17:10:02' prior: 50777777!
times: anItem

	^ elements occurrencesOf: anItem! !

!testRun: #CarritoTest #test01CarritoNuevoEstaVacio stamp: 'a s 10/31/2019 17:10:03'!
PASSED!

!testRun: #CarritoTest #test02CarritoConUnItemNoEstaVacio stamp: 'a s 10/31/2019 17:10:03'!
PASSED!

!testRun: #CarritoTest #test03ElCarritoNoContieneItemsQueNoFueronAgregados stamp: 'a s 10/31/2019 17:10:03'!
PASSED!

!testRun: #CarritoTest #test04ElCarritoContieneUnItemSiEsteFueAgregado stamp: 'a s 10/31/2019 17:10:03'!
PASSED!

!testRun: #CarritoTest #test05ElCarritoContiene0VecesUnItemNoAgregado stamp: 'a s 10/31/2019 17:10:03'!
PASSED!

!testRun: #CarritoTest #test06ElCarritoContiene2VecesUnItemAgregado2Veces stamp: 'a s 10/31/2019 17:10:03'!
PASSED!

!testRun: #CarritoTest #test01CarritoNuevoEstaVacio stamp: 'a s 10/31/2019 17:10:12'!
PASSED!

!testRun: #CarritoTest #test02CarritoConUnItemNoEstaVacio stamp: 'a s 10/31/2019 17:10:12'!
PASSED!

!testRun: #CarritoTest #test03ElCarritoNoContieneItemsQueNoFueronAgregados stamp: 'a s 10/31/2019 17:10:12'!
PASSED!

!testRun: #CarritoTest #test04ElCarritoContieneUnItemSiEsteFueAgregado stamp: 'a s 10/31/2019 17:10:12'!
PASSED!

!testRun: #CarritoTest #test05ElCarritoContiene0VecesUnItemNoAgregado stamp: 'a s 10/31/2019 17:10:12'!
PASSED!

!testRun: #CarritoTest #test06ElCarritoContiene2VecesUnItemAgregado2Veces stamp: 'a s 10/31/2019 17:10:12'!
PASSED!

----SNAPSHOT----(31 October 2019 17:10:26) CuisUniversity-3938.image priorSource: 14319118!

----STARTUP---- (4 November 2019 16:16:06) as /home/asansone/Desktop/linux64/CuisUniversity-3938.image!


!testRun: #CarritoTest #test01CarritoNuevoEstaVacio stamp: 'a s 11/4/2019 16:16:08'!
PASSED!

!testRun: #CarritoTest #test02CarritoConUnItemNoEstaVacio stamp: 'a s 11/4/2019 16:16:08'!
PASSED!

!testRun: #CarritoTest #test03ElCarritoNoContieneItemsQueNoFueronAgregados stamp: 'a s 11/4/2019 16:16:08'!
PASSED!

!testRun: #CarritoTest #test04ElCarritoContieneUnItemSiEsteFueAgregado stamp: 'a s 11/4/2019 16:16:08'!
PASSED!

!testRun: #CarritoTest #test05ElCarritoContiene0VecesUnItemNoAgregado stamp: 'a s 11/4/2019 16:16:08'!
PASSED!

!testRun: #CarritoTest #test06ElCarritoContiene2VecesUnItemAgregado2Veces stamp: 'a s 11/4/2019 16:16:08'!
PASSED!

!testRun: #CarritoTest #test01CarritoNuevoEstaVacio stamp: 'a s 11/4/2019 16:48:40'!
PASSED!

!testRun: #CarritoTest #test02CarritoConUnItemNoEstaVacio stamp: 'a s 11/4/2019 16:48:40'!
PASSED!

!testRun: #CarritoTest #test03ElCarritoNoContieneItemsQueNoFueronAgregados stamp: 'a s 11/4/2019 16:48:40'!
PASSED!

!testRun: #CarritoTest #test04ElCarritoContieneUnItemSiEsteFueAgregado stamp: 'a s 11/4/2019 16:48:40'!
PASSED!

!testRun: #CarritoTest #test05ElCarritoContiene0VecesUnItemNoAgregado stamp: 'a s 11/4/2019 16:48:40'!
PASSED!

!testRun: #CarritoTest #test06ElCarritoContiene2VecesUnItemAgregado2Veces stamp: 'a s 11/4/2019 16:48:40'!
PASSED!

----QUIT----(4 November 2019 16:50:23) CuisUniversity-3938.image priorSource: 14374647!

----STARTUP---- (4 November 2019 16:59:01) as /home/asansone/Desktop/linux64/CuisUniversity-3938.image!


----End fileIn of /home/asansone/Desktop/2019-2c/25-TusLibros/Iteracion1/TusLibros-18.st----!

!classRemoval: #Cart stamp: 'a s 11/4/2019 17:03:13'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Carrito stamp: 'a s 11/4/2019 17:03:14'!
Object subclass: #Carrito
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'a s 11/4/2019 17:03:14'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CarritoTest stamp: 'a s 11/4/2019 17:03:15'!
TestCase subclass: #CarritoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/asansone/Desktop/2019-2c/25-TusLibros/Iteracion1/TusLibros-18.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'a s 11/4/2019 17:03:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'a s 11/4/2019 17:03:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'a s 11/4/2019 17:03:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'a s 11/4/2019 17:03:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'a s 11/4/2019 17:03:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'a s 11/4/2019 17:03:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'a s 11/4/2019 17:03:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'a s 11/4/2019 17:03:23'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'a s 11/4/2019 18:33:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'a s 11/4/2019 18:33:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'a s 11/4/2019 18:33:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'a s 11/4/2019 18:33:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'a s 11/4/2019 18:33:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'a s 11/4/2019 18:33:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'a s 11/4/2019 18:33:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'a s 11/4/2019 18:33:47'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'a s 11/4/2019 18:39:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'a s 11/4/2019 18:39:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'a s 11/4/2019 18:39:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'a s 11/4/2019 18:39:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'a s 11/4/2019 18:39:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'a s 11/4/2019 18:39:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'a s 11/4/2019 18:39:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'a s 11/4/2019 18:39:19'!
PASSED!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'a s 11/4/2019 18:42:29'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:44:21'!
test01CantCheckoutEmptyCart

	self assert: false.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:44:53' prior: 50781392!
test01CantCheckoutEmptyCart

	self assert: false.! !

TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'a s 11/4/2019 18:45:48'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'a s 11/4/2019 18:46:00'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:23'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:33'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:42'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:47:02'!
itemSellByTheStore
	
	^ 'validBook'! !

!methodRemoval: CartTest #createCart stamp: 'a s 11/4/2019 18:47:06'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CartTest #defaultCatalog stamp: 'a s 11/4/2019 18:47:06'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'a s 11/4/2019 18:47:06'!
itemNotSellByTheStore
	
	^'invalidBook'!

!methodRemoval: CartTest #itemSellByTheStore stamp: 'a s 11/4/2019 18:47:06'!
itemSellByTheStore
	
	^ 'validBook'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'a s 11/4/2019 18:47:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'a s 11/4/2019 18:47:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'a s 11/4/2019 18:47:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'a s 11/4/2019 18:47:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'a s 11/4/2019 18:47:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'a s 11/4/2019 18:47:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'a s 11/4/2019 18:47:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'a s 11/4/2019 18:47:10'!
PASSED!

TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'a s 11/4/2019 18:47:20'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'a s 11/4/2019 18:50:04'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:49:57' prior: 50781397!
test01CantCheckoutEmptyCart
	
	| emptyCart |
	emptyCart := self createCart. 

	self should: [Cashier checkoutCart: emptyCart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
			]! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'a s 11/4/2019 18:50:11'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:50:21'!
checkoutCart: aCart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCheckoutCart: aCart ! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:50:42' prior: 50781515!
checkoutCart: aCart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	"^self new initializeCheckoutCart: aCart" ! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:50:47' prior: 50781524!
checkoutCart: aCart 
	self shouldBeImplemented.
	"^self new initializeCheckoutCart: aCart" ! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'a s 11/4/2019 18:50:48'!
ERROR!
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 18:51:04'!
cantCheckoutEmptyCartErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 18:51:16' prior: 50781542!
cantCheckoutEmptyCartErrorDescription
	^'cant checkout empty cart'! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'a s 11/4/2019 18:51:18'!
FAILURE!
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:52:04' prior: 50781533!
checkoutCart: aCart

	^self new ! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:52:52' prior: 50781557!
checkoutCart: aCart
	self error: self cantCheckoutEmptyCartErrorDescription ! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'a s 11/4/2019 18:52:54'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:56:51' prior: 50781500!
test01CantCheckoutEmptyCart
	
	| emptyCart |
	emptyCart := self createCart. 

	self should: [Cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
			]! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:57:26'!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self cantCheckoutEmptyCartErrorDescription ! !

!methodRemoval: Cashier class #checkoutCart: stamp: 'a s 11/4/2019 18:57:28'!
checkoutCart: aCart
	self error: self cantCheckoutEmptyCartErrorDescription !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'a s 11/4/2019 18:57:31'!
ERROR!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'a s 11/4/2019 18:57:31'!
ERROR!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:57:51'!
validCreditCard

	^'credit card'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:57:57' prior: 50781601!
validCreditCard

	^'valid credit card'! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'a s 11/4/2019 18:57:59'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:00:03' prior: 50781571!
test01CantCheckoutEmptyCart
	
	| emptyCart |
	emptyCart := self createCart. 

	self should: [Cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:02:59' prior: 50781612!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier new.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!Cashier methodsFor: 'nil' stamp: 'a s 11/4/2019 19:03:44'!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self cantCheckoutEmptyCartErrorDescription ! !

!methodRemoval: Cashier class #checkoutCart:withCreditCard: stamp: 'a s 11/4/2019 19:03:51'!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self cantCheckoutEmptyCartErrorDescription !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'a s 11/4/2019 19:03:55'!
ERROR!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'a s 11/4/2019 19:03:55'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:04:08' prior: 50781639!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self class cantCheckoutEmptyCartErrorDescription ! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'a s 11/4/2019 19:04:09'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:08:39'!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier new.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:08:45' prior: 50781667!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier new.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:09:43' prior: 50781682!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| cart cashier |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	 
	cashier := Cashier new.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:10:39' prior: 50781689!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:11:45' prior: 50781697!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1
	self assert: (aCashier ledger at: 1) equals: aCart! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:11:50' prior: 50781707!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartInLedger stamp: 'a s 11/4/2019 19:11:52'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:12:22' prior: 50781658!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription] 
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:12:30' prior: 50781738!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	
	
	! !

!classDefinition: #Cashier category: #TusLibros stamp: 'a s 11/4/2019 19:12:48'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:12:46' prior: 50781746!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	
	ledger add: aCart
	
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:13:02'!
initialize

	ledger := OrderedCollection new.
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:13:12'!
ledger 
	ledger
	
	! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'a s 11/4/2019 19:13:13'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartInLedger stamp: 'a s 11/4/2019 19:13:13'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartInLedger stamp: 'a s 11/4/2019 19:13:13'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:13:28' prior: 50781773!
ledger 
	^ledger copy
	
	! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'a s 11/4/2019 19:13:30'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartInLedger stamp: 'a s 11/4/2019 19:13:30'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:24:52'!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	! !

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'a s 11/4/2019 19:24:56'!
ERROR!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:25:09'!
expiredCreditCard
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'a s 11/4/2019 19:31:56'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:31:50' prior: 50781818!
expiredCreditCard
	^CreditCard withNumber: '1231231' name: 'hola' withExpiration: (GregorianMonthOfYear year: 2019 month: December)! !

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'a s 11/4/2019 19:32:02'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 19:32:08'!
withNumber: aString name: aString2 withExpiration: aGregorianMonthOfYear 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aString name: aString2 withExpiration: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 19:33:14' prior: 50781841!
withNumber: aNumber name: aName withExpiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName withExpiration: anExpiration ! !

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'a s 11/4/2019 19:33:17'!
ERROR!

!classDefinition: #CreditCard category: #TusLibros stamp: 'a s 11/4/2019 19:33:32'!
Object subclass: #CreditCard
	instanceVariableNames: 'number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'a s 11/4/2019 19:33:32'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'a s 11/4/2019 19:33:33'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:33:33'!
initializeWithNumber: aNumber name: aName withExpiration: anExpiration 
	self shouldBeImplemented.
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:33:42' prior: 50781885!
initializeWithNumber: aNumber name: aName withExpiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'a s 11/4/2019 19:33:45'!
FAILURE!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'a s 11/4/2019 19:34:25'!
FAILURE!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'a s 11/4/2019 19:34:59'!
FAILURE!
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 19:35:33'!
expiredCreditCardErrorDescription
	^'credit card is expired'! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'a s 11/4/2019 19:35:36'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartInLedger stamp: 'a s 11/4/2019 19:35:36'!
PASSED!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'a s 11/4/2019 19:35:36'!
FAILURE!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'a s 11/4/2019 19:35:36'!
FAILURE!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'a s 11/4/2019 19:36:04'!
FAILURE!

!methodRemoval: CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'a s 11/4/2019 19:37:01'!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	!

TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'a s 11/4/2019 19:37:10'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'nil' stamp: 'a s 11/4/2019 19:38:29'!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	aCreditCard := self expiredCreditCard
	
	self assert: aCreditCard isExpired. ! !

!testRun: #CreditCardTest #test01CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 19:38:33'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 19:38:33'!
ERROR!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:38:49' prior: 50781961!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: aCreditCard isExpired. ! !

!testRun: #CreditCardTest #test01CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 19:38:50'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 19:38:50'!
ERROR!
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:39:09'!
isExpired
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:39:14' prior: 50781992!
isExpired
	^true! !

!testRun: #CreditCardTest #test01CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 19:39:18'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:39:39'!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self assert: aCreditCard isExpired negated . ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:39:40' prior: 50782003!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self assert: aCreditCard isExpired negated. ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:39:49' prior: 50782012!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: aCreditCard isExpired. ! !

!testRun: #CreditCardTest #test02CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 19:39:51'!
ERROR!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:40:23' prior: 50781830!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		withExpiration: (GregorianMonthOfYear year: 2019 month: December)! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 19:40:43'!
withNumber: aNumber name: aName expiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName withExpiration: anExpiration ! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:40:43' prior: 50782033!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2019 month: December)! !

!methodRemoval: CreditCard class #withNumber:name:withExpiration: stamp: 'a s 11/4/2019 19:40:43'!
withNumber: aNumber name: aName withExpiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName withExpiration: anExpiration !
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:41:02'!
initializeWithNumber: aNumber name: aName expiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:41:02' prior: 50782040!
withNumber: aNumber name: aName expiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName expiration: anExpiration ! !

!methodRemoval: CreditCard #initializeWithNumber:name:withExpiration: stamp: 'a s 11/4/2019 19:41:02'!
initializeWithNumber: aNumber name: aName withExpiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.!

!testRun: #CreditCardTest #test01CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 19:41:03'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 19:41:03'!
ERROR!

!testRun: #CreditCardTest #test02CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 19:41:03'!
ERROR!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:43:02' prior: 50781605!
validCreditCard

	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2019 month: December).! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:43:11' prior: 50782048!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2018 month: December)! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:44:34' prior: 50782104!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2018 month: December). ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:45:04'!
test02CreditCardIsNotExpiredIfItHasNotReachedExpiration
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: aCreditCard isExpired. ! !

!methodRemoval: CreditCardTest #test02CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 19:45:04'!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: aCreditCard isExpired. !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:45:53' prior: 50781996!
isExpired
	^expiration <= FixedGregorianDate ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:45:58' prior: 50782134!
isExpired
	^expiration <= FixedGregorianDate today! !

!testRun: #CreditCardTest #test01CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 19:45:59'!
ERROR!

!testRun: #CreditCardTest #test02CreditCardIsNotExpiredIfItHasNotReachedExpiration stamp: 'a s 11/4/2019 19:45:59'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 19:46:08'!
ERROR!
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:46:22' prior: 50782139!
isExpired
	^expiration <= FixedGregorianDate today monthOfYear ! !

!testRun: #CreditCardTest #test01CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 19:46:24'!
ERROR!

!testRun: #CreditCardTest #test02CreditCardIsNotExpiredIfItHasNotReachedExpiration stamp: 'a s 11/4/2019 19:46:24'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 19:46:26'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 19:46:26'!
ERROR!
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:47:36' prior: 50782155!
isExpired
	^expiration < FixedGregorianDate today monthOfYear ! !

!testRun: #CreditCardTest #test01CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 19:47:38'!
ERROR!

!testRun: #CreditCardTest #test02CreditCardIsNotExpiredIfItHasNotReachedExpiration stamp: 'a s 11/4/2019 19:47:38'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 19:47:39'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 19:47:39'!
ERROR!

expiration !

expiration class!

[]!

FixedGregorianDate today monthOfYear!

FixedGregorianDate today monthOfYear!

2019!

FixedGregorianDate today monthOfYear class!

expiration class!
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:51:37' prior: 50782175!
isExpired
	^expiration < (FixedGregorianDate today monthOfYear) ! !

!testRun: #CreditCardTest #test02CreditCardIsNotExpiredIfItHasNotReachedExpiration stamp: 'a s 11/4/2019 19:51:40'!
ERROR!

expiration!

expiration class!

FixedGregorianDate today monthOfYear class!

FixedGregorianDate today monthOfYear!

!testRun: #CreditCardTest #test02CreditCardIsNotExpiredIfItHasNotReachedExpiration stamp: 'a s 11/4/2019 19:56:11'!
ERROR!

expiration!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:25' prior: 50782111!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2018 * year month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:37' prior: 50782218!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: (2018 * year) month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:45' prior: 50782097!
validCreditCard

	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2019 month: December).! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:52' prior: 50782226!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2018 month: December). ! !

!testRun: #CreditCardTest #test01CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 19:57:54'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardIsNotExpiredIfItHasNotReachedExpiration stamp: 'a s 11/4/2019 19:57:54'!
PASSED!
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 20:01:45'!
isExpiredFrom: aDate
	^expiration < (aDate monthOfYear) ! !

!methodRemoval: CreditCard #isExpired stamp: 'a s 11/4/2019 20:02:02'!
isExpired
	^expiration < (FixedGregorianDate today monthOfYear) !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:03:30'!
date
	FixedGregorianDate yearNumber: 2019 month: February dayNumber: 20 ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:03:35' prior: 50782266!
date
	^FixedGregorianDate yearNumber: 2019 month: February dayNumber: 20 ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:02' prior: 50781977!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:46' prior: 50782278!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:56' prior: 50782118!
test02CreditCardIsNotExpiredIfItHasNotReachedExpiration
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: (aCreditCard isExpiredFrom: self date). ! !

!testRun: #CreditCardTest #test01CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 20:04:57'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardIsNotExpiredIfItHasNotReachedExpiration stamp: 'a s 11/4/2019 20:04:57'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:05:08'!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	! !

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'a s 11/4/2019 20:05:25'!
FAILURE!

!classDefinition: #Cashier category: #TusLibros stamp: 'a s 11/4/2019 20:06:12'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:06:19' prior: 50781760!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].
	
	ledger add: aCart
	
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:07:01'!
initializeOn: aDate
	date := aDate.
	ledger := OrderedCollection new.
	
	! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:07:38'!
newOn: aDate
	^self new initializeOn: aDate! !

!methodRemoval: Cashier #initialize stamp: 'a s 11/4/2019 20:07:43'!
initialize

	ledger := OrderedCollection new.
	
	!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:07:53' prior: 50781625!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier newOn: self date.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:08:13'!
createCashier
	
	^Cashier newOn: self date! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:08:29' prior: 50782364!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := self createCashier.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:08:45' prior: 50781721!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:08:55' prior: 50782312!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	! !

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'a s 11/4/2019 20:08:56'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'a s 11/4/2019 20:08:56'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartInLedger stamp: 'a s 11/4/2019 20:08:56'!
PASSED!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'a s 11/4/2019 20:08:56'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:25' prior: 50782412!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:47' prior: 50782383!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := self createCashier.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: cashier ledger isEmpty 
	]! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:10:18'!
newOn: aDate registeringOn: aLedger
	^self new initializeOn: aDate registeringOn: aLedger.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:10:36'!
initializeOn: aDate registeringOn: aLedger
	date := aDate.
	ledger := aLedger 
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:10:41' prior: 50781787!
ledger 
	^ledger
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:10:54' prior: 50782488!
ledger 
	^ledger copy
	
	! !

!methodRemoval: Cashier #initializeOn: stamp: 'a s 11/4/2019 20:10:57'!
initializeOn: aDate
	date := aDate.
	ledger := OrderedCollection new.
	
	!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:11:16' prior: 50782378!
createCashier
	
	^Cashier newOn: self date registeringOn: OrderedCollection new.! !

!methodRemoval: Cashier class #newOn: stamp: 'a s 11/4/2019 20:11:22'!
newOn: aDate
	^self new initializeOn: aDate!
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:32:24'!
test03CreditCardIsNotValidIfNameContainsNumbers

	self should: [] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: CreditCard invalidNameErrorDescription
			]! !

!testRun: #CreditCardTest #test03CreditCardIsNotValidIfNameContainsNumbers stamp: 'a s 11/4/2019 20:32:27'!
FAILURE!
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:33:38' prior: 50782510!
test03CreditCardIsNotValidIfNameContainsNumbers

	self should: [CreditCard withNumber: 123 name: '123' expiration: self date monthOfYear ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: CreditCard invalidNameErrorDescription
			]! !

!testRun: #CreditCardTest #test03CreditCardIsNotValidIfNameContainsNumbers stamp: 'a s 11/4/2019 20:33:41'!
FAILURE!
!CreditCard class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 20:34:00'!
invalidNameErrorDescription
	^'invalid name'! !
!CreditCard class methodsFor: 'validating' stamp: 'a s 11/4/2019 20:35:18'!
validName: aName
	^aName allSatisfy: [:aChar | aChar isLetter].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:35:52' prior: 50782071!
withNumber: aNumber name: aName expiration: anExpiration 
	(self validName: aName) ifFalse: [self error: self invalidNameErrorDescription ].
	
	^self new initializeWithNumber: aNumber name: aName expiration: anExpiration ! !

!testRun: #CreditCardTest #test01CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 20:35:53'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardIsNotExpiredIfItHasNotReachedExpiration stamp: 'a s 11/4/2019 20:35:53'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardIsNotValidIfNameContainsNumbers stamp: 'a s 11/4/2019 20:35:53'!
PASSED!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:15' prior: 50782234!
validCreditCard

	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2019 month: December).! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:21' prior: 50782242!
expiredCreditCard
	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2018 month: December). ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'a s 11/4/2019 20:36:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'a s 11/4/2019 20:36:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'a s 11/4/2019 20:36:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'a s 11/4/2019 20:36:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'a s 11/4/2019 20:36:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'a s 11/4/2019 20:36:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'a s 11/4/2019 20:36:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'a s 11/4/2019 20:36:27'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 20:36:28'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardIsNotExpiredIfItHasNotReachedExpiration stamp: 'a s 11/4/2019 20:36:28'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardIsNotValidIfNameContainsNumbers stamp: 'a s 11/4/2019 20:36:28'!
PASSED!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:41:42'!
priceOfItemSellByTheStore
	
	^200 * peso! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:41:46' prior: 50782624!
priceOfItemSellByTheStore
	
	^200 * peso! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:43:11' prior: 50781428!
defaultCatalog
	
	| catalog |
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self priceOfItemSellByTheStore! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:43:22' prior: 50782634!
defaultCatalog
	
	| catalog |
	
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self priceOfItemSellByTheStore.
	
	^catalog! !
!Cart methodsFor: 'assertions' stamp: 'a s 11/4/2019 20:43:50' prior: 50781141!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'a s 11/4/2019 20:44:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'a s 11/4/2019 20:44:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'a s 11/4/2019 20:44:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'a s 11/4/2019 20:44:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'a s 11/4/2019 20:44:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'a s 11/4/2019 20:44:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'a s 11/4/2019 20:44:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'a s 11/4/2019 20:44:00'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:45:28'!
test09CartKnowsItsTotalPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore.! !

!testRun: #CartTest #test09CartKnowsItsTotalPrice stamp: 'a s 11/4/2019 20:45:31'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:45:44'!
price
	self shouldBeImplemented.! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:47:02' prior: 50782692!
price
	^0! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:17'!
test09EmptyCartHasAPriceOf0

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore.! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:23' prior: 50782699!
test09EmptyCartHasAPriceOf0

	| cart |
	
	cart := self createCart.
	
	self assert: cart price equals: 0! !

!methodRemoval: CartTest #test09CartKnowsItsTotalPrice stamp: 'a s 11/4/2019 20:47:26'!
test09CartKnowsItsTotalPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore.!

!testRun: #CartTest #test09EmptyCartHasAPriceOf0 stamp: 'a s 11/4/2019 20:47:28'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'a s 11/4/2019 20:47:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'a s 11/4/2019 20:47:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'a s 11/4/2019 20:47:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'a s 11/4/2019 20:47:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'a s 11/4/2019 20:47:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'a s 11/4/2019 20:47:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'a s 11/4/2019 20:47:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'a s 11/4/2019 20:47:28'!
PASSED!

!testRun: #CartTest #test09EmptyCartHasAPriceOf0 stamp: 'a s 11/4/2019 20:47:28'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:53'!
test10CartPriceIsTheSumOfTheItemsPrice

	| cart |
	
	cart := self createCart.
	
	self assert: cart price equals: 0! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:48:16' prior: 50782754!
test10CartPriceIsTheSumOfTheItemsPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore ! !

!testRun: #CartTest #test10CartPriceIsTheSumOfTheItemsPrice stamp: 'a s 11/4/2019 20:48:18'!
FAILURE!
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:48:54' prior: 50782696!
price
	^items sum: [:item | self priceOf: item] ifEmpty: [0] ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:49:17'!
priceOf: anItem
	^catalog at: anItem ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'a s 11/4/2019 20:49:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'a s 11/4/2019 20:49:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'a s 11/4/2019 20:49:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'a s 11/4/2019 20:49:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'a s 11/4/2019 20:49:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'a s 11/4/2019 20:49:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'a s 11/4/2019 20:49:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'a s 11/4/2019 20:49:21'!
PASSED!

!testRun: #CartTest #test09EmptyCartHasAPriceOf0 stamp: 'a s 11/4/2019 20:49:21'!
PASSED!

!testRun: #CartTest #test10CartPriceIsTheSumOfTheItemsPrice stamp: 'a s 11/4/2019 20:49:21'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:50:18'!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.! !

!methodRemoval: CashierTest #test02CheckoutCartWithOneItemSavesCartInLedger stamp: 'a s 11/4/2019 20:50:25'!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.!
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:53:46'!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 

	| ledgerEntry |
	ledgerEntry := aLedger at: anIndex.
	
	! !
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:54:42' prior: 50782841!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 
	| ledgerEntry |
	
	ledgerEntry := aLedger at: anIndex.

	self assert: (ledgerEntry at: 1) equals: anItem.
	self assert: (ledgerEntry at: 2) equals: anAmount 
	! !
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:54:43' prior: 50782848!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 
	| ledgerEntry |
	
	ledgerEntry := aLedger at: anIndex.

	self assert: (ledgerEntry at: 1) equals: anItem.
	self assert: (ledgerEntry at: 2) equals: anAmount.
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:55:40' prior: 50782813!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore of: 2.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assertOn: aCashier ledger at: 1 wasSold: self itemSellByTheStore withAmount: 2! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'a s 11/4/2019 20:55:48'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'a s 11/4/2019 20:55:48'!
ERROR!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'a s 11/4/2019 20:55:48'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'a s 11/4/2019 20:55:48'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'a s 11/4/2019 20:55:52'!
ERROR!

aQuantity !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:56:22' prior: 50782868!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assertOn: aCashier ledger at: 1 wasSold: self itemSellByTheStore withAmount: 2! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'a s 11/4/2019 20:56:23'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:09:33' prior: 50782340!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	
	! !
!Cart methodsFor: 'initialization' stamp: 'a s 11/4/2019 21:10:00' prior: 50781154!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'initialization' stamp: 'a s 11/4/2019 21:13:47' prior: 50782929!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !

b := Bag new!

b add: 5 of: 'asd' !

b add: 3 withOccurrences: 2!

b!

b add: 3!

b!

b do: [:i | i printString ]!

b do: [:i | i printString ]!

i := 0!

x := 0
b do: [:i | x := x +1]!


x := 0.
b do: [:i | x := x +1]!

x!
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 21:18:21'!
uniqueItemsDo: aBlock
	items asSet do: aBlock! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:20:00' prior: 50782918!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	
	aCart  uniqueItemsDo: [:item | | occurrencesOfItem |
		occurrencesOfItem := aCart occurrencesOf: item.
		ledger add: (Array with: item with: occurrencesOfItem)
	]! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'a s 11/4/2019 21:20:04'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'a s 11/4/2019 21:20:04'!
PASSED!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'a s 11/4/2019 21:20:04'!
PASSED!
!Cashier methodsFor: 'nil' stamp: 'a s 11/4/2019 21:20:31'!
recordSalesOnLedgerFor: aCart! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:20:41' prior: 50782977!
recordSalesOnLedgerFor: aCart

	aCart  uniqueItemsDo: [:item | | occurrencesOfItem |
		occurrencesOfItem := aCart occurrencesOf: item.
		ledger add: (Array with: item with: occurrencesOfItem)
	]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:20:51' prior: 50782952!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	self recordSalesOnLedgerFor: aCart ! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'a s 11/4/2019 21:21:36'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'a s 11/4/2019 21:21:36'!
PASSED!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'a s 11/4/2019 21:21:37'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardIsExpiredIfItReachedExpirationDate stamp: 'a s 11/4/2019 21:21:47'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardIsNotExpiredIfItHasNotReachedExpiration stamp: 'a s 11/4/2019 21:21:47'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardIsNotValidIfNameContainsNumbers stamp: 'a s 11/4/2019 21:21:47'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'a s 11/4/2019 21:21:49'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'a s 11/4/2019 21:21:49'!
PASSED!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'a s 11/4/2019 21:21:49'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'a s 11/4/2019 21:21:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'a s 11/4/2019 21:21:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'a s 11/4/2019 21:21:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'a s 11/4/2019 21:21:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'a s 11/4/2019 21:21:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'a s 11/4/2019 21:21:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'a s 11/4/2019 21:21:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'a s 11/4/2019 21:21:51'!
PASSED!

!testRun: #CartTest #test09EmptyCartHasAPriceOf0 stamp: 'a s 11/4/2019 21:21:51'!
PASSED!

!testRun: #CartTest #test10CartPriceIsTheSumOfTheItemsPrice stamp: 'a s 11/4/2019 21:21:51'!
PASSED!

----SNAPSHOT----(4 November 2019 21:22:33) CuisUniversity-3938.image priorSource: 14376150!

----QUIT----(4 November 2019 21:22:35) CuisUniversity-3938.image priorSource: 14445273!

----STARTUP---- (6 November 2019 17:18:17) as /Users/ssujarchuk/Downloads/macos64/CuisUniversity-3938.image!


----End fileIn of /Users/ssujarchuk/Downloads/macos64/TusLibros.st----!

!testRun: #CreditCardTest #test01CreditCardIsExpiredIfItReachedExpirationDate stamp: 'ss 11/6/2019 17:19:15'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardIsNotExpiredIfItHasNotReachedExpiration stamp: 'ss 11/6/2019 17:19:15'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardIsNotValidIfNameContainsNumbers stamp: 'ss 11/6/2019 17:19:15'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'ss 11/6/2019 17:19:18'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'ss 11/6/2019 17:19:18'!
PASSED!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/6/2019 17:19:18'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ss 11/6/2019 17:19:20'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ss 11/6/2019 17:19:20'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ss 11/6/2019 17:19:20'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ss 11/6/2019 17:19:20'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ss 11/6/2019 17:19:20'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ss 11/6/2019 17:19:20'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ss 11/6/2019 17:19:20'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ss 11/6/2019 17:19:20'!
PASSED!

!testRun: #CartTest #test09EmptyCartHasAPriceOf0 stamp: 'ss 11/6/2019 17:19:20'!
PASSED!

!testRun: #CartTest #test10CartPriceIsTheSumOfTheItemsPrice stamp: 'ss 11/6/2019 17:19:20'!
PASSED!

Object subclass: #MerchantProcessorClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorClient category: #TusLibros stamp: 'ss 11/6/2019 17:21:52'!
Object subclass: #MerchantProcessorClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorClient methodsFor: 'debit' stamp: 'ss 11/6/2019 17:24:07'!
debitAnAmoutnOf: anAmount to: aCreditCard
	self subclassResponsibility! !

MerchantProcessorClient subclass: #MockMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MockMerchantProcessor category: #TusLibros stamp: 'ss 11/6/2019 17:25:33'!
MerchantProcessorClient subclass: #MockMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:26:03'!
debitAnAmoutnOf: anAmount to: aCreditCard
! !

Object subclass: #Cashier
	instanceVariableNames: 'ledger date merchantProcesorClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 17:26:34'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date merchantProcesorClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier class methodsFor: 'instance creation' stamp: 'ss 11/6/2019 17:27:18'!
newOn: aDate registeringOn: aLedger withMerchantProcesorClient: aClient
	^self new initializeOn: aDate registeringOn: aLedger withMerchantProcesorClient: aClient.! !

!methodRemoval: Cashier class #newOn:registeringOn: stamp: 'ss 11/6/2019 17:27:22'!
newOn: aDate registeringOn: aLedger
	^self new initializeOn: aDate registeringOn: aLedger.!
!Cashier methodsFor: 'initialization' stamp: 'ss 11/6/2019 17:27:55'!
initializeOn: aDate registeringOn: aLedger withMerchantProcesorClient: aClient
	date := aDate.
	ledger := aLedger.
	merchantProcesorClient := aClient
	
	! !

!methodRemoval: Cashier #initializeOn:registeringOn: stamp: 'ss 11/6/2019 17:27:56'!
initializeOn: aDate registeringOn: aLedger
	date := aDate.
	ledger := aLedger 
	
	!
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:28:31' prior: 50783091!
createCashier
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: MockMerchantProcessor new.! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'ss 11/6/2019 17:28:35'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'ss 11/6/2019 17:28:35'!
PASSED!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/6/2019 17:28:35'!
PASSED!

TestCase subclass: #TusLibrosTest
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 17:30:15'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'nil' stamp: 'ss 11/6/2019 17:30:34'!
setUp
	merchantProcessor := MockMerchantProcessor new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:30:53' prior: 50783667!
createCashier
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: merchantProcessor.! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'ss 11/6/2019 17:31:12'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'ss 11/6/2019 17:31:12'!
PASSED!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/6/2019 17:31:12'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:31:44' prior: 50783284!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !

TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 17:31:49'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: TusLibrosTest #setUp stamp: 'ss 11/6/2019 17:31:53'!
setUp
	merchantProcessor := MockMerchantProcessor new.!
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:32:33' prior: 50783701!
createCashier
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: MockMerchantProcessor new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:32:50'!
createCashierWithMerchantProcessorClient: aClient
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: MockMerchantProcessor new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:32:54' prior: 50783757!
createCashierWithMerchantProcessorClient: aClient
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: aClient .! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:33:11' prior: 50783750!
createCashier
	
	^self createCashierWithMerchantProcessorClient: MockMerchantProcessor new.! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'ss 11/6/2019 17:33:14'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'ss 11/6/2019 17:33:14'!
PASSED!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/6/2019 17:33:14'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:35:52'!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:36:16' prior: 50783790!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:36:46' prior: 50783802!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor creditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	creditCard := self validCreditCard.
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:37:57' prior: 50783816!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCashier checkoutCart: aCart withCreditCard: aCreditCard 
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:39:12' prior: 50783831!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCashier checkoutCart: aCart withCreditCard: aCreditCard.
	
	self assert: (mockMerchantProcessor hasCharged: (aCart price) to: aCreditCard).
	
	
	
	! !

!testRun: #CashierTest #test04CheckoutDebitsCartPriceFromCreditCard stamp: 'ss 11/6/2019 17:39:55'!
ERROR!
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:40:07'!
hasCharged: aSimpleMeasure to: aCreditCard 
	self shouldBeImplemented.! !

!classDefinition: #MockMerchantProcessor category: #TusLibros stamp: 'ss 11/6/2019 17:42:31'!
MerchantProcessorClient subclass: #MockMerchantProcessor
	instanceVariableNames: 'chargesPerCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:42:18' prior: 50783871!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard) includes: anAmount.! !

!testRun: #CashierTest #test04CheckoutDebitsCartPriceFromCreditCard stamp: 'ss 11/6/2019 17:42:34'!
ERROR!
!MockMerchantProcessor methodsFor: 'nil' stamp: 'ss 11/6/2019 17:42:53'!
initialize
	chargesPerCreditCard := Dictionary new.! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:44:50' prior: 50783624!
debitAnAmoutnOf: anAmount to: aCreditCard
	(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new])
		add: anAmount! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:45:14' prior: 50783885!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number) includes: anAmount.! !

!testRun: #CashierTest #test04CheckoutDebitsCartPriceFromCreditCard stamp: 'ss 11/6/2019 17:45:20'!
ERROR!
!CreditCard methodsFor: 'accessing' stamp: 'ss 11/6/2019 17:46:02'!
number
	^number! !
!CreditCard methodsFor: 'accessing' stamp: 'ss 11/6/2019 17:46:09' prior: 50783916!
number
	^number copy! !

!testRun: #CashierTest #test04CheckoutDebitsCartPriceFromCreditCard stamp: 'ss 11/6/2019 17:46:29'!
ERROR!
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:47:25' prior: 50783907!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new]) includes: anAmount.! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:47:29' prior: 50783928!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new]) 
		includes: anAmount.! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:47:49' prior: 50783899!
debitAnAmoutnOf: anAmount to: aCreditCard
	(chargesPerCreditCard at: aCreditCard number ifAbsent: [OrderedCollection new])
		add: anAmount! !

!testRun: #CashierTest #test04CheckoutDebitsCartPriceFromCreditCard stamp: 'ss 11/6/2019 17:47:54'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'ss 11/6/2019 17:48:18' prior: 50783437!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	self recordSalesOnLedgerFor: aCart.
	merchantProcesorClient debitAnAmoutnOf: aCart price to: aCreditCard.
	! !

!testRun: #CashierTest #test04CheckoutDebitsCartPriceFromCreditCard stamp: 'ss 11/6/2019 17:48:25'!
FAILURE!

!testRun: #CashierTest #test04CheckoutDebitsCartPriceFromCreditCard stamp: 'ss 11/6/2019 17:48:29'!
FAILURE!

anAmount !

aCreditCard !

aCreditCard number!

aCreditCard number = aCreditCard number!

chargesPerCreditCard!
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:49:58' prior: 50783944!
debitAnAmoutnOf: anAmount to: aCreditCard
	(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new])
		add: anAmount! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:50:03' prior: 50783936!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number ifAbsent: [OrderedCollection new]) 
		includes: anAmount.! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'ss 11/6/2019 17:50:05'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'ss 11/6/2019 17:50:05'!
PASSED!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/6/2019 17:50:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutDebitsCartPriceFromCreditCard stamp: 'ss 11/6/2019 17:50:05'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:03' prior: 50783256!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	

	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty 
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:09' prior: 50784009!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty 
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:46' prior: 50784029!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (emptyCart price) to: self validCreditCard ).
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:48' prior: 50784049!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (emptyCart price) to: self validCreditCard).
	]! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'ss 11/6/2019 17:54:49'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'ss 11/6/2019 17:54:49'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'ss 11/6/2019 17:54:49'!
PASSED!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/6/2019 17:54:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutDebitsCartPriceFromCreditCard stamp: 'ss 11/6/2019 17:54:49'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:55:08' prior: 50783718!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:55:26' prior: 50784111!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	! !

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/6/2019 17:55:29'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'ss 11/6/2019 17:55:29'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'ss 11/6/2019 17:55:29'!
PASSED!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/6/2019 17:55:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutDebitsCartPriceFromCreditCard stamp: 'ss 11/6/2019 17:55:29'!
PASSED!

'frutafrutafrutafrutafrutaaaaaa' length !

'frutafrutafrutafrutafrutaaaaaa' size !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:57:44'!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	aCashier checkoutCart: aCart withCreditCard: aCreditCard.
	
	self assert: (mockMerchantProcessor hasCharged: (aCart price) to: aCreditCard).
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:57:59' prior: 50784175!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:58:42' prior: 50784196!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:59:12' prior: 50784224!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !

!testRun: #CashierTest #test05CantDebitACreditCardWithNameLongerThan30Chars stamp: 'ss 11/6/2019 17:59:14'!
ERROR!
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:00:53' prior: 50784252!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' 
		expiration: (GregorianMonthOfYear yearNumber: 2020 month: January).
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !

!testRun: #CashierTest #test05CantDebitACreditCardWithNameLongerThan30Chars stamp: 'ss 11/6/2019 18:00:57'!
FAILURE!
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 18:01:50' prior: 50783980!
debitAnAmoutnOf: anAmount to: aCreditCard
	self assertNameLengthFor: aCreditCard.

	(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new])
		add: anAmount! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'ss 11/6/2019 18:01:57'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'ss 11/6/2019 18:01:57'!
ERROR!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/6/2019 18:01:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutDebitsCartPriceFromCreditCard stamp: 'ss 11/6/2019 18:01:57'!
ERROR!

!testRun: #CashierTest #test05CantDebitACreditCardWithNameLongerThan30Chars stamp: 'ss 11/6/2019 18:01:57'!
ERROR!

!testRun: #CashierTest #test05CantDebitACreditCardWithNameLongerThan30Chars stamp: 'ss 11/6/2019 18:02:00'!
ERROR!
!MockMerchantProcessor methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:02:13'!
assertNameLengthFor: aCreditCard 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'accessing' stamp: 'ss 11/6/2019 18:03:05'!
name
	^name! !
!MockMerchantProcessor methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:03:26' prior: 50784347!
assertNameLengthFor: aCreditCard 
	aCreditCard name size > 30 ifTrue: [self error: self class creditCardNameTooLongErrorDescription]! !

!testRun: #CashierTest #test05CantDebitACreditCardWithNameLongerThan30Chars stamp: 'ss 11/6/2019 18:03:35'!
ERROR!
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:03:45'!
creditCardNameTooLongErrorDescription
	self shouldBeImplemented.! !
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:04:02' prior: 50784367!
creditCardNameTooLongErrorDescription
	^'credit card name cant be larger than 30 characters'! !
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:04:07' prior: 50784373!
creditCardNameTooLongErrorDescription
	^'credit card name cant be longer than 30 characters'! !

!testRun: #CashierTest #test05CantDebitACreditCardWithNameLongerThan30Chars stamp: 'ss 11/6/2019 18:04:10'!
FAILURE!

!testRun: #CashierTest #test05CantDebitACreditCardWithNameLongerThan30Chars stamp: 'ss 11/6/2019 18:04:28'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'ss 11/6/2019 18:04:51' prior: 50783955!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	merchantProcesorClient debitAnAmoutnOf: aCart price to: aCreditCard.
	self recordSalesOnLedgerFor: aCart.
	! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'ss 11/6/2019 18:04:54'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'ss 11/6/2019 18:04:54'!
PASSED!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/6/2019 18:04:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutDebitsCartPriceFromCreditCard stamp: 'ss 11/6/2019 18:04:54'!
PASSED!

!testRun: #CashierTest #test05CantDebitACreditCardWithNameLongerThan30Chars stamp: 'ss 11/6/2019 18:04:54'!
PASSED!

!testRun: #CashierTest #test05CantDebitACreditCardWithNameLongerThan30Chars stamp: 'ss 11/6/2019 18:04:57'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'ss 11/6/2019 18:04:57'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'ss 11/6/2019 18:04:57'!
PASSED!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/6/2019 18:04:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutDebitsCartPriceFromCreditCard stamp: 'ss 11/6/2019 18:04:57'!
PASSED!

!testRun: #CashierTest #test05CantDebitACreditCardWithNameLongerThan30Chars stamp: 'ss 11/6/2019 18:04:57'!
PASSED!
!MerchantProcessorClient methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:08:11'!
assertNameLengthFor: aCreditCard 
	aCreditCard name size > 30 ifTrue: [self error: self class creditCardNameTooLongErrorDescription]! !

!methodRemoval: MockMerchantProcessor #assertNameLengthFor: stamp: 'ss 11/6/2019 18:08:16'!
assertNameLengthFor: aCreditCard 
	aCreditCard name size > 30 ifTrue: [self error: self class creditCardNameTooLongErrorDescription]!
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:09:55'!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard .
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:09:57' prior: 50784459!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !

10 ^ 5!
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:12:39' prior: 50784486!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: (10^15 / self priceOfItemSellByTheStore) + 1 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !

1.1!

1.1 truncated !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:13:46' prior: 50784513!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: (10^15 / self priceOfItemSellByTheStore) truncated + 2 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionAmountTooBig.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !

!testRun: #CashierTest #test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15 stamp: 'ss 11/6/2019 18:13:54'!
ERROR!

aQuantity !

20 * peso!

20 * peso number!

(20 * peso) number!

20 * peso!

aQuantity amount !

(20 * peso) amount!
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:16:02' prior: 50784542!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: (10^15 / self priceOfItemSellByTheStore amount) truncated + 2 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionAmountTooBig.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !

----STARTUP---- (6 November 2019 18:18:16) as /Users/ssujarchuk/Downloads/macos64/CuisUniversity-3938.image!


!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/6/2019 18:18:24'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/6/2019 18:18:24'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidItem: anItem

	(catalog includes: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 17:48'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45'!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51'!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44'!
add: anItem

	^ self add: 1 of: anItem ! !

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/6/2019 18:18:24'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/6/2019 18:18:24'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:24'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:24'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:08'!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:44'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:48'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
itemSellByTheStore
	
	^ 'validBook'! !

!classRemoval: #Cart stamp: 'ss 11/6/2019 18:18:24'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'ss 11/6/2019 18:18:24'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/6/2019 18:18:24'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/6/2019 18:18:24'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidItem: anItem

	(catalog includes: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 17:48'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45'!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51'!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44'!
add: anItem

	^ self add: 1 of: anItem ! !

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/6/2019 18:18:24'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/6/2019 18:18:24'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:24'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:24'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:08'!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:44'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:48'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
itemSellByTheStore
	
	^ 'validBook'! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:24'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:24'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:44:21'!
test01CantCheckoutEmptyCart

	self assert: false.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:44:53' prior: 50785007!
test01CantCheckoutEmptyCart

	self assert: false.! !

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:24'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:24'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:24'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:24'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:23'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:33'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:42'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:47:02'!
itemSellByTheStore
	
	^ 'validBook'! !

!methodRemoval: CartTest #createCart stamp: 'ss 11/6/2019 18:18:25'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CartTest #defaultCatalog stamp: 'ss 11/6/2019 18:18:25'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'ss 11/6/2019 18:18:25'!
itemNotSellByTheStore
	
	^'invalidBook'!

!methodRemoval: CartTest #itemSellByTheStore stamp: 'ss 11/6/2019 18:18:25'!
itemSellByTheStore
	
	^ 'validBook'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:25'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:25'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:18:25'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:49:57' prior: 50785012!
test01CantCheckoutEmptyCart
	
	| emptyCart |
	emptyCart := self createCart. 

	self should: [Cashier checkoutCart: emptyCart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
			]! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:50:21'!
checkoutCart: aCart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCheckoutCart: aCart ! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:50:42' prior: 50785109!
checkoutCart: aCart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	"^self new initializeCheckoutCart: aCart" ! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:50:47' prior: 50785118!
checkoutCart: aCart 
	self shouldBeImplemented.
	"^self new initializeCheckoutCart: aCart" ! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 18:51:04'!
cantCheckoutEmptyCartErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 18:51:16' prior: 50785133!
cantCheckoutEmptyCartErrorDescription
	^'cant checkout empty cart'! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:52:04' prior: 50785127!
checkoutCart: aCart

	^self new ! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:52:52' prior: 50785145!
checkoutCart: aCart
	self error: self cantCheckoutEmptyCartErrorDescription ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:56:51' prior: 50785097!
test01CantCheckoutEmptyCart
	
	| emptyCart |
	emptyCart := self createCart. 

	self should: [Cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
			]! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:57:26'!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self cantCheckoutEmptyCartErrorDescription ! !

!methodRemoval: Cashier class #checkoutCart: stamp: 'ss 11/6/2019 18:18:25'!
checkoutCart: aCart
	self error: self cantCheckoutEmptyCartErrorDescription !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:57:51'!
validCreditCard

	^'credit card'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:57:57' prior: 50785180!
validCreditCard

	^'valid credit card'! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:00:03' prior: 50785156!
test01CantCheckoutEmptyCart
	
	| emptyCart |
	emptyCart := self createCart. 

	self should: [Cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:02:59' prior: 50785188!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier new.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!Cashier methodsFor: 'nil' stamp: 'a s 11/4/2019 19:03:44'!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self cantCheckoutEmptyCartErrorDescription ! !

!methodRemoval: Cashier class #checkoutCart:withCreditCard: stamp: 'ss 11/6/2019 18:18:25'!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self cantCheckoutEmptyCartErrorDescription !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:04:08' prior: 50785215!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self class cantCheckoutEmptyCartErrorDescription ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:08:39'!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier new.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:08:45' prior: 50785234!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier new.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:09:43' prior: 50785249!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| cart cashier |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	 
	cashier := Cashier new.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:10:39' prior: 50785256!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:11:45' prior: 50785264!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1
	self assert: (aCashier ledger at: 1) equals: aCart! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:11:50' prior: 50785274!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:12:22' prior: 50785228!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription] 
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:12:30' prior: 50785302!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	
	
	! !

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:18:25'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:12:46' prior: 50785310!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	
	ledger add: aCart
	
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:13:02'!
initialize

	ledger := OrderedCollection new.
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:13:12'!
ledger 
	ledger
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:13:28' prior: 50785337!
ledger 
	^ledger copy
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:24:52'!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:25:09'!
expiredCreditCard
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/6/2019 18:18:25'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:31:50' prior: 50785362!
expiredCreditCard
	^CreditCard withNumber: '1231231' name: 'hola' withExpiration: (GregorianMonthOfYear year: 2019 month: December)! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 19:32:08'!
withNumber: aString name: aString2 withExpiration: aGregorianMonthOfYear 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aString name: aString2 withExpiration: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 19:33:14' prior: 50785381!
withNumber: aNumber name: aName withExpiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName withExpiration: anExpiration ! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/6/2019 18:18:25'!
Object subclass: #CreditCard
	instanceVariableNames: 'number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/6/2019 18:18:25'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/6/2019 18:18:25'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:33:33'!
initializeWithNumber: aNumber name: aName withExpiration: anExpiration 
	self shouldBeImplemented.
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:33:42' prior: 50785421!
initializeWithNumber: aNumber name: aName withExpiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 19:35:33'!
expiredCreditCardErrorDescription
	^'credit card is expired'! !

!methodRemoval: CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/6/2019 18:18:25'!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:25'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:25'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'nil' stamp: 'a s 11/4/2019 19:38:29'!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	aCreditCard := self expiredCreditCard
	
	self assert: aCreditCard isExpired. ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:38:49' prior: 50785473!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: aCreditCard isExpired. ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:39:09'!
isExpired
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:39:14' prior: 50785488!
isExpired
	^true! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:39:39'!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self assert: aCreditCard isExpired negated . ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:39:40' prior: 50785496!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self assert: aCreditCard isExpired negated. ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:39:49' prior: 50785505!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: aCreditCard isExpired. ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:40:23' prior: 50785374!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		withExpiration: (GregorianMonthOfYear year: 2019 month: December)! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 19:40:43'!
withNumber: aNumber name: aName expiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName withExpiration: anExpiration ! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:40:43' prior: 50785522!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2019 month: December)! !

!methodRemoval: CreditCard class #withNumber:name:withExpiration: stamp: 'ss 11/6/2019 18:18:25'!
withNumber: aNumber name: aName withExpiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName withExpiration: anExpiration !
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:41:02'!
initializeWithNumber: aNumber name: aName expiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:41:02' prior: 50785529!
withNumber: aNumber name: aName expiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName expiration: anExpiration ! !

!methodRemoval: CreditCard #initializeWithNumber:name:withExpiration: stamp: 'ss 11/6/2019 18:18:25'!
initializeWithNumber: aNumber name: aName withExpiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:43:02' prior: 50785184!
validCreditCard

	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2019 month: December).! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:43:11' prior: 50785537!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2018 month: December)! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:44:34' prior: 50785582!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2018 month: December). ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:45:04'!
test02CreditCardIsNotExpiredIfItHasNotReachedExpiration
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: aCreditCard isExpired. ! !

!methodRemoval: CreditCardTest #test02CreditCardIsExpiredIfItReachedExpirationDate stamp: 'ss 11/6/2019 18:18:25'!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: aCreditCard isExpired. !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:45:53' prior: 50785492!
isExpired
	^expiration <= FixedGregorianDate ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:45:58' prior: 50785612!
isExpired
	^expiration <= FixedGregorianDate today! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:46:22' prior: 50785617!
isExpired
	^expiration <= FixedGregorianDate today monthOfYear ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:47:36' prior: 50785622!
isExpired
	^expiration < FixedGregorianDate today monthOfYear ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:51:37' prior: 50785627!
isExpired
	^expiration < (FixedGregorianDate today monthOfYear) ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:25' prior: 50785589!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2018 * year month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:37' prior: 50785637!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: (2018 * year) month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:45' prior: 50785575!
validCreditCard

	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2019 month: December).! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:52' prior: 50785645!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2018 month: December). ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 20:01:45'!
isExpiredFrom: aDate
	^expiration < (aDate monthOfYear) ! !

!methodRemoval: CreditCard #isExpired stamp: 'ss 11/6/2019 18:18:25'!
isExpired
	^expiration < (FixedGregorianDate today monthOfYear) !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:03:30'!
date
	FixedGregorianDate yearNumber: 2019 month: February dayNumber: 20 ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:03:35' prior: 50785677!
date
	^FixedGregorianDate yearNumber: 2019 month: February dayNumber: 20 ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:02' prior: 50785481!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:46' prior: 50785689!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:56' prior: 50785596!
test02CreditCardIsNotExpiredIfItHasNotReachedExpiration
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: (aCreditCard isExpiredFrom: self date). ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:05:08'!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	! !

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:18:25'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:06:19' prior: 50785324!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].
	
	ledger add: aCart
	
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:07:01'!
initializeOn: aDate
	date := aDate.
	ledger := OrderedCollection new.
	
	! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:07:38'!
newOn: aDate
	^self new initializeOn: aDate! !

!methodRemoval: Cashier #initialize stamp: 'ss 11/6/2019 18:18:25'!
initialize

	ledger := OrderedCollection new.
	
	!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:07:53' prior: 50785201!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier newOn: self date.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:08:13'!
createCashier
	
	^Cashier newOn: self date! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:08:29' prior: 50785763!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := self createCashier.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:08:45' prior: 50785288!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:08:55' prior: 50785715!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:25' prior: 50785811!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:47' prior: 50785782!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := self createCashier.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: cashier ledger isEmpty 
	]! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:10:18'!
newOn: aDate registeringOn: aLedger
	^self new initializeOn: aDate registeringOn: aLedger.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:10:36'!
initializeOn: aDate registeringOn: aLedger
	date := aDate.
	ledger := aLedger 
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:10:41' prior: 50785341!
ledger 
	^ledger
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:10:54' prior: 50785874!
ledger 
	^ledger copy
	
	! !

!methodRemoval: Cashier #initializeOn: stamp: 'ss 11/6/2019 18:18:25'!
initializeOn: aDate
	date := aDate.
	ledger := OrderedCollection new.
	
	!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:11:16' prior: 50785777!
createCashier
	
	^Cashier newOn: self date registeringOn: OrderedCollection new.! !

!methodRemoval: Cashier class #newOn: stamp: 'ss 11/6/2019 18:18:25'!
newOn: aDate
	^self new initializeOn: aDate!
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:32:24'!
test03CreditCardIsNotValidIfNameContainsNumbers

	self should: [] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: CreditCard invalidNameErrorDescription
			]! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:33:38' prior: 50785896!
test03CreditCardIsNotValidIfNameContainsNumbers

	self should: [CreditCard withNumber: 123 name: '123' expiration: self date monthOfYear ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: CreditCard invalidNameErrorDescription
			]! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 20:34:00'!
invalidNameErrorDescription
	^'invalid name'! !
!CreditCard class methodsFor: 'validating' stamp: 'a s 11/4/2019 20:35:18'!
validName: aName
	^aName allSatisfy: [:aChar | aChar isLetter].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:35:52' prior: 50785560!
withNumber: aNumber name: aName expiration: anExpiration 
	(self validName: aName) ifFalse: [self error: self invalidNameErrorDescription ].
	
	^self new initializeWithNumber: aNumber name: aName expiration: anExpiration ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:15' prior: 50785653!
validCreditCard

	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2019 month: December).! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:21' prior: 50785661!
expiredCreditCard
	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2018 month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:41:42'!
priceOfItemSellByTheStore
	
	^200 * peso! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:41:46' prior: 50785953!
priceOfItemSellByTheStore
	
	^200 * peso! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:43:11' prior: 50785048!
defaultCatalog
	
	| catalog |
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self priceOfItemSellByTheStore! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:43:22' prior: 50785963!
defaultCatalog
	
	| catalog |
	
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self priceOfItemSellByTheStore.
	
	^catalog! !
!Cart methodsFor: 'assertions' stamp: 'a s 11/4/2019 20:43:50' prior: 50784831!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:45:28'!
test09CartKnowsItsTotalPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:45:44'!
price
	self shouldBeImplemented.! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:47:02' prior: 50785993!
price
	^0! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:17'!
test09EmptyCartHasAPriceOf0

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore.! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:23' prior: 50786000!
test09EmptyCartHasAPriceOf0

	| cart |
	
	cart := self createCart.
	
	self assert: cart price equals: 0! !

!methodRemoval: CartTest #test09CartKnowsItsTotalPrice stamp: 'ss 11/6/2019 18:18:25'!
test09CartKnowsItsTotalPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore.!
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:53'!
test10CartPriceIsTheSumOfTheItemsPrice

	| cart |
	
	cart := self createCart.
	
	self assert: cart price equals: 0! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:48:16' prior: 50786023!
test10CartPriceIsTheSumOfTheItemsPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:48:54' prior: 50785997!
price
	^items sum: [:item | self priceOf: item] ifEmpty: [0] ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:49:17'!
priceOf: anItem
	^catalog at: anItem ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:50:18'!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.! !

!methodRemoval: CashierTest #test02CheckoutCartWithOneItemSavesCartInLedger stamp: 'ss 11/6/2019 18:18:25'!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.!
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:53:46'!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 

	| ledgerEntry |
	ledgerEntry := aLedger at: anIndex.
	
	! !
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:54:42' prior: 50786075!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 
	| ledgerEntry |
	
	ledgerEntry := aLedger at: anIndex.

	self assert: (ledgerEntry at: 1) equals: anItem.
	self assert: (ledgerEntry at: 2) equals: anAmount 
	! !
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:54:43' prior: 50786082!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 
	| ledgerEntry |
	
	ledgerEntry := aLedger at: anIndex.

	self assert: (ledgerEntry at: 1) equals: anItem.
	self assert: (ledgerEntry at: 2) equals: anAmount.
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:55:40' prior: 50786047!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore of: 2.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assertOn: aCashier ledger at: 1 wasSold: self itemSellByTheStore withAmount: 2! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:56:22' prior: 50786102!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assertOn: aCashier ledger at: 1 wasSold: self itemSellByTheStore withAmount: 2! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:09:33' prior: 50785739!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	
	! !
!Cart methodsFor: 'initialization' stamp: 'a s 11/4/2019 21:10:00' prior: 50784844!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'initialization' stamp: 'a s 11/4/2019 21:13:47' prior: 50786141!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 21:18:21'!
uniqueItemsDo: aBlock
	items asSet do: aBlock! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:20:00' prior: 50786130!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	
	aCart  uniqueItemsDo: [:item | | occurrencesOfItem |
		occurrencesOfItem := aCart occurrencesOf: item.
		ledger add: (Array with: item with: occurrencesOfItem)
	]! !
!Cashier methodsFor: 'nil' stamp: 'a s 11/4/2019 21:20:31'!
recordSalesOnLedgerFor: aCart! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:20:41' prior: 50786172!
recordSalesOnLedgerFor: aCart

	aCart  uniqueItemsDo: [:item | | occurrencesOfItem |
		occurrencesOfItem := aCart occurrencesOf: item.
		ledger add: (Array with: item with: occurrencesOfItem)
	]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:20:51' prior: 50786157!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	self recordSalesOnLedgerFor: aCart ! !

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:25'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:25'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:23' prior: 50785043!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:11:16' prior: 50785887!
createCashier
	
	^Cashier newOn: self date registeringOn: OrderedCollection new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:03:35' prior: 50785683!
date
	^FixedGregorianDate yearNumber: 2019 month: February dayNumber: 20 ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:43:22' prior: 50785970!
defaultCatalog
	
	| catalog |
	
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self priceOfItemSellByTheStore.
	
	^catalog! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:21' prior: 50785946!
expiredCreditCard
	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2018 month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:42' prior: 50785053!
itemNotSellByTheStore
	
	^'invalidBook'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:47:02' prior: 50785057!
itemSellByTheStore
	
	^ 'validBook'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:41:46' prior: 50785958!
priceOfItemSellByTheStore
	
	^200 * peso! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:15' prior: 50785938!
validCreditCard

	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2019 month: December).! !

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:25'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:25'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:08' prior: 50784935!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50784913!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50784940!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50784900!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50784955!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50784968!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50784948!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50784926!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:23' prior: 50786009!
test09EmptyCartHasAPriceOf0

	| cart |
	
	cart := self createCart.
	
	self assert: cart price equals: 0! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:48:16' prior: 50786030!
test10CartPriceIsTheSumOfTheItemsPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore ! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:25'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:25'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:54:43' prior: 50786092!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 
	| ledgerEntry |
	
	ledgerEntry := aLedger at: anIndex.

	self assert: (ledgerEntry at: 1) equals: anItem.
	self assert: (ledgerEntry at: 2) equals: anAmount.
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:47' prior: 50785846!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := self createCashier.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: cashier ledger isEmpty 
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:56:22' prior: 50786116!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assertOn: aCashier ledger at: 1 wasSold: self itemSellByTheStore withAmount: 2! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:25' prior: 50785829!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:25'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:25'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:46' prior: 50785698!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:56' prior: 50785707!
test02CreditCardIsNotExpiredIfItHasNotReachedExpiration
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:33:38' prior: 50785906!
test03CreditCardIsNotValidIfNameContainsNumbers

	self should: [CreditCard withNumber: 123 name: '123' expiration: self date monthOfYear ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: CreditCard invalidNameErrorDescription
			]! !

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50784826!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50784821!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!Cart methodsFor: 'assertions' stamp: 'a s 11/4/2019 20:43:50' prior: 50785978!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50784837!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'a s 11/4/2019 21:13:47' prior: 50786147!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50784850!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:48:54' prior: 50786039!
price
	^items sum: [:item | self priceOf: item] ifEmpty: [0] ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:49:17' prior: 50786043!
priceOf: anItem
	^catalog at: anItem ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 21:18:21' prior: 50786152!
uniqueItemsDo: aBlock
	items asSet do: aBlock! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50784854!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50784858!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50784870!
add: anItem

	^ self add: 1 of: anItem ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50784862!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48' prior: 50784882!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout' stamp: 'a s 11/4/2019 21:20:51' prior: 50786186!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	self recordSalesOnLedgerFor: aCart ! !
!Cashier methodsFor: 'initialization' stamp: 'a s 11/4/2019 20:10:36' prior: 50785868!
initializeOn: aDate registeringOn: aLedger
	date := aDate.
	ledger := aLedger 
	
	! !
!Cashier methodsFor: 'private' stamp: 'a s 11/4/2019 21:20:41' prior: 50786176!
recordSalesOnLedgerFor: aCart

	aCart  uniqueItemsDo: [:item | | occurrencesOfItem |
		occurrencesOfItem := aCart occurrencesOf: item.
		ledger add: (Array with: item with: occurrencesOfItem)
	]! !
!Cashier methodsFor: 'accessing' stamp: 'a s 11/4/2019 20:10:54' prior: 50785878!
ledger 
	^ledger copy
	
	! !

!classDefinition: 'Cashier class' category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
Cashier class
	instanceVariableNames: ''!

!classDefinition: 'Cashier class' category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
Cashier class
	instanceVariableNames: ''!
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 18:51:16' prior: 50785139!
cantCheckoutEmptyCartErrorDescription
	^'cant checkout empty cart'! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 19:35:33' prior: 50785437!
expiredCreditCardErrorDescription
	^'credit card is expired'! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:10:18' prior: 50785862!
newOn: aDate registeringOn: aLedger
	^self new initializeOn: aDate registeringOn: aLedger.! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:41:02' prior: 50785552!
initializeWithNumber: aNumber name: aName expiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 20:01:45' prior: 50785668!
isExpiredFrom: aDate
	^expiration < (aDate monthOfYear) ! !

!classDefinition: 'CreditCard class' category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
CreditCard class
	instanceVariableNames: ''!

!classDefinition: 'CreditCard class' category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
CreditCard class
	instanceVariableNames: ''!
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:35:52' prior: 50785928!
withNumber: aNumber name: aName expiration: anExpiration 
	(self validName: aName) ifFalse: [self error: self invalidNameErrorDescription ].
	
	^self new initializeWithNumber: aNumber name: aName expiration: anExpiration ! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 20:34:00' prior: 50785918!
invalidNameErrorDescription
	^'invalid name'! !
!CreditCard class methodsFor: 'validating' stamp: 'a s 11/4/2019 20:35:18' prior: 50785922!
validName: aName
	^aName allSatisfy: [:aChar | aChar isLetter].! !

!classDefinition: #MerchantProcessorClient category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
Object subclass: #MerchantProcessorClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorClient category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
Object subclass: #MerchantProcessorClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorClient methodsFor: 'debit' stamp: 'ss 11/6/2019 17:24:07'!
debitAnAmoutnOf: anAmount to: aCreditCard
	self subclassResponsibility! !

!classDefinition: #MockMerchantProcessor category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
MerchantProcessorClient subclass: #MockMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MockMerchantProcessor category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
MerchantProcessorClient subclass: #MockMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:26:03'!
debitAnAmoutnOf: anAmount to: aCreditCard
! !

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date merchantProcesorClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date merchantProcesorClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier class methodsFor: 'instance creation' stamp: 'ss 11/6/2019 17:27:18'!
newOn: aDate registeringOn: aLedger withMerchantProcesorClient: aClient
	^self new initializeOn: aDate registeringOn: aLedger withMerchantProcesorClient: aClient.! !

!methodRemoval: Cashier class #newOn:registeringOn: stamp: 'ss 11/6/2019 18:18:26'!
newOn: aDate registeringOn: aLedger
	^self new initializeOn: aDate registeringOn: aLedger.!
!Cashier methodsFor: 'initialization' stamp: 'ss 11/6/2019 17:27:55'!
initializeOn: aDate registeringOn: aLedger withMerchantProcesorClient: aClient
	date := aDate.
	ledger := aLedger.
	merchantProcesorClient := aClient
	
	! !

!methodRemoval: Cashier #initializeOn:registeringOn: stamp: 'ss 11/6/2019 18:18:26'!
initializeOn: aDate registeringOn: aLedger
	date := aDate.
	ledger := aLedger 
	
	!
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:28:31' prior: 50786217!
createCashier
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: MockMerchantProcessor new.! !

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'nil' stamp: 'ss 11/6/2019 17:30:34'!
setUp
	merchantProcessor := MockMerchantProcessor new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:30:53' prior: 50786792!
createCashier
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: merchantProcessor.! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:31:44' prior: 50786425!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: TusLibrosTest #setUp stamp: 'ss 11/6/2019 18:18:26'!
setUp
	merchantProcessor := MockMerchantProcessor new.!
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:32:33' prior: 50786819!
createCashier
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: MockMerchantProcessor new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:32:50'!
createCashierWithMerchantProcessorClient: aClient
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: MockMerchantProcessor new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:32:54' prior: 50786868!
createCashierWithMerchantProcessorClient: aClient
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: aClient .! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:33:11' prior: 50786861!
createCashier
	
	^self createCashierWithMerchantProcessorClient: MockMerchantProcessor new.! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:35:52'!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:36:16' prior: 50786891!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:36:46' prior: 50786903!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor creditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	creditCard := self validCreditCard.
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:37:57' prior: 50786917!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCashier checkoutCart: aCart withCreditCard: aCreditCard 
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:39:12' prior: 50786932!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCashier checkoutCart: aCart withCreditCard: aCreditCard.
	
	self assert: (mockMerchantProcessor hasCharged: (aCart price) to: aCreditCard).
	
	
	
	! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:40:07'!
hasCharged: aSimpleMeasure to: aCreditCard 
	self shouldBeImplemented.! !

!classDefinition: #MockMerchantProcessor category: #TusLibros stamp: 'ss 11/6/2019 18:18:26'!
MerchantProcessorClient subclass: #MockMerchantProcessor
	instanceVariableNames: 'chargesPerCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:42:18' prior: 50786969!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard) includes: anAmount.! !
!MockMerchantProcessor methodsFor: 'nil' stamp: 'ss 11/6/2019 17:42:53'!
initialize
	chargesPerCreditCard := Dictionary new.! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:44:50' prior: 50786747!
debitAnAmoutnOf: anAmount to: aCreditCard
	(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new])
		add: anAmount! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:45:14' prior: 50786983!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number) includes: anAmount.! !
!CreditCard methodsFor: 'accessing' stamp: 'ss 11/6/2019 17:46:02'!
number
	^number! !
!CreditCard methodsFor: 'accessing' stamp: 'ss 11/6/2019 17:46:09' prior: 50787008!
number
	^number copy! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:47:25' prior: 50787002!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new]) includes: anAmount.! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:47:29' prior: 50787016!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new]) 
		includes: anAmount.! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:47:49' prior: 50786994!
debitAnAmoutnOf: anAmount to: aCreditCard
	(chargesPerCreditCard at: aCreditCard number ifAbsent: [OrderedCollection new])
		add: anAmount! !
!Cashier methodsFor: 'checkout' stamp: 'ss 11/6/2019 17:48:18' prior: 50786597!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	self recordSalesOnLedgerFor: aCart.
	merchantProcesorClient debitAnAmoutnOf: aCart price to: aCreditCard.
	! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:49:58' prior: 50787032!
debitAnAmoutnOf: anAmount to: aCreditCard
	(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new])
		add: anAmount! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:50:03' prior: 50787024!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number ifAbsent: [OrderedCollection new]) 
		includes: anAmount.! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:03' prior: 50786395!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	

	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty 
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:09' prior: 50787069!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty 
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:46' prior: 50787089!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (emptyCart price) to: self validCreditCard ).
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:48' prior: 50787109!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (emptyCart price) to: self validCreditCard).
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:55:08' prior: 50786826!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:55:26' prior: 50787155!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:57:44'!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	aCashier checkoutCart: aCart withCreditCard: aCreditCard.
	
	self assert: (mockMerchantProcessor hasCharged: (aCart price) to: aCreditCard).
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:57:59' prior: 50787200!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:58:42' prior: 50787221!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:59:12' prior: 50787249!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:00:53' prior: 50787277!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' 
		expiration: (GregorianMonthOfYear yearNumber: 2020 month: January).
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 18:01:50' prior: 50787053!
debitAnAmoutnOf: anAmount to: aCreditCard
	self assertNameLengthFor: aCreditCard.

	(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new])
		add: anAmount! !
!MockMerchantProcessor methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:02:13'!
assertNameLengthFor: aCreditCard 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'accessing' stamp: 'ss 11/6/2019 18:03:05'!
name
	^name! !
!MockMerchantProcessor methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:03:26' prior: 50787346!
assertNameLengthFor: aCreditCard 
	aCreditCard name size > 30 ifTrue: [self error: self class creditCardNameTooLongErrorDescription]! !
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:03:45'!
creditCardNameTooLongErrorDescription
	self shouldBeImplemented.! !
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:04:02' prior: 50787363!
creditCardNameTooLongErrorDescription
	^'credit card name cant be larger than 30 characters'! !
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:04:07' prior: 50787369!
creditCardNameTooLongErrorDescription
	^'credit card name cant be longer than 30 characters'! !
!Cashier methodsFor: 'checkout' stamp: 'ss 11/6/2019 18:04:51' prior: 50787039!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	merchantProcesorClient debitAnAmoutnOf: aCart price to: aCreditCard.
	self recordSalesOnLedgerFor: aCart.
	! !
!MerchantProcessorClient methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:08:11'!
assertNameLengthFor: aCreditCard 
	aCreditCard name size > 30 ifTrue: [self error: self class creditCardNameTooLongErrorDescription]! !

!methodRemoval: MockMerchantProcessor #assertNameLengthFor: stamp: 'ss 11/6/2019 18:18:26'!
assertNameLengthFor: aCreditCard 
	aCreditCard name size > 30 ifTrue: [self error: self class creditCardNameTooLongErrorDescription]!
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:09:55'!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard .
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:09:57' prior: 50787410!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:12:39' prior: 50787437!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: (10^15 / self priceOfItemSellByTheStore) + 1 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:13:46' prior: 50787464!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: (10^15 / self priceOfItemSellByTheStore) truncated + 2 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionAmountTooBig.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:16:02' prior: 50787492!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: (10^15 / self priceOfItemSellByTheStore amount) truncated + 2 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionAmountTooBig.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:19:15' prior: 50787520!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: 10^15 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionAmountTooBig.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !

----STARTUP---- (6 November 2019 18:20:01) as /Users/ssujarchuk/Downloads/macos64/CuisUniversity-3938.image!


!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/6/2019 18:20:04'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/6/2019 18:20:04'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidItem: anItem

	(catalog includes: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 17:48'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45'!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51'!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44'!
add: anItem

	^ self add: 1 of: anItem ! !

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/6/2019 18:20:04'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/6/2019 18:20:04'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:04'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:04'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:08'!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:44'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:48'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
itemSellByTheStore
	
	^ 'validBook'! !

!classRemoval: #Cart stamp: 'ss 11/6/2019 18:20:04'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'ss 11/6/2019 18:20:05'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidItem: anItem

	(catalog includes: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 17:48'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45'!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51'!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44'!
add: anItem

	^ self add: 1 of: anItem ! !

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:08'!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:44'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:48'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
itemSellByTheStore
	
	^ 'validBook'! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:44:21'!
test01CantCheckoutEmptyCart

	self assert: false.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:44:53' prior: 50787976!
test01CantCheckoutEmptyCart

	self assert: false.! !

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:23'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:33'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:42'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:47:02'!
itemSellByTheStore
	
	^ 'validBook'! !

!methodRemoval: CartTest #createCart stamp: 'ss 11/6/2019 18:20:05'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CartTest #defaultCatalog stamp: 'ss 11/6/2019 18:20:05'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'ss 11/6/2019 18:20:05'!
itemNotSellByTheStore
	
	^'invalidBook'!

!methodRemoval: CartTest #itemSellByTheStore stamp: 'ss 11/6/2019 18:20:05'!
itemSellByTheStore
	
	^ 'validBook'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:49:57' prior: 50787981!
test01CantCheckoutEmptyCart
	
	| emptyCart |
	emptyCart := self createCart. 

	self should: [Cashier checkoutCart: emptyCart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
			]! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:50:21'!
checkoutCart: aCart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCheckoutCart: aCart ! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:50:42' prior: 50788078!
checkoutCart: aCart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	"^self new initializeCheckoutCart: aCart" ! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:50:47' prior: 50788087!
checkoutCart: aCart 
	self shouldBeImplemented.
	"^self new initializeCheckoutCart: aCart" ! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 18:51:04'!
cantCheckoutEmptyCartErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 18:51:16' prior: 50788102!
cantCheckoutEmptyCartErrorDescription
	^'cant checkout empty cart'! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:52:04' prior: 50788096!
checkoutCart: aCart

	^self new ! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:52:52' prior: 50788114!
checkoutCart: aCart
	self error: self cantCheckoutEmptyCartErrorDescription ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:56:51' prior: 50788066!
test01CantCheckoutEmptyCart
	
	| emptyCart |
	emptyCart := self createCart. 

	self should: [Cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
			]! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:57:26'!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self cantCheckoutEmptyCartErrorDescription ! !

!methodRemoval: Cashier class #checkoutCart: stamp: 'ss 11/6/2019 18:20:05'!
checkoutCart: aCart
	self error: self cantCheckoutEmptyCartErrorDescription !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:57:51'!
validCreditCard

	^'credit card'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:57:57' prior: 50788149!
validCreditCard

	^'valid credit card'! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:00:03' prior: 50788125!
test01CantCheckoutEmptyCart
	
	| emptyCart |
	emptyCart := self createCart. 

	self should: [Cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:02:59' prior: 50788157!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier new.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!Cashier methodsFor: 'nil' stamp: 'a s 11/4/2019 19:03:44'!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self cantCheckoutEmptyCartErrorDescription ! !

!methodRemoval: Cashier class #checkoutCart:withCreditCard: stamp: 'ss 11/6/2019 18:20:05'!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self cantCheckoutEmptyCartErrorDescription !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:04:08' prior: 50788184!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self class cantCheckoutEmptyCartErrorDescription ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:08:39'!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier new.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:08:45' prior: 50788203!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier new.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:09:43' prior: 50788218!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| cart cashier |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	 
	cashier := Cashier new.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:10:39' prior: 50788225!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:11:45' prior: 50788233!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1
	self assert: (aCashier ledger at: 1) equals: aCart! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:11:50' prior: 50788243!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:12:22' prior: 50788197!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription] 
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:12:30' prior: 50788271!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	
	
	! !

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:12:46' prior: 50788279!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	
	ledger add: aCart
	
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:13:02'!
initialize

	ledger := OrderedCollection new.
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:13:12'!
ledger 
	ledger
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:13:28' prior: 50788306!
ledger 
	^ledger copy
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:24:52'!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:25:09'!
expiredCreditCard
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:31:50' prior: 50788331!
expiredCreditCard
	^CreditCard withNumber: '1231231' name: 'hola' withExpiration: (GregorianMonthOfYear year: 2019 month: December)! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 19:32:08'!
withNumber: aString name: aString2 withExpiration: aGregorianMonthOfYear 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aString name: aString2 withExpiration: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 19:33:14' prior: 50788350!
withNumber: aNumber name: aName withExpiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName withExpiration: anExpiration ! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
Object subclass: #CreditCard
	instanceVariableNames: 'number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:33:33'!
initializeWithNumber: aNumber name: aName withExpiration: anExpiration 
	self shouldBeImplemented.
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:33:42' prior: 50788390!
initializeWithNumber: aNumber name: aName withExpiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 19:35:33'!
expiredCreditCardErrorDescription
	^'credit card is expired'! !

!methodRemoval: CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/6/2019 18:20:05'!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:05'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'nil' stamp: 'a s 11/4/2019 19:38:29'!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	aCreditCard := self expiredCreditCard
	
	self assert: aCreditCard isExpired. ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:38:49' prior: 50788442!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: aCreditCard isExpired. ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:39:09'!
isExpired
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:39:14' prior: 50788457!
isExpired
	^true! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:39:39'!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self assert: aCreditCard isExpired negated . ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:39:40' prior: 50788465!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self assert: aCreditCard isExpired negated. ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:39:49' prior: 50788474!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: aCreditCard isExpired. ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:40:23' prior: 50788343!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		withExpiration: (GregorianMonthOfYear year: 2019 month: December)! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 19:40:43'!
withNumber: aNumber name: aName expiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName withExpiration: anExpiration ! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:40:43' prior: 50788491!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2019 month: December)! !

!methodRemoval: CreditCard class #withNumber:name:withExpiration: stamp: 'ss 11/6/2019 18:20:05'!
withNumber: aNumber name: aName withExpiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName withExpiration: anExpiration !
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:41:02'!
initializeWithNumber: aNumber name: aName expiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:41:02' prior: 50788498!
withNumber: aNumber name: aName expiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName expiration: anExpiration ! !

!methodRemoval: CreditCard #initializeWithNumber:name:withExpiration: stamp: 'ss 11/6/2019 18:20:05'!
initializeWithNumber: aNumber name: aName withExpiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:43:02' prior: 50788153!
validCreditCard

	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2019 month: December).! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:43:11' prior: 50788506!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2018 month: December)! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:44:34' prior: 50788551!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2018 month: December). ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:45:04'!
test02CreditCardIsNotExpiredIfItHasNotReachedExpiration
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: aCreditCard isExpired. ! !

!methodRemoval: CreditCardTest #test02CreditCardIsExpiredIfItReachedExpirationDate stamp: 'ss 11/6/2019 18:20:05'!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: aCreditCard isExpired. !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:45:53' prior: 50788461!
isExpired
	^expiration <= FixedGregorianDate ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:45:58' prior: 50788581!
isExpired
	^expiration <= FixedGregorianDate today! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:46:22' prior: 50788586!
isExpired
	^expiration <= FixedGregorianDate today monthOfYear ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:47:36' prior: 50788591!
isExpired
	^expiration < FixedGregorianDate today monthOfYear ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:51:37' prior: 50788596!
isExpired
	^expiration < (FixedGregorianDate today monthOfYear) ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:25' prior: 50788558!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2018 * year month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:37' prior: 50788606!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: (2018 * year) month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:45' prior: 50788544!
validCreditCard

	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2019 month: December).! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:52' prior: 50788614!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2018 month: December). ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 20:01:45'!
isExpiredFrom: aDate
	^expiration < (aDate monthOfYear) ! !

!methodRemoval: CreditCard #isExpired stamp: 'ss 11/6/2019 18:20:06'!
isExpired
	^expiration < (FixedGregorianDate today monthOfYear) !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:03:30'!
date
	FixedGregorianDate yearNumber: 2019 month: February dayNumber: 20 ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:03:35' prior: 50788646!
date
	^FixedGregorianDate yearNumber: 2019 month: February dayNumber: 20 ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:02' prior: 50788450!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:46' prior: 50788658!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:56' prior: 50788565!
test02CreditCardIsNotExpiredIfItHasNotReachedExpiration
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: (aCreditCard isExpiredFrom: self date). ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:05:08'!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	! !

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:06:19' prior: 50788293!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].
	
	ledger add: aCart
	
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:07:01'!
initializeOn: aDate
	date := aDate.
	ledger := OrderedCollection new.
	
	! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:07:38'!
newOn: aDate
	^self new initializeOn: aDate! !

!methodRemoval: Cashier #initialize stamp: 'ss 11/6/2019 18:20:06'!
initialize

	ledger := OrderedCollection new.
	
	!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:07:53' prior: 50788170!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier newOn: self date.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:08:13'!
createCashier
	
	^Cashier newOn: self date! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:08:29' prior: 50788732!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := self createCashier.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:08:45' prior: 50788257!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:08:55' prior: 50788684!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:25' prior: 50788780!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:47' prior: 50788751!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := self createCashier.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: cashier ledger isEmpty 
	]! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:10:18'!
newOn: aDate registeringOn: aLedger
	^self new initializeOn: aDate registeringOn: aLedger.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:10:36'!
initializeOn: aDate registeringOn: aLedger
	date := aDate.
	ledger := aLedger 
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:10:41' prior: 50788310!
ledger 
	^ledger
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:10:54' prior: 50788843!
ledger 
	^ledger copy
	
	! !

!methodRemoval: Cashier #initializeOn: stamp: 'ss 11/6/2019 18:20:06'!
initializeOn: aDate
	date := aDate.
	ledger := OrderedCollection new.
	
	!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:11:16' prior: 50788746!
createCashier
	
	^Cashier newOn: self date registeringOn: OrderedCollection new.! !

!methodRemoval: Cashier class #newOn: stamp: 'ss 11/6/2019 18:20:06'!
newOn: aDate
	^self new initializeOn: aDate!
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:32:24'!
test03CreditCardIsNotValidIfNameContainsNumbers

	self should: [] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: CreditCard invalidNameErrorDescription
			]! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:33:38' prior: 50788865!
test03CreditCardIsNotValidIfNameContainsNumbers

	self should: [CreditCard withNumber: 123 name: '123' expiration: self date monthOfYear ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: CreditCard invalidNameErrorDescription
			]! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 20:34:00'!
invalidNameErrorDescription
	^'invalid name'! !
!CreditCard class methodsFor: 'validating' stamp: 'a s 11/4/2019 20:35:18'!
validName: aName
	^aName allSatisfy: [:aChar | aChar isLetter].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:35:52' prior: 50788529!
withNumber: aNumber name: aName expiration: anExpiration 
	(self validName: aName) ifFalse: [self error: self invalidNameErrorDescription ].
	
	^self new initializeWithNumber: aNumber name: aName expiration: anExpiration ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:15' prior: 50788622!
validCreditCard

	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2019 month: December).! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:21' prior: 50788630!
expiredCreditCard
	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2018 month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:41:42'!
priceOfItemSellByTheStore
	
	^200 * peso! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:41:46' prior: 50788922!
priceOfItemSellByTheStore
	
	^200 * peso! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:43:11' prior: 50788017!
defaultCatalog
	
	| catalog |
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self priceOfItemSellByTheStore! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:43:22' prior: 50788932!
defaultCatalog
	
	| catalog |
	
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self priceOfItemSellByTheStore.
	
	^catalog! !
!Cart methodsFor: 'assertions' stamp: 'a s 11/4/2019 20:43:50' prior: 50787800!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:45:28'!
test09CartKnowsItsTotalPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:45:44'!
price
	self shouldBeImplemented.! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:47:02' prior: 50788962!
price
	^0! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:17'!
test09EmptyCartHasAPriceOf0

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore.! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:23' prior: 50788969!
test09EmptyCartHasAPriceOf0

	| cart |
	
	cart := self createCart.
	
	self assert: cart price equals: 0! !

!methodRemoval: CartTest #test09CartKnowsItsTotalPrice stamp: 'ss 11/6/2019 18:20:06'!
test09CartKnowsItsTotalPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore.!
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:53'!
test10CartPriceIsTheSumOfTheItemsPrice

	| cart |
	
	cart := self createCart.
	
	self assert: cart price equals: 0! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:48:16' prior: 50788992!
test10CartPriceIsTheSumOfTheItemsPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:48:54' prior: 50788966!
price
	^items sum: [:item | self priceOf: item] ifEmpty: [0] ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:49:17'!
priceOf: anItem
	^catalog at: anItem ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:50:18'!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.! !

!methodRemoval: CashierTest #test02CheckoutCartWithOneItemSavesCartInLedger stamp: 'ss 11/6/2019 18:20:06'!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.!
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:53:46'!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 

	| ledgerEntry |
	ledgerEntry := aLedger at: anIndex.
	
	! !
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:54:42' prior: 50789044!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 
	| ledgerEntry |
	
	ledgerEntry := aLedger at: anIndex.

	self assert: (ledgerEntry at: 1) equals: anItem.
	self assert: (ledgerEntry at: 2) equals: anAmount 
	! !
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:54:43' prior: 50789051!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 
	| ledgerEntry |
	
	ledgerEntry := aLedger at: anIndex.

	self assert: (ledgerEntry at: 1) equals: anItem.
	self assert: (ledgerEntry at: 2) equals: anAmount.
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:55:40' prior: 50789016!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore of: 2.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assertOn: aCashier ledger at: 1 wasSold: self itemSellByTheStore withAmount: 2! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:56:22' prior: 50789071!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assertOn: aCashier ledger at: 1 wasSold: self itemSellByTheStore withAmount: 2! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:09:33' prior: 50788708!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	
	! !
!Cart methodsFor: 'initialization' stamp: 'a s 11/4/2019 21:10:00' prior: 50787813!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'initialization' stamp: 'a s 11/4/2019 21:13:47' prior: 50789110!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 21:18:21'!
uniqueItemsDo: aBlock
	items asSet do: aBlock! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:20:00' prior: 50789099!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	
	aCart  uniqueItemsDo: [:item | | occurrencesOfItem |
		occurrencesOfItem := aCart occurrencesOf: item.
		ledger add: (Array with: item with: occurrencesOfItem)
	]! !
!Cashier methodsFor: 'nil' stamp: 'a s 11/4/2019 21:20:31'!
recordSalesOnLedgerFor: aCart! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:20:41' prior: 50789141!
recordSalesOnLedgerFor: aCart

	aCart  uniqueItemsDo: [:item | | occurrencesOfItem |
		occurrencesOfItem := aCart occurrencesOf: item.
		ledger add: (Array with: item with: occurrencesOfItem)
	]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:20:51' prior: 50789126!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	self recordSalesOnLedgerFor: aCart ! !

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:23' prior: 50788012!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:11:16' prior: 50788856!
createCashier
	
	^Cashier newOn: self date registeringOn: OrderedCollection new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:03:35' prior: 50788652!
date
	^FixedGregorianDate yearNumber: 2019 month: February dayNumber: 20 ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:43:22' prior: 50788939!
defaultCatalog
	
	| catalog |
	
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self priceOfItemSellByTheStore.
	
	^catalog! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:21' prior: 50788915!
expiredCreditCard
	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2018 month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:42' prior: 50788022!
itemNotSellByTheStore
	
	^'invalidBook'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:47:02' prior: 50788026!
itemSellByTheStore
	
	^ 'validBook'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:41:46' prior: 50788927!
priceOfItemSellByTheStore
	
	^200 * peso! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:15' prior: 50788907!
validCreditCard

	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2019 month: December).! !

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:08' prior: 50787904!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50787882!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50787909!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50787869!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50787924!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50787937!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50787917!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50787895!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:23' prior: 50788978!
test09EmptyCartHasAPriceOf0

	| cart |
	
	cart := self createCart.
	
	self assert: cart price equals: 0! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:48:16' prior: 50788999!
test10CartPriceIsTheSumOfTheItemsPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore ! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:54:43' prior: 50789061!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 
	| ledgerEntry |
	
	ledgerEntry := aLedger at: anIndex.

	self assert: (ledgerEntry at: 1) equals: anItem.
	self assert: (ledgerEntry at: 2) equals: anAmount.
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:47' prior: 50788815!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := self createCashier.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: cashier ledger isEmpty 
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:56:22' prior: 50789085!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assertOn: aCashier ledger at: 1 wasSold: self itemSellByTheStore withAmount: 2! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:25' prior: 50788798!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:46' prior: 50788667!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:56' prior: 50788676!
test02CreditCardIsNotExpiredIfItHasNotReachedExpiration
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:33:38' prior: 50788875!
test03CreditCardIsNotValidIfNameContainsNumbers

	self should: [CreditCard withNumber: 123 name: '123' expiration: self date monthOfYear ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: CreditCard invalidNameErrorDescription
			]! !

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50787795!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50787790!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!Cart methodsFor: 'assertions' stamp: 'a s 11/4/2019 20:43:50' prior: 50788947!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50787806!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'a s 11/4/2019 21:13:47' prior: 50789116!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50787819!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:48:54' prior: 50789008!
price
	^items sum: [:item | self priceOf: item] ifEmpty: [0] ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:49:17' prior: 50789012!
priceOf: anItem
	^catalog at: anItem ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 21:18:21' prior: 50789121!
uniqueItemsDo: aBlock
	items asSet do: aBlock! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50787823!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50787827!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50787839!
add: anItem

	^ self add: 1 of: anItem ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50787831!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48' prior: 50787851!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout' stamp: 'a s 11/4/2019 21:20:51' prior: 50789155!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	self recordSalesOnLedgerFor: aCart ! !
!Cashier methodsFor: 'initialization' stamp: 'a s 11/4/2019 20:10:36' prior: 50788837!
initializeOn: aDate registeringOn: aLedger
	date := aDate.
	ledger := aLedger 
	
	! !
!Cashier methodsFor: 'private' stamp: 'a s 11/4/2019 21:20:41' prior: 50789145!
recordSalesOnLedgerFor: aCart

	aCart  uniqueItemsDo: [:item | | occurrencesOfItem |
		occurrencesOfItem := aCart occurrencesOf: item.
		ledger add: (Array with: item with: occurrencesOfItem)
	]! !
!Cashier methodsFor: 'accessing' stamp: 'a s 11/4/2019 20:10:54' prior: 50788847!
ledger 
	^ledger copy
	
	! !

!classDefinition: 'Cashier class' category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
Cashier class
	instanceVariableNames: ''!

!classDefinition: 'Cashier class' category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
Cashier class
	instanceVariableNames: ''!
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 18:51:16' prior: 50788108!
cantCheckoutEmptyCartErrorDescription
	^'cant checkout empty cart'! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 19:35:33' prior: 50788406!
expiredCreditCardErrorDescription
	^'credit card is expired'! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:10:18' prior: 50788831!
newOn: aDate registeringOn: aLedger
	^self new initializeOn: aDate registeringOn: aLedger.! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:41:02' prior: 50788521!
initializeWithNumber: aNumber name: aName expiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 20:01:45' prior: 50788637!
isExpiredFrom: aDate
	^expiration < (aDate monthOfYear) ! !

!classDefinition: 'CreditCard class' category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
CreditCard class
	instanceVariableNames: ''!

!classDefinition: 'CreditCard class' category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
CreditCard class
	instanceVariableNames: ''!
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:35:52' prior: 50788897!
withNumber: aNumber name: aName expiration: anExpiration 
	(self validName: aName) ifFalse: [self error: self invalidNameErrorDescription ].
	
	^self new initializeWithNumber: aNumber name: aName expiration: anExpiration ! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 20:34:00' prior: 50788887!
invalidNameErrorDescription
	^'invalid name'! !
!CreditCard class methodsFor: 'validating' stamp: 'a s 11/4/2019 20:35:18' prior: 50788891!
validName: aName
	^aName allSatisfy: [:aChar | aChar isLetter].! !

!classDefinition: #MerchantProcessorClient category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
Object subclass: #MerchantProcessorClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorClient category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
Object subclass: #MerchantProcessorClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorClient methodsFor: 'debit' stamp: 'ss 11/6/2019 17:24:07'!
debitAnAmoutnOf: anAmount to: aCreditCard
	self subclassResponsibility! !

!classDefinition: #MockMerchantProcessor category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
MerchantProcessorClient subclass: #MockMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MockMerchantProcessor category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
MerchantProcessorClient subclass: #MockMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:26:03'!
debitAnAmoutnOf: anAmount to: aCreditCard
! !

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date merchantProcesorClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date merchantProcesorClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier class methodsFor: 'instance creation' stamp: 'ss 11/6/2019 17:27:18'!
newOn: aDate registeringOn: aLedger withMerchantProcesorClient: aClient
	^self new initializeOn: aDate registeringOn: aLedger withMerchantProcesorClient: aClient.! !

!methodRemoval: Cashier class #newOn:registeringOn: stamp: 'ss 11/6/2019 18:20:06'!
newOn: aDate registeringOn: aLedger
	^self new initializeOn: aDate registeringOn: aLedger.!
!Cashier methodsFor: 'initialization' stamp: 'ss 11/6/2019 17:27:55'!
initializeOn: aDate registeringOn: aLedger withMerchantProcesorClient: aClient
	date := aDate.
	ledger := aLedger.
	merchantProcesorClient := aClient
	
	! !

!methodRemoval: Cashier #initializeOn:registeringOn: stamp: 'ss 11/6/2019 18:20:06'!
initializeOn: aDate registeringOn: aLedger
	date := aDate.
	ledger := aLedger 
	
	!
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:28:31' prior: 50789186!
createCashier
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: MockMerchantProcessor new.! !

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'nil' stamp: 'ss 11/6/2019 17:30:34'!
setUp
	merchantProcessor := MockMerchantProcessor new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:30:53' prior: 50789761!
createCashier
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: merchantProcessor.! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:31:44' prior: 50789394!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: TusLibrosTest #setUp stamp: 'ss 11/6/2019 18:20:06'!
setUp
	merchantProcessor := MockMerchantProcessor new.!
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:32:33' prior: 50789788!
createCashier
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: MockMerchantProcessor new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:32:50'!
createCashierWithMerchantProcessorClient: aClient
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: MockMerchantProcessor new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:32:54' prior: 50789837!
createCashierWithMerchantProcessorClient: aClient
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: aClient .! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:33:11' prior: 50789830!
createCashier
	
	^self createCashierWithMerchantProcessorClient: MockMerchantProcessor new.! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:35:52'!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:36:16' prior: 50789860!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:36:46' prior: 50789872!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor creditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	creditCard := self validCreditCard.
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:37:57' prior: 50789886!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCashier checkoutCart: aCart withCreditCard: aCreditCard 
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:39:12' prior: 50789901!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCashier checkoutCart: aCart withCreditCard: aCreditCard.
	
	self assert: (mockMerchantProcessor hasCharged: (aCart price) to: aCreditCard).
	
	
	
	! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:40:07'!
hasCharged: aSimpleMeasure to: aCreditCard 
	self shouldBeImplemented.! !

!classDefinition: #MockMerchantProcessor category: #TusLibros stamp: 'ss 11/6/2019 18:20:06'!
MerchantProcessorClient subclass: #MockMerchantProcessor
	instanceVariableNames: 'chargesPerCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:42:18' prior: 50789938!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard) includes: anAmount.! !
!MockMerchantProcessor methodsFor: 'nil' stamp: 'ss 11/6/2019 17:42:53'!
initialize
	chargesPerCreditCard := Dictionary new.! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:44:50' prior: 50789716!
debitAnAmoutnOf: anAmount to: aCreditCard
	(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new])
		add: anAmount! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:45:14' prior: 50789952!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number) includes: anAmount.! !
!CreditCard methodsFor: 'accessing' stamp: 'ss 11/6/2019 17:46:02'!
number
	^number! !
!CreditCard methodsFor: 'accessing' stamp: 'ss 11/6/2019 17:46:09' prior: 50789977!
number
	^number copy! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:47:25' prior: 50789971!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new]) includes: anAmount.! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:47:29' prior: 50789985!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new]) 
		includes: anAmount.! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:47:49' prior: 50789963!
debitAnAmoutnOf: anAmount to: aCreditCard
	(chargesPerCreditCard at: aCreditCard number ifAbsent: [OrderedCollection new])
		add: anAmount! !
!Cashier methodsFor: 'checkout' stamp: 'ss 11/6/2019 17:48:18' prior: 50789566!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	self recordSalesOnLedgerFor: aCart.
	merchantProcesorClient debitAnAmoutnOf: aCart price to: aCreditCard.
	! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:49:58' prior: 50790001!
debitAnAmoutnOf: anAmount to: aCreditCard
	(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new])
		add: anAmount! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:50:03' prior: 50789993!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number ifAbsent: [OrderedCollection new]) 
		includes: anAmount.! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:03' prior: 50789364!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	

	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty 
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:09' prior: 50790038!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty 
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:46' prior: 50790058!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (emptyCart price) to: self validCreditCard ).
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:48' prior: 50790078!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (emptyCart price) to: self validCreditCard).
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:55:08' prior: 50789795!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:55:26' prior: 50790124!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:57:44'!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	aCashier checkoutCart: aCart withCreditCard: aCreditCard.
	
	self assert: (mockMerchantProcessor hasCharged: (aCart price) to: aCreditCard).
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:57:59' prior: 50790169!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:58:42' prior: 50790190!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:59:12' prior: 50790218!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:00:53' prior: 50790246!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' 
		expiration: (GregorianMonthOfYear yearNumber: 2020 month: January).
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 18:01:50' prior: 50790022!
debitAnAmoutnOf: anAmount to: aCreditCard
	self assertNameLengthFor: aCreditCard.

	(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new])
		add: anAmount! !
!MockMerchantProcessor methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:02:13'!
assertNameLengthFor: aCreditCard 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'accessing' stamp: 'ss 11/6/2019 18:03:05'!
name
	^name! !
!MockMerchantProcessor methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:03:26' prior: 50790315!
assertNameLengthFor: aCreditCard 
	aCreditCard name size > 30 ifTrue: [self error: self class creditCardNameTooLongErrorDescription]! !
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:03:45'!
creditCardNameTooLongErrorDescription
	self shouldBeImplemented.! !
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:04:02' prior: 50790332!
creditCardNameTooLongErrorDescription
	^'credit card name cant be larger than 30 characters'! !
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:04:07' prior: 50790338!
creditCardNameTooLongErrorDescription
	^'credit card name cant be longer than 30 characters'! !
!Cashier methodsFor: 'checkout' stamp: 'ss 11/6/2019 18:04:51' prior: 50790008!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	merchantProcesorClient debitAnAmoutnOf: aCart price to: aCreditCard.
	self recordSalesOnLedgerFor: aCart.
	! !
!MerchantProcessorClient methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:08:11'!
assertNameLengthFor: aCreditCard 
	aCreditCard name size > 30 ifTrue: [self error: self class creditCardNameTooLongErrorDescription]! !

!methodRemoval: MockMerchantProcessor #assertNameLengthFor: stamp: 'ss 11/6/2019 18:20:07'!
assertNameLengthFor: aCreditCard 
	aCreditCard name size > 30 ifTrue: [self error: self class creditCardNameTooLongErrorDescription]!
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:09:55'!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard .
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:09:57' prior: 50790379!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:12:39' prior: 50790406!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: (10^15 / self priceOfItemSellByTheStore) + 1 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:13:46' prior: 50790433!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: (10^15 / self priceOfItemSellByTheStore) truncated + 2 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionAmountTooBig.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:16:02' prior: 50790461!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: (10^15 / self priceOfItemSellByTheStore amount) truncated + 2 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionAmountTooBig.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/6/2019 18:20:07'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/6/2019 18:20:07'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50789474!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50789469!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50789479!
assertIsValidItem: anItem

	(catalog includes: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50789486!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 17:48' prior: 50789493!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50789499!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50789518!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50789523!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50789531!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50789527!
add: anItem

	^ self add: 1 of: anItem ! !

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/6/2019 18:20:07'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/6/2019 18:20:07'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48' prior: 50789547!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:07'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:07'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50789275!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50789254!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50789316!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:08' prior: 50789249!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50789267!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50789309!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50789288!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50789301!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:44'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:48'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
itemSellByTheStore
	
	^ 'validBook'! !

!classRemoval: #Cart stamp: 'ss 11/6/2019 18:20:07'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'ss 11/6/2019 18:20:07'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/6/2019 18:20:07'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/6/2019 18:20:07'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidItem: anItem

	(catalog includes: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 17:48'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45'!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51'!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44'!
add: anItem

	^ self add: 1 of: anItem ! !

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/6/2019 18:20:07'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/6/2019 18:20:07'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:07'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:07'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:08'!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:44'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:48'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
itemSellByTheStore
	
	^ 'validBook'! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:07'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:07'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:44:21' prior: 50790101!
test01CantCheckoutEmptyCart

	self assert: false.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:44:53' prior: 50790921!
test01CantCheckoutEmptyCart

	self assert: false.! !

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:07'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:07'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:07'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:07'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:23' prior: 50789181!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:33' prior: 50789198!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:42' prior: 50789214!
itemNotSellByTheStore
	
	^'invalidBook'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:47:02' prior: 50789219!
itemSellByTheStore
	
	^ 'validBook'! !

!methodRemoval: CartTest #createCart stamp: 'ss 11/6/2019 18:20:07'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CartTest #defaultCatalog stamp: 'ss 11/6/2019 18:20:07'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'ss 11/6/2019 18:20:07'!
itemNotSellByTheStore
	
	^'invalidBook'!

!methodRemoval: CartTest #itemSellByTheStore stamp: 'ss 11/6/2019 18:20:07'!
itemSellByTheStore
	
	^ 'validBook'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:08'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:08'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:20:08'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:49:57' prior: 50790926!
test01CantCheckoutEmptyCart
	
	| emptyCart |
	emptyCart := self createCart. 

	self should: [Cashier checkoutCart: emptyCart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
			]! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:50:21'!
checkoutCart: aCart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCheckoutCart: aCart ! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:50:42' prior: 50791025!
checkoutCart: aCart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	"^self new initializeCheckoutCart: aCart" ! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:50:47' prior: 50791034!
checkoutCart: aCart 
	self shouldBeImplemented.
	"^self new initializeCheckoutCart: aCart" ! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 18:51:04' prior: 50789606!
cantCheckoutEmptyCartErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 18:51:16' prior: 50791049!
cantCheckoutEmptyCartErrorDescription
	^'cant checkout empty cart'! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:52:04' prior: 50791043!
checkoutCart: aCart

	^self new ! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:52:52' prior: 50791061!
checkoutCart: aCart
	self error: self cantCheckoutEmptyCartErrorDescription ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:56:51' prior: 50791013!
test01CantCheckoutEmptyCart
	
	| emptyCart |
	emptyCart := self createCart. 

	self should: [Cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
			]! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:57:26'!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self cantCheckoutEmptyCartErrorDescription ! !

!methodRemoval: Cashier class #checkoutCart: stamp: 'ss 11/6/2019 18:20:08'!
checkoutCart: aCart
	self error: self cantCheckoutEmptyCartErrorDescription !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:57:51' prior: 50789228!
validCreditCard

	^'credit card'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:57:57' prior: 50791096!
validCreditCard

	^'valid credit card'! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:00:03' prior: 50791072!
test01CantCheckoutEmptyCart
	
	| emptyCart |
	emptyCart := self createCart. 

	self should: [Cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:02:59' prior: 50791104!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier new.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!Cashier methodsFor: 'nil' stamp: 'a s 11/4/2019 19:03:44' prior: 50790351!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self cantCheckoutEmptyCartErrorDescription ! !

!methodRemoval: Cashier class #checkoutCart:withCreditCard: stamp: 'ss 11/6/2019 18:20:08'!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self cantCheckoutEmptyCartErrorDescription !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:04:08' prior: 50791131!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self class cantCheckoutEmptyCartErrorDescription ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:08:39'!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier new.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:08:45' prior: 50791150!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier new.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:09:43' prior: 50791165!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| cart cashier |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	 
	cashier := Cashier new.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:10:39' prior: 50791172!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:11:45' prior: 50791180!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1
	self assert: (aCashier ledger at: 1) equals: aCart! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:11:50' prior: 50791190!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:12:22' prior: 50791144!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription] 
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:12:30' prior: 50791218!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	
	
	! !

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:20:08'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:12:46' prior: 50791226!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	
	ledger add: aCart
	
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:13:02'!
initialize

	ledger := OrderedCollection new.
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:13:12' prior: 50789593!
ledger 
	ledger
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:13:28' prior: 50791253!
ledger 
	^ledger copy
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:24:52' prior: 50790145!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:25:09' prior: 50789206!
expiredCreditCard
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/6/2019 18:20:08'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:31:50' prior: 50791279!
expiredCreditCard
	^CreditCard withNumber: '1231231' name: 'hola' withExpiration: (GregorianMonthOfYear year: 2019 month: December)! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 19:32:08'!
withNumber: aString name: aString2 withExpiration: aGregorianMonthOfYear 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aString name: aString2 withExpiration: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 19:33:14' prior: 50791298!
withNumber: aNumber name: aName withExpiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName withExpiration: anExpiration ! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/6/2019 18:20:08'!
Object subclass: #CreditCard
	instanceVariableNames: 'number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/6/2019 18:20:08'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/6/2019 18:20:08'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:33:33'!
initializeWithNumber: aNumber name: aName withExpiration: anExpiration 
	self shouldBeImplemented.
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:33:42' prior: 50791338!
initializeWithNumber: aNumber name: aName withExpiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 19:35:33' prior: 50789612!
expiredCreditCardErrorDescription
	^'credit card is expired'! !

!methodRemoval: CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/6/2019 18:20:08'!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:08'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:08'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'nil' stamp: 'a s 11/4/2019 19:38:29' prior: 50789425!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	aCreditCard := self expiredCreditCard
	
	self assert: aCreditCard isExpired. ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:38:49' prior: 50791391!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: aCreditCard isExpired. ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:39:09'!
isExpired
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:39:14' prior: 50791406!
isExpired
	^true! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:39:39'!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self assert: aCreditCard isExpired negated . ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:39:40' prior: 50791414!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self assert: aCreditCard isExpired negated. ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:39:49' prior: 50791423!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: aCreditCard isExpired. ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:40:23' prior: 50791291!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		withExpiration: (GregorianMonthOfYear year: 2019 month: December)! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 19:40:43' prior: 50789659!
withNumber: aNumber name: aName expiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName withExpiration: anExpiration ! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:40:43' prior: 50791440!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2019 month: December)! !

!methodRemoval: CreditCard class #withNumber:name:withExpiration: stamp: 'ss 11/6/2019 18:20:08'!
withNumber: aNumber name: aName withExpiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName withExpiration: anExpiration !
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:41:02' prior: 50789638!
initializeWithNumber: aNumber name: aName expiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:41:02' prior: 50791448!
withNumber: aNumber name: aName expiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName expiration: anExpiration ! !

!methodRemoval: CreditCard #initializeWithNumber:name:withExpiration: stamp: 'ss 11/6/2019 18:20:08'!
initializeWithNumber: aNumber name: aName withExpiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:43:02' prior: 50791100!
validCreditCard

	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2019 month: December).! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:43:11' prior: 50791456!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2018 month: December)! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:44:34' prior: 50791501!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2018 month: December). ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:45:04' prior: 50789434!
test02CreditCardIsNotExpiredIfItHasNotReachedExpiration
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: aCreditCard isExpired. ! !

!methodRemoval: CreditCardTest #test02CreditCardIsExpiredIfItReachedExpirationDate stamp: 'ss 11/6/2019 18:20:08'!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: aCreditCard isExpired. !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:45:53' prior: 50791410!
isExpired
	^expiration <= FixedGregorianDate ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:45:58' prior: 50791532!
isExpired
	^expiration <= FixedGregorianDate today! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:46:22' prior: 50791537!
isExpired
	^expiration <= FixedGregorianDate today monthOfYear ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:47:36' prior: 50791542!
isExpired
	^expiration < FixedGregorianDate today monthOfYear ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:51:37' prior: 50791547!
isExpired
	^expiration < (FixedGregorianDate today monthOfYear) ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:25' prior: 50791508!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2018 * year month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:37' prior: 50791557!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: (2018 * year) month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:45' prior: 50791494!
validCreditCard

	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2019 month: December).! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:52' prior: 50791565!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2018 month: December). ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 20:01:45' prior: 50789645!
isExpiredFrom: aDate
	^expiration < (aDate monthOfYear) ! !

!methodRemoval: CreditCard #isExpired stamp: 'ss 11/6/2019 18:20:08'!
isExpired
	^expiration < (FixedGregorianDate today monthOfYear) !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:03:30' prior: 50789192!
date
	FixedGregorianDate yearNumber: 2019 month: February dayNumber: 20 ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:03:35' prior: 50791598!
date
	^FixedGregorianDate yearNumber: 2019 month: February dayNumber: 20 ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:02' prior: 50791399!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:46' prior: 50791610!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:56' prior: 50791516!
test02CreditCardIsNotExpiredIfItHasNotReachedExpiration
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: (aCreditCard isExpiredFrom: self date). ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:05:08'!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	! !

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:20:08'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:06:19' prior: 50791240!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].
	
	ledger add: aCart
	
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:07:01'!
initializeOn: aDate
	date := aDate.
	ledger := OrderedCollection new.
	
	! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:07:38'!
newOn: aDate
	^self new initializeOn: aDate! !

!methodRemoval: Cashier #initialize stamp: 'ss 11/6/2019 18:20:08'!
initialize

	ledger := OrderedCollection new.
	
	!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:07:53' prior: 50791117!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier newOn: self date.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:08:13' prior: 50789854!
createCashier
	
	^Cashier newOn: self date! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:08:29' prior: 50791684!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := self createCashier.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:08:45' prior: 50791204!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:08:55' prior: 50791636!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:25' prior: 50791733!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:47' prior: 50791704!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := self createCashier.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: cashier ledger isEmpty 
	]! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:10:18'!
newOn: aDate registeringOn: aLedger
	^self new initializeOn: aDate registeringOn: aLedger.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:10:36'!
initializeOn: aDate registeringOn: aLedger
	date := aDate.
	ledger := aLedger 
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:10:41' prior: 50791257!
ledger 
	^ledger
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:10:54' prior: 50791796!
ledger 
	^ledger copy
	
	! !

!methodRemoval: Cashier #initializeOn: stamp: 'ss 11/6/2019 18:20:08'!
initializeOn: aDate
	date := aDate.
	ledger := OrderedCollection new.
	
	!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:11:16' prior: 50791699!
createCashier
	
	^Cashier newOn: self date registeringOn: OrderedCollection new.! !

!methodRemoval: Cashier class #newOn: stamp: 'ss 11/6/2019 18:20:08'!
newOn: aDate
	^self new initializeOn: aDate!
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:32:24' prior: 50789443!
test03CreditCardIsNotValidIfNameContainsNumbers

	self should: [] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: CreditCard invalidNameErrorDescription
			]! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:33:38' prior: 50791818!
test03CreditCardIsNotValidIfNameContainsNumbers

	self should: [CreditCard withNumber: 123 name: '123' expiration: self date monthOfYear ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: CreditCard invalidNameErrorDescription
			]! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 20:34:00' prior: 50789670!
invalidNameErrorDescription
	^'invalid name'! !
!CreditCard class methodsFor: 'validating' stamp: 'a s 11/4/2019 20:35:18' prior: 50789675!
validName: aName
	^aName allSatisfy: [:aChar | aChar isLetter].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:35:52' prior: 50791479!
withNumber: aNumber name: aName expiration: anExpiration 
	(self validName: aName) ifFalse: [self error: self invalidNameErrorDescription ].
	
	^self new initializeWithNumber: aNumber name: aName expiration: anExpiration ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:15' prior: 50791573!
validCreditCard

	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2019 month: December).! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:21' prior: 50791581!
expiredCreditCard
	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2018 month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:41:42' prior: 50789223!
priceOfItemSellByTheStore
	
	^200 * peso! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:41:46' prior: 50791878!
priceOfItemSellByTheStore
	
	^200 * peso! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:43:11' prior: 50790963!
defaultCatalog
	
	| catalog |
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self priceOfItemSellByTheStore! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:43:22' prior: 50791888!
defaultCatalog
	
	| catalog |
	
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self priceOfItemSellByTheStore.
	
	^catalog! !
!Cart methodsFor: 'assertions' stamp: 'a s 11/4/2019 20:43:50' prior: 50790744!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:45:28'!
test09CartKnowsItsTotalPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:45:44'!
price
	self shouldBeImplemented.! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:47:02' prior: 50791918!
price
	^0! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:17'!
test09EmptyCartHasAPriceOf0

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore.! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:23' prior: 50791925!
test09EmptyCartHasAPriceOf0

	| cart |
	
	cart := self createCart.
	
	self assert: cart price equals: 0! !

!methodRemoval: CartTest #test09CartKnowsItsTotalPrice stamp: 'ss 11/6/2019 18:20:08'!
test09CartKnowsItsTotalPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore.!
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:53'!
test10CartPriceIsTheSumOfTheItemsPrice

	| cart |
	
	cart := self createCart.
	
	self assert: cart price equals: 0! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:48:16' prior: 50791948!
test10CartPriceIsTheSumOfTheItemsPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:48:54' prior: 50791922!
price
	^items sum: [:item | self priceOf: item] ifEmpty: [0] ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:49:17'!
priceOf: anItem
	^catalog at: anItem ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:50:18' prior: 50789380!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.! !

!methodRemoval: CashierTest #test02CheckoutCartWithOneItemSavesCartInLedger stamp: 'ss 11/6/2019 18:20:08'!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.!
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:53:46' prior: 50789354!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 

	| ledgerEntry |
	ledgerEntry := aLedger at: anIndex.
	
	! !
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:54:42' prior: 50792000!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 
	| ledgerEntry |
	
	ledgerEntry := aLedger at: anIndex.

	self assert: (ledgerEntry at: 1) equals: anItem.
	self assert: (ledgerEntry at: 2) equals: anAmount 
	! !
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:54:43' prior: 50792007!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 
	| ledgerEntry |
	
	ledgerEntry := aLedger at: anIndex.

	self assert: (ledgerEntry at: 1) equals: anItem.
	self assert: (ledgerEntry at: 2) equals: anAmount.
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:55:40' prior: 50791972!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore of: 2.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assertOn: aCashier ledger at: 1 wasSold: self itemSellByTheStore withAmount: 2! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:56:22' prior: 50792027!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assertOn: aCashier ledger at: 1 wasSold: self itemSellByTheStore withAmount: 2! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:09:33' prior: 50791660!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	
	! !
!Cart methodsFor: 'initialization' stamp: 'a s 11/4/2019 21:10:00' prior: 50790757!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'initialization' stamp: 'a s 11/4/2019 21:13:47' prior: 50792066!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 21:18:21'!
uniqueItemsDo: aBlock
	items asSet do: aBlock! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:20:00' prior: 50792055!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	
	aCart  uniqueItemsDo: [:item | | occurrencesOfItem |
		occurrencesOfItem := aCart occurrencesOf: item.
		ledger add: (Array with: item with: occurrencesOfItem)
	]! !
!Cashier methodsFor: 'nil' stamp: 'a s 11/4/2019 21:20:31' prior: 50789584!
recordSalesOnLedgerFor: aCart! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:20:41' prior: 50792098!
recordSalesOnLedgerFor: aCart

	aCart  uniqueItemsDo: [:item | | occurrencesOfItem |
		occurrencesOfItem := aCart occurrencesOf: item.
		ledger add: (Array with: item with: occurrencesOfItem)
	]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:20:51' prior: 50792082!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	self recordSalesOnLedgerFor: aCart ! !

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:08'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:08'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:23' prior: 50790958!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:11:16' prior: 50791809!
createCashier
	
	^Cashier newOn: self date registeringOn: OrderedCollection new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:03:35' prior: 50791604!
date
	^FixedGregorianDate yearNumber: 2019 month: February dayNumber: 20 ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:43:22' prior: 50791895!
defaultCatalog
	
	| catalog |
	
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self priceOfItemSellByTheStore.
	
	^catalog! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:21' prior: 50791870!
expiredCreditCard
	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2018 month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:42' prior: 50790968!
itemNotSellByTheStore
	
	^'invalidBook'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:47:02' prior: 50790973!
itemSellByTheStore
	
	^ 'validBook'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:41:46' prior: 50791883!
priceOfItemSellByTheStore
	
	^200 * peso! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:15' prior: 50791862!
validCreditCard

	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2019 month: December).! !

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:08'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:08'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:08' prior: 50790848!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50790826!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50790853!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50790813!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50790868!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50790881!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50790861!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50790839!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:23' prior: 50791934!
test09EmptyCartHasAPriceOf0

	| cart |
	
	cart := self createCart.
	
	self assert: cart price equals: 0! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:48:16' prior: 50791955!
test10CartPriceIsTheSumOfTheItemsPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore ! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:08'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:08'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:54:43' prior: 50792017!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 
	| ledgerEntry |
	
	ledgerEntry := aLedger at: anIndex.

	self assert: (ledgerEntry at: 1) equals: anItem.
	self assert: (ledgerEntry at: 2) equals: anAmount.
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:47' prior: 50791768!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := self createCashier.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: cashier ledger isEmpty 
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:56:22' prior: 50792041!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assertOn: aCashier ledger at: 1 wasSold: self itemSellByTheStore withAmount: 2! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:25' prior: 50791751!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:46' prior: 50791619!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:56' prior: 50791628!
test02CreditCardIsNotExpiredIfItHasNotReachedExpiration
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:33:38' prior: 50791828!
test03CreditCardIsNotValidIfNameContainsNumbers

	self should: [CreditCard withNumber: 123 name: '123' expiration: self date monthOfYear ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: CreditCard invalidNameErrorDescription
			]! !

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50790739!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50790734!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!Cart methodsFor: 'assertions' stamp: 'a s 11/4/2019 20:43:50' prior: 50791903!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50790750!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'a s 11/4/2019 21:13:47' prior: 50792072!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50790763!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:48:54' prior: 50791964!
price
	^items sum: [:item | self priceOf: item] ifEmpty: [0] ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:49:17' prior: 50791968!
priceOf: anItem
	^catalog at: anItem ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 21:18:21' prior: 50792077!
uniqueItemsDo: aBlock
	items asSet do: aBlock! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50790767!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50790771!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50790783!
add: anItem

	^ self add: 1 of: anItem ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50790775!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48' prior: 50790795!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout' stamp: 'a s 11/4/2019 21:20:51' prior: 50792112!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	self recordSalesOnLedgerFor: aCart ! !
!Cashier methodsFor: 'initialization' stamp: 'a s 11/4/2019 20:10:36' prior: 50791790!
initializeOn: aDate registeringOn: aLedger
	date := aDate.
	ledger := aLedger 
	
	! !
!Cashier methodsFor: 'private' stamp: 'a s 11/4/2019 21:20:41' prior: 50792102!
recordSalesOnLedgerFor: aCart

	aCart  uniqueItemsDo: [:item | | occurrencesOfItem |
		occurrencesOfItem := aCart occurrencesOf: item.
		ledger add: (Array with: item with: occurrencesOfItem)
	]! !
!Cashier methodsFor: 'accessing' stamp: 'a s 11/4/2019 20:10:54' prior: 50791800!
ledger 
	^ledger copy
	
	! !

!classDefinition: 'Cashier class' category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
Cashier class
	instanceVariableNames: ''!

!classDefinition: 'Cashier class' category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
Cashier class
	instanceVariableNames: ''!
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 18:51:16' prior: 50791055!
cantCheckoutEmptyCartErrorDescription
	^'cant checkout empty cart'! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 19:35:33' prior: 50791355!
expiredCreditCardErrorDescription
	^'credit card is expired'! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:10:18' prior: 50791784!
newOn: aDate registeringOn: aLedger
	^self new initializeOn: aDate registeringOn: aLedger.! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:41:02' prior: 50791471!
initializeWithNumber: aNumber name: aName expiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 20:01:45' prior: 50791589!
isExpiredFrom: aDate
	^expiration < (aDate monthOfYear) ! !

!classDefinition: 'CreditCard class' category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
CreditCard class
	instanceVariableNames: ''!

!classDefinition: 'CreditCard class' category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
CreditCard class
	instanceVariableNames: ''!
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:35:52' prior: 50791852!
withNumber: aNumber name: aName expiration: anExpiration 
	(self validName: aName) ifFalse: [self error: self invalidNameErrorDescription ].
	
	^self new initializeWithNumber: aNumber name: aName expiration: anExpiration ! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 20:34:00' prior: 50791841!
invalidNameErrorDescription
	^'invalid name'! !
!CreditCard class methodsFor: 'validating' stamp: 'a s 11/4/2019 20:35:18' prior: 50791846!
validName: aName
	^aName allSatisfy: [:aChar | aChar isLetter].! !

!classDefinition: #MerchantProcessorClient category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
Object subclass: #MerchantProcessorClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorClient category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
Object subclass: #MerchantProcessorClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorClient methodsFor: 'debit' stamp: 'ss 11/6/2019 17:24:07' prior: 50789695!
debitAnAmoutnOf: anAmount to: aCreditCard
	self subclassResponsibility! !

!classDefinition: #MockMerchantProcessor category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
MerchantProcessorClient subclass: #MockMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MockMerchantProcessor category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
MerchantProcessorClient subclass: #MockMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:26:03' prior: 50790306!
debitAnAmoutnOf: anAmount to: aCreditCard
! !

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date merchantProcesorClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date merchantProcesorClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier class methodsFor: 'instance creation' stamp: 'ss 11/6/2019 17:27:18' prior: 50789735!
newOn: aDate registeringOn: aLedger withMerchantProcesorClient: aClient
	^self new initializeOn: aDate registeringOn: aLedger withMerchantProcesorClient: aClient.! !

!methodRemoval: Cashier class #newOn:registeringOn: stamp: 'ss 11/6/2019 18:20:09'!
newOn: aDate registeringOn: aLedger
	^self new initializeOn: aDate registeringOn: aLedger.!
!Cashier methodsFor: 'initialization' stamp: 'ss 11/6/2019 17:27:55' prior: 50789748!
initializeOn: aDate registeringOn: aLedger withMerchantProcesorClient: aClient
	date := aDate.
	ledger := aLedger.
	merchantProcesorClient := aClient
	
	! !

!methodRemoval: Cashier #initializeOn:registeringOn: stamp: 'ss 11/6/2019 18:20:09'!
initializeOn: aDate registeringOn: aLedger
	date := aDate.
	ledger := aLedger 
	
	!
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:28:31' prior: 50792143!
createCashier
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: MockMerchantProcessor new.! !

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'nil' stamp: 'ss 11/6/2019 17:30:34'!
setUp
	merchantProcessor := MockMerchantProcessor new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:30:53' prior: 50792720!
createCashier
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: merchantProcessor.! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:31:44' prior: 50792351!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: TusLibrosTest #setUp stamp: 'ss 11/6/2019 18:20:09'!
setUp
	merchantProcessor := MockMerchantProcessor new.!
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:32:33' prior: 50792747!
createCashier
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: MockMerchantProcessor new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:32:50' prior: 50789846!
createCashierWithMerchantProcessorClient: aClient
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: MockMerchantProcessor new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:32:54' prior: 50792797!
createCashierWithMerchantProcessorClient: aClient
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: aClient .! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:33:11' prior: 50792789!
createCashier
	
	^self createCashierWithMerchantProcessorClient: MockMerchantProcessor new.! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:35:52' prior: 50789918!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:36:16' prior: 50792820!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:36:46' prior: 50792832!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor creditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	creditCard := self validCreditCard.
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:37:57' prior: 50792846!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCashier checkoutCart: aCart withCreditCard: aCreditCard 
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:39:12' prior: 50792861!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCashier checkoutCart: aCart withCreditCard: aCreditCard.
	
	self assert: (mockMerchantProcessor hasCharged: (aCart price) to: aCreditCard).
	
	
	
	! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:40:07' prior: 50790030!
hasCharged: aSimpleMeasure to: aCreditCard 
	self shouldBeImplemented.! !

!classDefinition: #MockMerchantProcessor category: #TusLibros stamp: 'ss 11/6/2019 18:20:09'!
MerchantProcessorClient subclass: #MockMerchantProcessor
	instanceVariableNames: 'chargesPerCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:42:18' prior: 50792898!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard) includes: anAmount.! !
!MockMerchantProcessor methodsFor: 'nil' stamp: 'ss 11/6/2019 17:42:53' prior: 50789958!
initialize
	chargesPerCreditCard := Dictionary new.! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:44:50' prior: 50792673!
debitAnAmoutnOf: anAmount to: aCreditCard
	(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new])
		add: anAmount! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:45:14' prior: 50792912!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number) includes: anAmount.! !
!CreditCard methodsFor: 'accessing' stamp: 'ss 11/6/2019 17:46:02' prior: 50789981!
number
	^number! !
!CreditCard methodsFor: 'accessing' stamp: 'ss 11/6/2019 17:46:09' prior: 50792938!
number
	^number copy! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:47:25' prior: 50792931!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new]) includes: anAmount.! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:47:29' prior: 50792946!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new]) 
		includes: anAmount.! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:47:49' prior: 50792923!
debitAnAmoutnOf: anAmount to: aCreditCard
	(chargesPerCreditCard at: aCreditCard number ifAbsent: [OrderedCollection new])
		add: anAmount! !
!Cashier methodsFor: 'checkout' stamp: 'ss 11/6/2019 17:48:18' prior: 50792523!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	self recordSalesOnLedgerFor: aCart.
	merchantProcesorClient debitAnAmoutnOf: aCart price to: aCreditCard.
	! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:49:58' prior: 50792962!
debitAnAmoutnOf: anAmount to: aCreditCard
	(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new])
		add: anAmount! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:50:03' prior: 50792954!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number ifAbsent: [OrderedCollection new]) 
		includes: anAmount.! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:03' prior: 50792321!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	

	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty 
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:09' prior: 50792999!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty 
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:46' prior: 50793019!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (emptyCart price) to: self validCreditCard ).
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:48' prior: 50793039!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (emptyCart price) to: self validCreditCard).
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:55:08' prior: 50792754!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:55:26' prior: 50793085!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:57:44' prior: 50790275!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	aCashier checkoutCart: aCart withCreditCard: aCreditCard.
	
	self assert: (mockMerchantProcessor hasCharged: (aCart price) to: aCreditCard).
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:57:59' prior: 50793130!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:58:42' prior: 50793151!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:59:12' prior: 50793179!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:00:53' prior: 50793207!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' 
		expiration: (GregorianMonthOfYear yearNumber: 2020 month: January).
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 18:01:50' prior: 50792983!
debitAnAmoutnOf: anAmount to: aCreditCard
	self assertNameLengthFor: aCreditCard.

	(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new])
		add: anAmount! !
!MockMerchantProcessor methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:02:13'!
assertNameLengthFor: aCreditCard 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'accessing' stamp: 'ss 11/6/2019 18:03:05' prior: 50790320!
name
	^name! !
!MockMerchantProcessor methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:03:26' prior: 50793276!
assertNameLengthFor: aCreditCard 
	aCreditCard name size > 30 ifTrue: [self error: self class creditCardNameTooLongErrorDescription]! !
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:03:45' prior: 50790345!
creditCardNameTooLongErrorDescription
	self shouldBeImplemented.! !
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:04:02' prior: 50793293!
creditCardNameTooLongErrorDescription
	^'credit card name cant be larger than 30 characters'! !
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:04:07' prior: 50793299!
creditCardNameTooLongErrorDescription
	^'credit card name cant be longer than 30 characters'! !
!Cashier methodsFor: 'checkout' stamp: 'ss 11/6/2019 18:04:51' prior: 50792969!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	merchantProcesorClient debitAnAmoutnOf: aCart price to: aCreditCard.
	self recordSalesOnLedgerFor: aCart.
	! !
!MerchantProcessorClient methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:08:11' prior: 50790365!
assertNameLengthFor: aCreditCard 
	aCreditCard name size > 30 ifTrue: [self error: self class creditCardNameTooLongErrorDescription]! !

!methodRemoval: MockMerchantProcessor #assertNameLengthFor: stamp: 'ss 11/6/2019 18:20:09'!
assertNameLengthFor: aCreditCard 
	aCreditCard name size > 30 ifTrue: [self error: self class creditCardNameTooLongErrorDescription]!
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:09:55' prior: 50790489!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard .
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:09:57' prior: 50793341!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:12:39' prior: 50793368!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: (10^15 / self priceOfItemSellByTheStore) + 1 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:13:46' prior: 50793395!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: (10^15 / self priceOfItemSellByTheStore) truncated + 2 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionAmountTooBig.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:16:02' prior: 50793423!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: (10^15 / self priceOfItemSellByTheStore amount) truncated + 2 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionAmountTooBig.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:19:15' prior: 50793451!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: 10^15 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionAmountTooBig.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !

10^15!
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:23:17' prior: 50793480!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard veryExpensiveItemCatalog |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	veryExpensiveItemCatalog := Dictionary new.
	veryExpensiveItemCatalog at: self itemSellByTheStore put: 10^16.
	aCart := Cart acceptingItemsOf: veryExpensiveItemCatalog.
	
	aCart add: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionAmountTooBig.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !

!testRun: #CashierTest #test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15 stamp: 'ss 11/6/2019 18:23:24'!
FAILURE!
!MerchantProcessorClient methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:24:43'!
assertTransactionAmount: anAmount

	anAmount amount >= 10^15 ifTrue: [self error: self class transactionAmountTooBig]! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'ss 11/6/2019 18:24:49'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'ss 11/6/2019 18:24:49'!
PASSED!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/6/2019 18:24:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutDebitsCartPriceFromCreditCard stamp: 'ss 11/6/2019 18:24:49'!
PASSED!

!testRun: #CashierTest #test05CantDebitACreditCardWithNameLongerThan30Chars stamp: 'ss 11/6/2019 18:24:49'!
PASSED!

!testRun: #CashierTest #test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15 stamp: 'ss 11/6/2019 18:24:49'!
FAILURE!

!testRun: #CashierTest #test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15 stamp: 'ss 11/6/2019 18:24:49'!
FAILURE!

!testRun: #CashierTest #test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15 stamp: 'ss 11/6/2019 18:24:53'!
FAILURE!
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 18:25:10' prior: 50793267!
debitAnAmoutnOf: anAmount to: aCreditCard
	self assertNameLengthFor: aCreditCard.
	self assertTransactionAmount: anAmount.

	(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new])
		add: anAmount! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'ss 11/6/2019 18:25:13'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'ss 11/6/2019 18:25:13'!
ERROR!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/6/2019 18:25:13'!
PASSED!

!testRun: #CashierTest #test04CheckoutDebitsCartPriceFromCreditCard stamp: 'ss 11/6/2019 18:25:13'!
ERROR!

!testRun: #CashierTest #test05CantDebitACreditCardWithNameLongerThan30Chars stamp: 'ss 11/6/2019 18:25:13'!
PASSED!

!testRun: #CashierTest #test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15 stamp: 'ss 11/6/2019 18:25:13'!
ERROR!

!testRun: #CashierTest #test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15 stamp: 'ss 11/6/2019 18:25:17'!
ERROR!
!MerchantProcessorClient methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:25:31' prior: 50793543!
assertTransactionAmount: anAmount

	anAmount amount >= (10^15) ifTrue: [self error: self class transactionAmountTooBig]! !

!testRun: #CashierTest #test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15 stamp: 'ss 11/6/2019 18:25:34'!
ERROR!
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:25:49'!
transactionAmountTooBig
	self shouldBeImplemented.! !
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:26:32' prior: 50793627!
transactionAmountTooBig
	^'transaction amount is bigger than 10^15'! !

!testRun: #CashierTest #test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15 stamp: 'ss 11/6/2019 18:26:34'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'ss 11/6/2019 18:26:34'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'ss 11/6/2019 18:26:34'!
PASSED!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/6/2019 18:26:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutDebitsCartPriceFromCreditCard stamp: 'ss 11/6/2019 18:26:34'!
PASSED!

!testRun: #CashierTest #test05CantDebitACreditCardWithNameLongerThan30Chars stamp: 'ss 11/6/2019 18:26:34'!
PASSED!

!testRun: #CashierTest #test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15 stamp: 'ss 11/6/2019 18:26:34'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:27:13'!
test07CantDebitACreditCardWithAnAmountWithMorethan2Decimals
	
	| aCart aCashier mockMerchantProcessor aCreditCard veryExpensiveItemCatalog |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	veryExpensiveItemCatalog := Dictionary new.
	veryExpensiveItemCatalog at: self itemSellByTheStore put: 10^16.
	aCart := Cart acceptingItemsOf: veryExpensiveItemCatalog.
	
	aCart add: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionAmountTooBig.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:27:15' prior: 50793663!
test07CantDebitACreditCardWithAnAmountWithMorethan2Decimals
	
	| aCart aCashier mockMerchantProcessor aCreditCard veryExpensiveItemCatalog |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	veryExpensiveItemCatalog := Dictionary new.
	veryExpensiveItemCatalog at: self itemSellByTheStore put: 10^16.
	aCart := Cart acceptingItemsOf: veryExpensiveItemCatalog.
	
	aCart add: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionAmountTooBig.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !

1.123 truncate: 2!

1.123 truncated !

1.123 * 100!

1.123 * 1000!

a * 100 - a truncated!

a := 1.123.
a * 100 - a truncated!

a := 1.123.
(a * 100) - a truncated
!

a - a truncated  !

(a * 100) - (a *100) truncated!

a := 1.123.
(a * 100) - (a *100) truncated!

a := 1.12.
(a * 100) - (a *100) truncated
!

 1.4210854715202004e-14  isZero !

a !

a asString !

----End fileIn of /Users/ssujarchuk/Downloads/macos64/Packages/TerseGuide.pck.st----!
!MerchantProcessorClient methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:35:13'!
assertTransactionDecimals: anAmount

	| amountString |
	amountString := anAmount amount asString.
	(amountString indexOf: $. ifAbsent: [amountString size]) - amountString size > 2
		ifTrue: [self error: self class transactionAmountTooBig]! !
!MerchantProcessorClient methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:35:20' prior: 50796749!
assertTransactionDecimals: anAmount
	| amountString |
	
	amountString := anAmount amount asString.
	
	(amountString indexOf: $. ifAbsent: [amountString size]) - amountString size > 2
		ifTrue: [self error: self class transactionAmountTooBig]! !
!MerchantProcessorClient methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:35:38' prior: 50796760!
assertTransactionDecimals: anAmount
	| amountString |
	
	amountString := anAmount amount asString.
	
	(amountString indexOf: $. ifAbsent: [amountString size]) - amountString size > 2
		ifTrue: [self error: self class transactionHasTooManyDecimalsErrorDescription]! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 18:36:21' prior: 50793580!
debitAnAmoutnOf: anAmount to: aCreditCard
	self assertNameLengthFor: aCreditCard.
	self assertTransactionAmount: anAmount.
	self assertTransactionDecimals: anAmount.

	(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new])
		add: anAmount! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:37:06' prior: 50793695!
test07CantDebitACreditCardWithAnAmountWithMorethan2Decimals
	
	| aCart aCashier mockMerchantProcessor aCreditCard veryExpensiveItemCatalog |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	veryExpensiveItemCatalog := Dictionary new.
	veryExpensiveItemCatalog at: self itemSellByTheStore put: 10^16.
	aCart := Cart acceptingItemsOf: veryExpensiveItemCatalog.
	
	aCart add: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionHasTooManyDecimalsErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:37:19' prior: 50796795!
test07CantDebitACreditCardWithAnAmountWithMorethan2Decimals
	
	| aCart aCashier mockMerchantProcessor aCreditCard veryExpensiveItemCatalog |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	veryExpensiveItemCatalog := Dictionary new.
	veryExpensiveItemCatalog at: self itemSellByTheStore put: 0.001.
	aCart := Cart acceptingItemsOf: veryExpensiveItemCatalog.
	
	aCart add: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionHasTooManyDecimalsErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:37:28' prior: 50796827!
test07CantDebitACreditCardWithAnAmountWithMorethan2Decimals
	
	| aCart aCashier mockMerchantProcessor aCreditCard veryExpensiveItemCatalog veryCheapItemCatalog |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	veryCheapItemCatalog := Dictionary new.
	veryCheapItemCatalog at: self itemSellByTheStore put: 0.001.
	aCart := Cart acceptingItemsOf: veryExpensiveItemCatalog.
	
	aCart add: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionHasTooManyDecimalsErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:37:43' prior: 50796859!
test07CantDebitACreditCardWithAnAmountWithMorethan2Decimals
	
	| aCart aCashier mockMerchantProcessor aCreditCard veryCheapItemCatalog |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	veryCheapItemCatalog := Dictionary new.
	veryCheapItemCatalog at: self itemSellByTheStore put: 0.001.
	aCart := Cart acceptingItemsOf: veryCheapItemCatalog .
	
	aCart add: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionHasTooManyDecimalsErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !

!testRun: #CashierTest #test07CantDebitACreditCardWithAnAmountWithMorethan2Decimals stamp: 'ss 11/6/2019 18:37:45'!
FAILURE!

!testRun: #CashierTest #test07CantDebitACreditCardWithAnAmountWithMorethan2Decimals stamp: 'ss 11/6/2019 18:37:50'!
FAILURE!
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:38:15'!
transactionHasTooManyDecimalsErrorDescription
	^'transaction amount has more than 2 decimals'! !

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'ss 11/6/2019 18:38:18'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'ss 11/6/2019 18:38:18'!
PASSED!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/6/2019 18:38:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutDebitsCartPriceFromCreditCard stamp: 'ss 11/6/2019 18:38:18'!
PASSED!

!testRun: #CashierTest #test05CantDebitACreditCardWithNameLongerThan30Chars stamp: 'ss 11/6/2019 18:38:18'!
PASSED!

!testRun: #CashierTest #test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15 stamp: 'ss 11/6/2019 18:38:18'!
PASSED!

!testRun: #CashierTest #test07CantDebitACreditCardWithAnAmountWithMorethan2Decimals stamp: 'ss 11/6/2019 18:38:18'!
FAILURE!

!testRun: #CashierTest #test07CantDebitACreditCardWithAnAmountWithMorethan2Decimals stamp: 'ss 11/6/2019 18:38:18'!
FAILURE!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'ss 11/6/2019 18:38:24'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'ss 11/6/2019 18:38:24'!
PASSED!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/6/2019 18:38:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutDebitsCartPriceFromCreditCard stamp: 'ss 11/6/2019 18:38:24'!
PASSED!

!testRun: #CashierTest #test05CantDebitACreditCardWithNameLongerThan30Chars stamp: 'ss 11/6/2019 18:38:24'!
PASSED!

!testRun: #CashierTest #test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15 stamp: 'ss 11/6/2019 18:38:24'!
PASSED!

!testRun: #CashierTest #test07CantDebitACreditCardWithAnAmountWithMorethan2Decimals stamp: 'ss 11/6/2019 18:38:24'!
FAILURE!

!testRun: #CashierTest #test07CantDebitACreditCardWithAnAmountWithMorethan2Decimals stamp: 'ss 11/6/2019 18:38:24'!
FAILURE!

amountString!

amountString indexOf: $.!

amountString size!

(amountString indexOf: $. ifAbsent: [amountString size]) - amountString size > 2!

((amountString indexOf: $. ifAbsent: [amountString size]) - amountString size) > 2!

(amountString indexOf: $. ifAbsent: [amountString size]) - amountString size!
!MerchantProcessorClient methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:40:44' prior: 50796771!
assertTransactionDecimals: anAmount
	| amountString |
	
	amountString := anAmount amount asString.
	
	 amountString size - (amountString indexOf: $. ifAbsent: [amountString size]) > 2
		ifTrue: [self error: self class transactionHasTooManyDecimalsErrorDescription]! !

!testRun: #CashierTest #test07CantDebitACreditCardWithAnAmountWithMorethan2Decimals stamp: 'ss 11/6/2019 18:40:46'!
PASSED!

!testRun: #CashierTest #test07CantDebitACreditCardWithAnAmountWithMorethan2Decimals stamp: 'ss 11/6/2019 18:40:53'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutEmptyCart stamp: 'ss 11/6/2019 18:40:53'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger stamp: 'ss 11/6/2019 18:40:53'!
PASSED!

!testRun: #CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/6/2019 18:40:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutDebitsCartPriceFromCreditCard stamp: 'ss 11/6/2019 18:40:53'!
PASSED!

!testRun: #CashierTest #test05CantDebitACreditCardWithNameLongerThan30Chars stamp: 'ss 11/6/2019 18:40:53'!
PASSED!

!testRun: #CashierTest #test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15 stamp: 'ss 11/6/2019 18:40:53'!
PASSED!

!testRun: #CashierTest #test07CantDebitACreditCardWithAnAmountWithMorethan2Decimals stamp: 'ss 11/6/2019 18:40:53'!
PASSED!

----STARTUP---- (7 November 2019 19:22:47) as /Users/ssujarchuk/Downloads/macos64/CuisUniversity-3938.image!


!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/7/2019 19:22:52'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/7/2019 19:22:52'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidItem: anItem

	(catalog includes: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 17:48'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45'!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51'!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44'!
add: anItem

	^ self add: 1 of: anItem ! !

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/7/2019 19:22:52'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/7/2019 19:22:52'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:52'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:52'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:08'!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:44'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:48'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
itemSellByTheStore
	
	^ 'validBook'! !

!classRemoval: #Cart stamp: 'ss 11/7/2019 19:22:52'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'ss 11/7/2019 19:22:52'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/7/2019 19:22:52'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/7/2019 19:22:52'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidItem: anItem

	(catalog includes: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 17:48'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45'!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51'!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44'!
add: anItem

	^ self add: 1 of: anItem ! !

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/7/2019 19:22:52'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/7/2019 19:22:52'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:52'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:52'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:08'!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:44'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:48'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
itemSellByTheStore
	
	^ 'validBook'! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:52'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:52'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:44:21'!
test01CantCheckoutEmptyCart

	self assert: false.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:44:53' prior: 50787976!
test01CantCheckoutEmptyCart

	self assert: false.! !

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:52'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:52'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:53'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:53'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:23'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:33'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:42'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:47:02'!
itemSellByTheStore
	
	^ 'validBook'! !

!methodRemoval: CartTest #createCart stamp: 'ss 11/7/2019 19:22:53'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CartTest #defaultCatalog stamp: 'ss 11/7/2019 19:22:53'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'ss 11/7/2019 19:22:53'!
itemNotSellByTheStore
	
	^'invalidBook'!

!methodRemoval: CartTest #itemSellByTheStore stamp: 'ss 11/7/2019 19:22:53'!
itemSellByTheStore
	
	^ 'validBook'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:53'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:53'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/7/2019 19:22:53'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:49:57' prior: 50787981!
test01CantCheckoutEmptyCart
	
	| emptyCart |
	emptyCart := self createCart. 

	self should: [Cashier checkoutCart: emptyCart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
			]! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:50:21'!
checkoutCart: aCart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCheckoutCart: aCart ! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:50:42' prior: 50788078!
checkoutCart: aCart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	"^self new initializeCheckoutCart: aCart" ! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:50:47' prior: 50788087!
checkoutCart: aCart 
	self shouldBeImplemented.
	"^self new initializeCheckoutCart: aCart" ! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 18:51:04'!
cantCheckoutEmptyCartErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 18:51:16' prior: 50788102!
cantCheckoutEmptyCartErrorDescription
	^'cant checkout empty cart'! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:52:04' prior: 50788096!
checkoutCart: aCart

	^self new ! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:52:52' prior: 50788114!
checkoutCart: aCart
	self error: self cantCheckoutEmptyCartErrorDescription ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:56:51' prior: 50788066!
test01CantCheckoutEmptyCart
	
	| emptyCart |
	emptyCart := self createCart. 

	self should: [Cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
			]! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:57:26'!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self cantCheckoutEmptyCartErrorDescription ! !

!methodRemoval: Cashier class #checkoutCart: stamp: 'ss 11/7/2019 19:22:53'!
checkoutCart: aCart
	self error: self cantCheckoutEmptyCartErrorDescription !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:57:51'!
validCreditCard

	^'credit card'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:57:57' prior: 50788149!
validCreditCard

	^'valid credit card'! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:00:03' prior: 50788125!
test01CantCheckoutEmptyCart
	
	| emptyCart |
	emptyCart := self createCart. 

	self should: [Cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:02:59' prior: 50788157!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier new.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!Cashier methodsFor: 'nil' stamp: 'a s 11/4/2019 19:03:44'!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self cantCheckoutEmptyCartErrorDescription ! !

!methodRemoval: Cashier class #checkoutCart:withCreditCard: stamp: 'ss 11/7/2019 19:22:53'!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self cantCheckoutEmptyCartErrorDescription !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:04:08' prior: 50788184!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self class cantCheckoutEmptyCartErrorDescription ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:08:39'!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier new.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:08:45' prior: 50788203!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier new.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:09:43' prior: 50788218!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| cart cashier |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	 
	cashier := Cashier new.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:10:39' prior: 50788225!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:11:45' prior: 50788233!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1
	self assert: (aCashier ledger at: 1) equals: aCart! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:11:50' prior: 50788243!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:12:22' prior: 50788197!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription] 
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:12:30' prior: 50788271!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	
	
	! !

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/7/2019 19:22:53'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:12:46' prior: 50788279!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	
	ledger add: aCart
	
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:13:02'!
initialize

	ledger := OrderedCollection new.
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:13:12'!
ledger 
	ledger
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:13:28' prior: 50788306!
ledger 
	^ledger copy
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:24:52'!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:25:09'!
expiredCreditCard
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/7/2019 19:22:53'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:31:50' prior: 50788331!
expiredCreditCard
	^CreditCard withNumber: '1231231' name: 'hola' withExpiration: (GregorianMonthOfYear year: 2019 month: December)! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 19:32:08'!
withNumber: aString name: aString2 withExpiration: aGregorianMonthOfYear 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aString name: aString2 withExpiration: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 19:33:14' prior: 50788350!
withNumber: aNumber name: aName withExpiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName withExpiration: anExpiration ! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/7/2019 19:22:53'!
Object subclass: #CreditCard
	instanceVariableNames: 'number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/7/2019 19:22:53'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/7/2019 19:22:53'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:33:33'!
initializeWithNumber: aNumber name: aName withExpiration: anExpiration 
	self shouldBeImplemented.
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:33:42' prior: 50788390!
initializeWithNumber: aNumber name: aName withExpiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 19:35:33'!
expiredCreditCardErrorDescription
	^'credit card is expired'! !

!methodRemoval: CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/7/2019 19:22:53'!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:53'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:53'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'nil' stamp: 'a s 11/4/2019 19:38:29'!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	aCreditCard := self expiredCreditCard
	
	self assert: aCreditCard isExpired. ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:38:49' prior: 50788442!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: aCreditCard isExpired. ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:39:09'!
isExpired
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:39:14' prior: 50788457!
isExpired
	^true! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:39:39'!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self assert: aCreditCard isExpired negated . ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:39:40' prior: 50788465!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self assert: aCreditCard isExpired negated. ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:39:49' prior: 50788474!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: aCreditCard isExpired. ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:40:23' prior: 50788343!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		withExpiration: (GregorianMonthOfYear year: 2019 month: December)! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 19:40:43'!
withNumber: aNumber name: aName expiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName withExpiration: anExpiration ! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:40:43' prior: 50788491!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2019 month: December)! !

!methodRemoval: CreditCard class #withNumber:name:withExpiration: stamp: 'ss 11/7/2019 19:22:53'!
withNumber: aNumber name: aName withExpiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName withExpiration: anExpiration !
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:41:02'!
initializeWithNumber: aNumber name: aName expiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:41:02' prior: 50788498!
withNumber: aNumber name: aName expiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName expiration: anExpiration ! !

!methodRemoval: CreditCard #initializeWithNumber:name:withExpiration: stamp: 'ss 11/7/2019 19:22:53'!
initializeWithNumber: aNumber name: aName withExpiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:43:02' prior: 50788153!
validCreditCard

	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2019 month: December).! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:43:11' prior: 50788506!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2018 month: December)! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:44:34' prior: 50788551!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2018 month: December). ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:45:04'!
test02CreditCardIsNotExpiredIfItHasNotReachedExpiration
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: aCreditCard isExpired. ! !

!methodRemoval: CreditCardTest #test02CreditCardIsExpiredIfItReachedExpirationDate stamp: 'ss 11/7/2019 19:22:53'!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: aCreditCard isExpired. !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:45:53' prior: 50788461!
isExpired
	^expiration <= FixedGregorianDate ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:45:58' prior: 50788581!
isExpired
	^expiration <= FixedGregorianDate today! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:46:22' prior: 50788586!
isExpired
	^expiration <= FixedGregorianDate today monthOfYear ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:47:36' prior: 50788591!
isExpired
	^expiration < FixedGregorianDate today monthOfYear ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:51:37' prior: 50788596!
isExpired
	^expiration < (FixedGregorianDate today monthOfYear) ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:25' prior: 50788558!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2018 * year month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:37' prior: 50788606!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: (2018 * year) month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:45' prior: 50788544!
validCreditCard

	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2019 month: December).! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:52' prior: 50788614!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2018 month: December). ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 20:01:45'!
isExpiredFrom: aDate
	^expiration < (aDate monthOfYear) ! !

!methodRemoval: CreditCard #isExpired stamp: 'ss 11/7/2019 19:22:53'!
isExpired
	^expiration < (FixedGregorianDate today monthOfYear) !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:03:30'!
date
	FixedGregorianDate yearNumber: 2019 month: February dayNumber: 20 ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:03:35' prior: 50788646!
date
	^FixedGregorianDate yearNumber: 2019 month: February dayNumber: 20 ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:02' prior: 50788450!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:46' prior: 50788658!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:56' prior: 50788565!
test02CreditCardIsNotExpiredIfItHasNotReachedExpiration
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: (aCreditCard isExpiredFrom: self date). ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:05:08'!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	! !

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/7/2019 19:22:53'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:06:19' prior: 50788293!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].
	
	ledger add: aCart
	
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:07:01'!
initializeOn: aDate
	date := aDate.
	ledger := OrderedCollection new.
	
	! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:07:38'!
newOn: aDate
	^self new initializeOn: aDate! !

!methodRemoval: Cashier #initialize stamp: 'ss 11/7/2019 19:22:53'!
initialize

	ledger := OrderedCollection new.
	
	!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:07:53' prior: 50788170!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier newOn: self date.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:08:13'!
createCashier
	
	^Cashier newOn: self date! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:08:29' prior: 50788732!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := self createCashier.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:08:45' prior: 50788257!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:08:55' prior: 50788684!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:25' prior: 50788780!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:47' prior: 50788751!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := self createCashier.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: cashier ledger isEmpty 
	]! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:10:18'!
newOn: aDate registeringOn: aLedger
	^self new initializeOn: aDate registeringOn: aLedger.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:10:36'!
initializeOn: aDate registeringOn: aLedger
	date := aDate.
	ledger := aLedger 
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:10:41' prior: 50788310!
ledger 
	^ledger
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:10:54' prior: 50788843!
ledger 
	^ledger copy
	
	! !

!methodRemoval: Cashier #initializeOn: stamp: 'ss 11/7/2019 19:22:53'!
initializeOn: aDate
	date := aDate.
	ledger := OrderedCollection new.
	
	!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:11:16' prior: 50788746!
createCashier
	
	^Cashier newOn: self date registeringOn: OrderedCollection new.! !

!methodRemoval: Cashier class #newOn: stamp: 'ss 11/7/2019 19:22:53'!
newOn: aDate
	^self new initializeOn: aDate!
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:32:24'!
test03CreditCardIsNotValidIfNameContainsNumbers

	self should: [] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: CreditCard invalidNameErrorDescription
			]! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:33:38' prior: 50788865!
test03CreditCardIsNotValidIfNameContainsNumbers

	self should: [CreditCard withNumber: 123 name: '123' expiration: self date monthOfYear ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: CreditCard invalidNameErrorDescription
			]! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 20:34:00'!
invalidNameErrorDescription
	^'invalid name'! !
!CreditCard class methodsFor: 'validating' stamp: 'a s 11/4/2019 20:35:18'!
validName: aName
	^aName allSatisfy: [:aChar | aChar isLetter].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:35:52' prior: 50788529!
withNumber: aNumber name: aName expiration: anExpiration 
	(self validName: aName) ifFalse: [self error: self invalidNameErrorDescription ].
	
	^self new initializeWithNumber: aNumber name: aName expiration: anExpiration ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:15' prior: 50788622!
validCreditCard

	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2019 month: December).! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:21' prior: 50788630!
expiredCreditCard
	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2018 month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:41:42'!
priceOfItemSellByTheStore
	
	^200 * peso! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:41:46' prior: 50788922!
priceOfItemSellByTheStore
	
	^200 * peso! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:43:11' prior: 50788017!
defaultCatalog
	
	| catalog |
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self priceOfItemSellByTheStore! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:43:22' prior: 50788932!
defaultCatalog
	
	| catalog |
	
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self priceOfItemSellByTheStore.
	
	^catalog! !
!Cart methodsFor: 'assertions' stamp: 'a s 11/4/2019 20:43:50' prior: 50787800!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:45:28'!
test09CartKnowsItsTotalPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:45:44'!
price
	self shouldBeImplemented.! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:47:02' prior: 50788962!
price
	^0! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:17'!
test09EmptyCartHasAPriceOf0

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore.! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:23' prior: 50788969!
test09EmptyCartHasAPriceOf0

	| cart |
	
	cart := self createCart.
	
	self assert: cart price equals: 0! !

!methodRemoval: CartTest #test09CartKnowsItsTotalPrice stamp: 'ss 11/7/2019 19:22:53'!
test09CartKnowsItsTotalPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore.!
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:53'!
test10CartPriceIsTheSumOfTheItemsPrice

	| cart |
	
	cart := self createCart.
	
	self assert: cart price equals: 0! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:48:16' prior: 50788992!
test10CartPriceIsTheSumOfTheItemsPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:48:54' prior: 50788966!
price
	^items sum: [:item | self priceOf: item] ifEmpty: [0] ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:49:17'!
priceOf: anItem
	^catalog at: anItem ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:50:18'!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.! !

!methodRemoval: CashierTest #test02CheckoutCartWithOneItemSavesCartInLedger stamp: 'ss 11/7/2019 19:22:53'!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.!
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:53:46'!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 

	| ledgerEntry |
	ledgerEntry := aLedger at: anIndex.
	
	! !
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:54:42' prior: 50789044!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 
	| ledgerEntry |
	
	ledgerEntry := aLedger at: anIndex.

	self assert: (ledgerEntry at: 1) equals: anItem.
	self assert: (ledgerEntry at: 2) equals: anAmount 
	! !
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:54:43' prior: 50789051!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 
	| ledgerEntry |
	
	ledgerEntry := aLedger at: anIndex.

	self assert: (ledgerEntry at: 1) equals: anItem.
	self assert: (ledgerEntry at: 2) equals: anAmount.
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:55:40' prior: 50789016!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore of: 2.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assertOn: aCashier ledger at: 1 wasSold: self itemSellByTheStore withAmount: 2! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:56:22' prior: 50789071!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assertOn: aCashier ledger at: 1 wasSold: self itemSellByTheStore withAmount: 2! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:09:33' prior: 50788708!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	
	! !
!Cart methodsFor: 'initialization' stamp: 'a s 11/4/2019 21:10:00' prior: 50787813!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'initialization' stamp: 'a s 11/4/2019 21:13:47' prior: 50789110!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 21:18:21'!
uniqueItemsDo: aBlock
	items asSet do: aBlock! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:20:00' prior: 50789099!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	
	aCart  uniqueItemsDo: [:item | | occurrencesOfItem |
		occurrencesOfItem := aCart occurrencesOf: item.
		ledger add: (Array with: item with: occurrencesOfItem)
	]! !
!Cashier methodsFor: 'nil' stamp: 'a s 11/4/2019 21:20:31'!
recordSalesOnLedgerFor: aCart! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:20:41' prior: 50789141!
recordSalesOnLedgerFor: aCart

	aCart  uniqueItemsDo: [:item | | occurrencesOfItem |
		occurrencesOfItem := aCart occurrencesOf: item.
		ledger add: (Array with: item with: occurrencesOfItem)
	]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:20:51' prior: 50789126!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	self recordSalesOnLedgerFor: aCart ! !

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:53'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:53'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:23' prior: 50788012!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:11:16' prior: 50788856!
createCashier
	
	^Cashier newOn: self date registeringOn: OrderedCollection new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:03:35' prior: 50788652!
date
	^FixedGregorianDate yearNumber: 2019 month: February dayNumber: 20 ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:43:22' prior: 50788939!
defaultCatalog
	
	| catalog |
	
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self priceOfItemSellByTheStore.
	
	^catalog! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:21' prior: 50788915!
expiredCreditCard
	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2018 month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:42' prior: 50788022!
itemNotSellByTheStore
	
	^'invalidBook'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:47:02' prior: 50788026!
itemSellByTheStore
	
	^ 'validBook'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:41:46' prior: 50788927!
priceOfItemSellByTheStore
	
	^200 * peso! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:15' prior: 50788907!
validCreditCard

	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2019 month: December).! !

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:53'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:53'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:08' prior: 50787904!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50787882!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50787909!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50787869!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50787924!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50787937!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50787917!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50787895!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:23' prior: 50788978!
test09EmptyCartHasAPriceOf0

	| cart |
	
	cart := self createCart.
	
	self assert: cart price equals: 0! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:48:16' prior: 50788999!
test10CartPriceIsTheSumOfTheItemsPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore ! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:53'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:53'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:54:43' prior: 50789061!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 
	| ledgerEntry |
	
	ledgerEntry := aLedger at: anIndex.

	self assert: (ledgerEntry at: 1) equals: anItem.
	self assert: (ledgerEntry at: 2) equals: anAmount.
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:47' prior: 50788815!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := self createCashier.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: cashier ledger isEmpty 
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:56:22' prior: 50789085!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assertOn: aCashier ledger at: 1 wasSold: self itemSellByTheStore withAmount: 2! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:25' prior: 50788798!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:53'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:46' prior: 50788667!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:56' prior: 50788676!
test02CreditCardIsNotExpiredIfItHasNotReachedExpiration
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:33:38' prior: 50788875!
test03CreditCardIsNotValidIfNameContainsNumbers

	self should: [CreditCard withNumber: 123 name: '123' expiration: self date monthOfYear ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: CreditCard invalidNameErrorDescription
			]! !

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50787795!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50787790!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!Cart methodsFor: 'assertions' stamp: 'a s 11/4/2019 20:43:50' prior: 50788947!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50787806!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'a s 11/4/2019 21:13:47' prior: 50789116!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50787819!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:48:54' prior: 50789008!
price
	^items sum: [:item | self priceOf: item] ifEmpty: [0] ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:49:17' prior: 50789012!
priceOf: anItem
	^catalog at: anItem ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 21:18:21' prior: 50789121!
uniqueItemsDo: aBlock
	items asSet do: aBlock! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50787823!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50787827!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50787839!
add: anItem

	^ self add: 1 of: anItem ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50787831!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48' prior: 50787851!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout' stamp: 'a s 11/4/2019 21:20:51' prior: 50789155!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	self recordSalesOnLedgerFor: aCart ! !
!Cashier methodsFor: 'initialization' stamp: 'a s 11/4/2019 20:10:36' prior: 50788837!
initializeOn: aDate registeringOn: aLedger
	date := aDate.
	ledger := aLedger 
	
	! !
!Cashier methodsFor: 'private' stamp: 'a s 11/4/2019 21:20:41' prior: 50789145!
recordSalesOnLedgerFor: aCart

	aCart  uniqueItemsDo: [:item | | occurrencesOfItem |
		occurrencesOfItem := aCart occurrencesOf: item.
		ledger add: (Array with: item with: occurrencesOfItem)
	]! !
!Cashier methodsFor: 'accessing' stamp: 'a s 11/4/2019 20:10:54' prior: 50788847!
ledger 
	^ledger copy
	
	! !

!classDefinition: 'Cashier class' category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
Cashier class
	instanceVariableNames: ''!

!classDefinition: 'Cashier class' category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
Cashier class
	instanceVariableNames: ''!
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 18:51:16' prior: 50788108!
cantCheckoutEmptyCartErrorDescription
	^'cant checkout empty cart'! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 19:35:33' prior: 50788406!
expiredCreditCardErrorDescription
	^'credit card is expired'! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:10:18' prior: 50788831!
newOn: aDate registeringOn: aLedger
	^self new initializeOn: aDate registeringOn: aLedger.! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:41:02' prior: 50788521!
initializeWithNumber: aNumber name: aName expiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 20:01:45' prior: 50788637!
isExpiredFrom: aDate
	^expiration < (aDate monthOfYear) ! !

!classDefinition: 'CreditCard class' category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
CreditCard class
	instanceVariableNames: ''!

!classDefinition: 'CreditCard class' category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
CreditCard class
	instanceVariableNames: ''!
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:35:52' prior: 50788897!
withNumber: aNumber name: aName expiration: anExpiration 
	(self validName: aName) ifFalse: [self error: self invalidNameErrorDescription ].
	
	^self new initializeWithNumber: aNumber name: aName expiration: anExpiration ! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 20:34:00' prior: 50788887!
invalidNameErrorDescription
	^'invalid name'! !
!CreditCard class methodsFor: 'validating' stamp: 'a s 11/4/2019 20:35:18' prior: 50788891!
validName: aName
	^aName allSatisfy: [:aChar | aChar isLetter].! !

!classDefinition: #MerchantProcessorClient category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
Object subclass: #MerchantProcessorClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorClient category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
Object subclass: #MerchantProcessorClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorClient methodsFor: 'debit' stamp: 'ss 11/6/2019 17:24:07'!
debitAnAmoutnOf: anAmount to: aCreditCard
	self subclassResponsibility! !

!classDefinition: #MockMerchantProcessor category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
MerchantProcessorClient subclass: #MockMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MockMerchantProcessor category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
MerchantProcessorClient subclass: #MockMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:26:03'!
debitAnAmoutnOf: anAmount to: aCreditCard
! !

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date merchantProcesorClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date merchantProcesorClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier class methodsFor: 'instance creation' stamp: 'ss 11/6/2019 17:27:18'!
newOn: aDate registeringOn: aLedger withMerchantProcesorClient: aClient
	^self new initializeOn: aDate registeringOn: aLedger withMerchantProcesorClient: aClient.! !

!methodRemoval: Cashier class #newOn:registeringOn: stamp: 'ss 11/7/2019 19:22:54'!
newOn: aDate registeringOn: aLedger
	^self new initializeOn: aDate registeringOn: aLedger.!
!Cashier methodsFor: 'initialization' stamp: 'ss 11/6/2019 17:27:55'!
initializeOn: aDate registeringOn: aLedger withMerchantProcesorClient: aClient
	date := aDate.
	ledger := aLedger.
	merchantProcesorClient := aClient
	
	! !

!methodRemoval: Cashier #initializeOn:registeringOn: stamp: 'ss 11/7/2019 19:22:54'!
initializeOn: aDate registeringOn: aLedger
	date := aDate.
	ledger := aLedger 
	
	!
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:28:31' prior: 50789186!
createCashier
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: MockMerchantProcessor new.! !

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'nil' stamp: 'ss 11/6/2019 17:30:34'!
setUp
	merchantProcessor := MockMerchantProcessor new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:30:53' prior: 50789761!
createCashier
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: merchantProcessor.! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:31:44' prior: 50789394!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: TusLibrosTest #setUp stamp: 'ss 11/7/2019 19:22:54'!
setUp
	merchantProcessor := MockMerchantProcessor new.!
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:32:33' prior: 50789788!
createCashier
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: MockMerchantProcessor new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:32:50'!
createCashierWithMerchantProcessorClient: aClient
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: MockMerchantProcessor new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:32:54' prior: 50789837!
createCashierWithMerchantProcessorClient: aClient
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: aClient .! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:33:11' prior: 50789830!
createCashier
	
	^self createCashierWithMerchantProcessorClient: MockMerchantProcessor new.! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:35:52'!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:36:16' prior: 50789860!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:36:46' prior: 50789872!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor creditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	creditCard := self validCreditCard.
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:37:57' prior: 50789886!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCashier checkoutCart: aCart withCreditCard: aCreditCard 
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:39:12' prior: 50789901!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCashier checkoutCart: aCart withCreditCard: aCreditCard.
	
	self assert: (mockMerchantProcessor hasCharged: (aCart price) to: aCreditCard).
	
	
	
	! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:40:07'!
hasCharged: aSimpleMeasure to: aCreditCard 
	self shouldBeImplemented.! !

!classDefinition: #MockMerchantProcessor category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
MerchantProcessorClient subclass: #MockMerchantProcessor
	instanceVariableNames: 'chargesPerCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:42:18' prior: 50789938!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard) includes: anAmount.! !
!MockMerchantProcessor methodsFor: 'nil' stamp: 'ss 11/6/2019 17:42:53'!
initialize
	chargesPerCreditCard := Dictionary new.! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:44:50' prior: 50789716!
debitAnAmoutnOf: anAmount to: aCreditCard
	(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new])
		add: anAmount! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:45:14' prior: 50789952!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number) includes: anAmount.! !
!CreditCard methodsFor: 'accessing' stamp: 'ss 11/6/2019 17:46:02'!
number
	^number! !
!CreditCard methodsFor: 'accessing' stamp: 'ss 11/6/2019 17:46:09' prior: 50789977!
number
	^number copy! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:47:25' prior: 50789971!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new]) includes: anAmount.! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:47:29' prior: 50789985!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new]) 
		includes: anAmount.! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:47:49' prior: 50789963!
debitAnAmoutnOf: anAmount to: aCreditCard
	(chargesPerCreditCard at: aCreditCard number ifAbsent: [OrderedCollection new])
		add: anAmount! !
!Cashier methodsFor: 'checkout' stamp: 'ss 11/6/2019 17:48:18' prior: 50789566!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	self recordSalesOnLedgerFor: aCart.
	merchantProcesorClient debitAnAmoutnOf: aCart price to: aCreditCard.
	! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:49:58' prior: 50790001!
debitAnAmoutnOf: anAmount to: aCreditCard
	(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new])
		add: anAmount! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:50:03' prior: 50789993!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number ifAbsent: [OrderedCollection new]) 
		includes: anAmount.! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:03' prior: 50789364!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	

	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty 
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:09' prior: 50790038!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty 
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:46' prior: 50790058!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (emptyCart price) to: self validCreditCard ).
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:48' prior: 50790078!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (emptyCart price) to: self validCreditCard).
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:55:08' prior: 50789795!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:55:26' prior: 50790124!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:57:44'!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	aCashier checkoutCart: aCart withCreditCard: aCreditCard.
	
	self assert: (mockMerchantProcessor hasCharged: (aCart price) to: aCreditCard).
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:57:59' prior: 50790169!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:58:42' prior: 50790190!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:59:12' prior: 50790218!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:00:53' prior: 50790246!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' 
		expiration: (GregorianMonthOfYear yearNumber: 2020 month: January).
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 18:01:50' prior: 50790022!
debitAnAmoutnOf: anAmount to: aCreditCard
	self assertNameLengthFor: aCreditCard.

	(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new])
		add: anAmount! !
!MockMerchantProcessor methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:02:13'!
assertNameLengthFor: aCreditCard 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'accessing' stamp: 'ss 11/6/2019 18:03:05'!
name
	^name! !
!MockMerchantProcessor methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:03:26' prior: 50790315!
assertNameLengthFor: aCreditCard 
	aCreditCard name size > 30 ifTrue: [self error: self class creditCardNameTooLongErrorDescription]! !
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:03:45'!
creditCardNameTooLongErrorDescription
	self shouldBeImplemented.! !
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:04:02' prior: 50790332!
creditCardNameTooLongErrorDescription
	^'credit card name cant be larger than 30 characters'! !
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:04:07' prior: 50790338!
creditCardNameTooLongErrorDescription
	^'credit card name cant be longer than 30 characters'! !
!Cashier methodsFor: 'checkout' stamp: 'ss 11/6/2019 18:04:51' prior: 50790008!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	merchantProcesorClient debitAnAmoutnOf: aCart price to: aCreditCard.
	self recordSalesOnLedgerFor: aCart.
	! !
!MerchantProcessorClient methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:08:11'!
assertNameLengthFor: aCreditCard 
	aCreditCard name size > 30 ifTrue: [self error: self class creditCardNameTooLongErrorDescription]! !

!methodRemoval: MockMerchantProcessor #assertNameLengthFor: stamp: 'ss 11/7/2019 19:22:54'!
assertNameLengthFor: aCreditCard 
	aCreditCard name size > 30 ifTrue: [self error: self class creditCardNameTooLongErrorDescription]!
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:09:55'!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard .
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:09:57' prior: 50790379!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:12:39' prior: 50790406!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: (10^15 / self priceOfItemSellByTheStore) + 1 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:13:46' prior: 50790433!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: (10^15 / self priceOfItemSellByTheStore) truncated + 2 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionAmountTooBig.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:16:02' prior: 50790461!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: (10^15 / self priceOfItemSellByTheStore amount) truncated + 2 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionAmountTooBig.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50789474!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50789469!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50789479!
assertIsValidItem: anItem

	(catalog includes: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50789486!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 17:48' prior: 50789493!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50789499!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50789518!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50789523!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50789531!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50789527!
add: anItem

	^ self add: 1 of: anItem ! !

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48' prior: 50789547!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:54'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50789275!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50789254!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50789316!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:08' prior: 50789249!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50789267!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50789309!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50789288!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50789301!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:44'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:48'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
itemSellByTheStore
	
	^ 'validBook'! !

!classRemoval: #Cart stamp: 'ss 11/7/2019 19:22:55'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'ss 11/7/2019 19:22:55'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/7/2019 19:22:55'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/7/2019 19:22:55'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidItem: anItem

	(catalog includes: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 17:48'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45'!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51'!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44'!
add: anItem

	^ self add: 1 of: anItem ! !

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/7/2019 19:22:55'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/7/2019 19:22:55'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:55'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:55'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:08'!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:44'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:48'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
itemSellByTheStore
	
	^ 'validBook'! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:55'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:55'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:44:21' prior: 50790101!
test01CantCheckoutEmptyCart

	self assert: false.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:44:53' prior: 50790921!
test01CantCheckoutEmptyCart

	self assert: false.! !

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:55'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:55'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:55'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:55'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:23' prior: 50789181!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:33' prior: 50789198!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:42' prior: 50789214!
itemNotSellByTheStore
	
	^'invalidBook'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:47:02' prior: 50789219!
itemSellByTheStore
	
	^ 'validBook'! !

!methodRemoval: CartTest #createCart stamp: 'ss 11/7/2019 19:22:55'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CartTest #defaultCatalog stamp: 'ss 11/7/2019 19:22:55'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'ss 11/7/2019 19:22:55'!
itemNotSellByTheStore
	
	^'invalidBook'!

!methodRemoval: CartTest #itemSellByTheStore stamp: 'ss 11/7/2019 19:22:55'!
itemSellByTheStore
	
	^ 'validBook'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:55'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:55'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/7/2019 19:22:55'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:49:57' prior: 50790926!
test01CantCheckoutEmptyCart
	
	| emptyCart |
	emptyCart := self createCart. 

	self should: [Cashier checkoutCart: emptyCart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
			]! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:50:21'!
checkoutCart: aCart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCheckoutCart: aCart ! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:50:42' prior: 50791025!
checkoutCart: aCart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	"^self new initializeCheckoutCart: aCart" ! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:50:47' prior: 50791034!
checkoutCart: aCart 
	self shouldBeImplemented.
	"^self new initializeCheckoutCart: aCart" ! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 18:51:04' prior: 50789606!
cantCheckoutEmptyCartErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 18:51:16' prior: 50791049!
cantCheckoutEmptyCartErrorDescription
	^'cant checkout empty cart'! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:52:04' prior: 50791043!
checkoutCart: aCart

	^self new ! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:52:52' prior: 50791061!
checkoutCart: aCart
	self error: self cantCheckoutEmptyCartErrorDescription ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 18:56:51' prior: 50791013!
test01CantCheckoutEmptyCart
	
	| emptyCart |
	emptyCart := self createCart. 

	self should: [Cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
			]! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 18:57:26'!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self cantCheckoutEmptyCartErrorDescription ! !

!methodRemoval: Cashier class #checkoutCart: stamp: 'ss 11/7/2019 19:22:55'!
checkoutCart: aCart
	self error: self cantCheckoutEmptyCartErrorDescription !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:57:51' prior: 50789228!
validCreditCard

	^'credit card'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:57:57' prior: 50791096!
validCreditCard

	^'valid credit card'! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:00:03' prior: 50791072!
test01CantCheckoutEmptyCart
	
	| emptyCart |
	emptyCart := self createCart. 

	self should: [Cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:02:59' prior: 50791104!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier new.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!Cashier methodsFor: 'nil' stamp: 'a s 11/4/2019 19:03:44' prior: 50790351!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self cantCheckoutEmptyCartErrorDescription ! !

!methodRemoval: Cashier class #checkoutCart:withCreditCard: stamp: 'ss 11/7/2019 19:22:55'!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self cantCheckoutEmptyCartErrorDescription !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:04:08' prior: 50791131!
checkoutCart: aCart withCreditCard: aCreditCard
	self error: self class cantCheckoutEmptyCartErrorDescription ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:08:39'!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier new.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:08:45' prior: 50791150!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier new.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:09:43' prior: 50791165!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| cart cashier |
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	 
	cashier := Cashier new.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:10:39' prior: 50791172!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:11:45' prior: 50791180!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1
	self assert: (aCashier ledger at: 1) equals: aCart! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:11:50' prior: 50791190!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:12:22' prior: 50791144!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription] 
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:12:30' prior: 50791218!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	
	
	! !

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/7/2019 19:22:55'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:12:46' prior: 50791226!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	
	ledger add: aCart
	
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:13:02'!
initialize

	ledger := OrderedCollection new.
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:13:12' prior: 50789593!
ledger 
	ledger
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:13:28' prior: 50791253!
ledger 
	^ledger copy
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 19:24:52' prior: 50790145!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:25:09' prior: 50789206!
expiredCreditCard
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/7/2019 19:22:55'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:31:50' prior: 50791279!
expiredCreditCard
	^CreditCard withNumber: '1231231' name: 'hola' withExpiration: (GregorianMonthOfYear year: 2019 month: December)! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 19:32:08'!
withNumber: aString name: aString2 withExpiration: aGregorianMonthOfYear 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aString name: aString2 withExpiration: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 19:33:14' prior: 50791298!
withNumber: aNumber name: aName withExpiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName withExpiration: anExpiration ! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
Object subclass: #CreditCard
	instanceVariableNames: 'number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:33:33'!
initializeWithNumber: aNumber name: aName withExpiration: anExpiration 
	self shouldBeImplemented.
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:33:42' prior: 50791338!
initializeWithNumber: aNumber name: aName withExpiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 19:35:33' prior: 50789612!
expiredCreditCardErrorDescription
	^'credit card is expired'! !

!methodRemoval: CashierTest #test03CantCheckoutWithExpiredCreditCard stamp: 'ss 11/7/2019 19:22:56'!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'nil' stamp: 'a s 11/4/2019 19:38:29' prior: 50789425!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	aCreditCard := self expiredCreditCard
	
	self assert: aCreditCard isExpired. ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:38:49' prior: 50791391!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: aCreditCard isExpired. ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:39:09'!
isExpired
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:39:14' prior: 50791406!
isExpired
	^true! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:39:39'!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self assert: aCreditCard isExpired negated . ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:39:40' prior: 50791414!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self assert: aCreditCard isExpired negated. ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:39:49' prior: 50791423!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: aCreditCard isExpired. ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:40:23' prior: 50791291!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		withExpiration: (GregorianMonthOfYear year: 2019 month: December)! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 19:40:43' prior: 50789659!
withNumber: aNumber name: aName expiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName withExpiration: anExpiration ! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:40:43' prior: 50791440!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2019 month: December)! !

!methodRemoval: CreditCard class #withNumber:name:withExpiration: stamp: 'ss 11/7/2019 19:22:56'!
withNumber: aNumber name: aName withExpiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName withExpiration: anExpiration !
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:41:02' prior: 50789638!
initializeWithNumber: aNumber name: aName expiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:41:02' prior: 50791448!
withNumber: aNumber name: aName expiration: anExpiration 
	^self new initializeWithNumber: aNumber name: aName expiration: anExpiration ! !

!methodRemoval: CreditCard #initializeWithNumber:name:withExpiration: stamp: 'ss 11/7/2019 19:22:56'!
initializeWithNumber: aNumber name: aName withExpiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:43:02' prior: 50791100!
validCreditCard

	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2019 month: December).! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:43:11' prior: 50791456!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2018 month: December)! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:44:34' prior: 50791501!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2018 month: December). ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 19:45:04' prior: 50789434!
test02CreditCardIsNotExpiredIfItHasNotReachedExpiration
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: aCreditCard isExpired. ! !

!methodRemoval: CreditCardTest #test02CreditCardIsExpiredIfItReachedExpirationDate stamp: 'ss 11/7/2019 19:22:56'!
test02CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: aCreditCard isExpired. !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:45:53' prior: 50791410!
isExpired
	^expiration <= FixedGregorianDate ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:45:58' prior: 50791532!
isExpired
	^expiration <= FixedGregorianDate today! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:46:22' prior: 50791537!
isExpired
	^expiration <= FixedGregorianDate today monthOfYear ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:47:36' prior: 50791542!
isExpired
	^expiration < FixedGregorianDate today monthOfYear ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 19:51:37' prior: 50791547!
isExpired
	^expiration < (FixedGregorianDate today monthOfYear) ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:25' prior: 50791508!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: 2018 * year month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:37' prior: 50791557!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear year: (2018 * year) month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:45' prior: 50791494!
validCreditCard

	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2019 month: December).! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 19:57:52' prior: 50791565!
expiredCreditCard
	^CreditCard withNumber: '1231231' 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2018 month: December). ! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 20:01:45' prior: 50789645!
isExpiredFrom: aDate
	^expiration < (aDate monthOfYear) ! !

!methodRemoval: CreditCard #isExpired stamp: 'ss 11/7/2019 19:22:56'!
isExpired
	^expiration < (FixedGregorianDate today monthOfYear) !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:03:30' prior: 50789192!
date
	FixedGregorianDate yearNumber: 2019 month: February dayNumber: 20 ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:03:35' prior: 50791598!
date
	^FixedGregorianDate yearNumber: 2019 month: February dayNumber: 20 ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:02' prior: 50791399!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:46' prior: 50791610!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:56' prior: 50791516!
test02CreditCardIsNotExpiredIfItHasNotReachedExpiration
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: (aCreditCard isExpiredFrom: self date). ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:05:08'!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := Cashier new.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	! !

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:06:19' prior: 50791240!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].
	
	ledger add: aCart
	
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:07:01'!
initializeOn: aDate
	date := aDate.
	ledger := OrderedCollection new.
	
	! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:07:38'!
newOn: aDate
	^self new initializeOn: aDate! !

!methodRemoval: Cashier #initialize stamp: 'ss 11/7/2019 19:22:56'!
initialize

	ledger := OrderedCollection new.
	
	!
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:07:53' prior: 50791117!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := Cashier newOn: self date.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:08:13' prior: 50789854!
createCashier
	
	^Cashier newOn: self date! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:08:29' prior: 50791684!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := self createCashier.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:08:45' prior: 50791204!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:08:55' prior: 50791636!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger size equals: 0.
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:25' prior: 50791733!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:47' prior: 50791704!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := self createCashier.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: cashier ledger isEmpty 
	]! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:10:18'!
newOn: aDate registeringOn: aLedger
	^self new initializeOn: aDate registeringOn: aLedger.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:10:36'!
initializeOn: aDate registeringOn: aLedger
	date := aDate.
	ledger := aLedger 
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:10:41' prior: 50791257!
ledger 
	^ledger
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:10:54' prior: 50791796!
ledger 
	^ledger copy
	
	! !

!methodRemoval: Cashier #initializeOn: stamp: 'ss 11/7/2019 19:22:56'!
initializeOn: aDate
	date := aDate.
	ledger := OrderedCollection new.
	
	!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:11:16' prior: 50791699!
createCashier
	
	^Cashier newOn: self date registeringOn: OrderedCollection new.! !

!methodRemoval: Cashier class #newOn: stamp: 'ss 11/7/2019 19:22:56'!
newOn: aDate
	^self new initializeOn: aDate!
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:32:24' prior: 50789443!
test03CreditCardIsNotValidIfNameContainsNumbers

	self should: [] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: CreditCard invalidNameErrorDescription
			]! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:33:38' prior: 50791818!
test03CreditCardIsNotValidIfNameContainsNumbers

	self should: [CreditCard withNumber: 123 name: '123' expiration: self date monthOfYear ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: CreditCard invalidNameErrorDescription
			]! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 20:34:00' prior: 50789670!
invalidNameErrorDescription
	^'invalid name'! !
!CreditCard class methodsFor: 'validating' stamp: 'a s 11/4/2019 20:35:18' prior: 50789675!
validName: aName
	^aName allSatisfy: [:aChar | aChar isLetter].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:35:52' prior: 50791479!
withNumber: aNumber name: aName expiration: anExpiration 
	(self validName: aName) ifFalse: [self error: self invalidNameErrorDescription ].
	
	^self new initializeWithNumber: aNumber name: aName expiration: anExpiration ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:15' prior: 50791573!
validCreditCard

	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2019 month: December).! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:21' prior: 50791581!
expiredCreditCard
	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2018 month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:41:42' prior: 50789223!
priceOfItemSellByTheStore
	
	^200 * peso! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:41:46' prior: 50791878!
priceOfItemSellByTheStore
	
	^200 * peso! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:43:11' prior: 50790963!
defaultCatalog
	
	| catalog |
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self priceOfItemSellByTheStore! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:43:22' prior: 50791888!
defaultCatalog
	
	| catalog |
	
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self priceOfItemSellByTheStore.
	
	^catalog! !
!Cart methodsFor: 'assertions' stamp: 'a s 11/4/2019 20:43:50' prior: 50790744!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:45:28'!
test09CartKnowsItsTotalPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 20:45:44'!
price
	self shouldBeImplemented.! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:47:02' prior: 50791918!
price
	^0! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:17'!
test09EmptyCartHasAPriceOf0

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore.! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:23' prior: 50791925!
test09EmptyCartHasAPriceOf0

	| cart |
	
	cart := self createCart.
	
	self assert: cart price equals: 0! !

!methodRemoval: CartTest #test09CartKnowsItsTotalPrice stamp: 'ss 11/7/2019 19:22:56'!
test09CartKnowsItsTotalPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore.!
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:53'!
test10CartPriceIsTheSumOfTheItemsPrice

	| cart |
	
	cart := self createCart.
	
	self assert: cart price equals: 0! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:48:16' prior: 50791948!
test10CartPriceIsTheSumOfTheItemsPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:48:54' prior: 50791922!
price
	^items sum: [:item | self priceOf: item] ifEmpty: [0] ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:49:17'!
priceOf: anItem
	^catalog at: anItem ! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:50:18' prior: 50789380!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.! !

!methodRemoval: CashierTest #test02CheckoutCartWithOneItemSavesCartInLedger stamp: 'ss 11/7/2019 19:22:56'!
test02CheckoutCartWithOneItemSavesCartInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assert: aCashier ledger size equals: 1.
	self assert: (aCashier ledger at: 1) equals: aCart.!
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:53:46' prior: 50789354!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 

	| ledgerEntry |
	ledgerEntry := aLedger at: anIndex.
	
	! !
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:54:42' prior: 50792000!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 
	| ledgerEntry |
	
	ledgerEntry := aLedger at: anIndex.

	self assert: (ledgerEntry at: 1) equals: anItem.
	self assert: (ledgerEntry at: 2) equals: anAmount 
	! !
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:54:43' prior: 50792007!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 
	| ledgerEntry |
	
	ledgerEntry := aLedger at: anIndex.

	self assert: (ledgerEntry at: 1) equals: anItem.
	self assert: (ledgerEntry at: 2) equals: anAmount.
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:55:40' prior: 50791972!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore of: 2.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assertOn: aCashier ledger at: 1 wasSold: self itemSellByTheStore withAmount: 2! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:56:22' prior: 50792027!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assertOn: aCashier ledger at: 1 wasSold: self itemSellByTheStore withAmount: 2! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:09:33' prior: 50791660!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	
	! !
!Cart methodsFor: 'initialization' stamp: 'a s 11/4/2019 21:10:00' prior: 50790757!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'initialization' stamp: 'a s 11/4/2019 21:13:47' prior: 50792066!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 21:18:21'!
uniqueItemsDo: aBlock
	items asSet do: aBlock! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:20:00' prior: 50792055!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	
	aCart  uniqueItemsDo: [:item | | occurrencesOfItem |
		occurrencesOfItem := aCart occurrencesOf: item.
		ledger add: (Array with: item with: occurrencesOfItem)
	]! !
!Cashier methodsFor: 'nil' stamp: 'a s 11/4/2019 21:20:31' prior: 50789584!
recordSalesOnLedgerFor: aCart! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:20:41' prior: 50792098!
recordSalesOnLedgerFor: aCart

	aCart  uniqueItemsDo: [:item | | occurrencesOfItem |
		occurrencesOfItem := aCart occurrencesOf: item.
		ledger add: (Array with: item with: occurrencesOfItem)
	]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'a s 11/4/2019 21:20:51' prior: 50792082!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	self recordSalesOnLedgerFor: aCart ! !

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:23' prior: 50790958!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:11:16' prior: 50791809!
createCashier
	
	^Cashier newOn: self date registeringOn: OrderedCollection new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:03:35' prior: 50791604!
date
	^FixedGregorianDate yearNumber: 2019 month: February dayNumber: 20 ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:43:22' prior: 50791895!
defaultCatalog
	
	| catalog |
	
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self priceOfItemSellByTheStore.
	
	^catalog! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:21' prior: 50791870!
expiredCreditCard
	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2018 month: December). ! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:46:42' prior: 50790968!
itemNotSellByTheStore
	
	^'invalidBook'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 18:47:02' prior: 50790973!
itemSellByTheStore
	
	^ 'validBook'! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:41:46' prior: 50791883!
priceOfItemSellByTheStore
	
	^200 * peso! !
!TusLibrosTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:36:15' prior: 50791862!
validCreditCard

	^CreditCard withNumber: 1231231 
		name: 'hola' 
		expiration: (GregorianMonthOfYear yearNumber: 2019 month: December).! !

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:08' prior: 50790848!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50790826!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50790853!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50790813!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50790868!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50790881!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50790861!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50790839!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:47:23' prior: 50791934!
test09EmptyCartHasAPriceOf0

	| cart |
	
	cart := self createCart.
	
	self assert: cart price equals: 0! !
!CartTest methodsFor: 'tests' stamp: 'a s 11/4/2019 20:48:16' prior: 50791955!
test10CartPriceIsTheSumOfTheItemsPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 5 of: self itemSellByTheStore.
	
	self assert: cart price equals: 5*self priceOfItemSellByTheStore ! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'support' stamp: 'a s 11/4/2019 20:54:43' prior: 50792017!
assertOn: aLedger at: anIndex wasSold: anItem withAmount: anAmount 
	| ledgerEntry |
	
	ledgerEntry := aLedger at: anIndex.

	self assert: (ledgerEntry at: 1) equals: anItem.
	self assert: (ledgerEntry at: 2) equals: anAmount.
	! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:47' prior: 50791768!
test01CantCheckoutEmptyCart
	
	| emptyCart cashier |
	emptyCart := self createCart. 
	cashier := self createCashier.

	self should: [cashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: cashier ledger isEmpty 
	]! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:56:22' prior: 50792041!
test02CheckoutCartWithOneItemSavesCartSoldItemsInLedger
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	aCashier checkoutCart: aCart withCreditCard: self validCreditCard.
	
	self assertOn: aCashier ledger at: 1 wasSold: self itemSellByTheStore withAmount: 2! !
!CashierTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:09:25' prior: 50791751!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:46' prior: 50791619!
test01CreditCardIsExpiredIfItReachedExpirationDate
	| aCreditCard |
	
	aCreditCard := self expiredCreditCard.
	
	self assert: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:04:56' prior: 50791628!
test02CreditCardIsNotExpiredIfItHasNotReachedExpiration
	| aCreditCard |
	
	aCreditCard := self validCreditCard .
	
	self deny: (aCreditCard isExpiredFrom: self date). ! !
!CreditCardTest methodsFor: 'testing' stamp: 'a s 11/4/2019 20:33:38' prior: 50791828!
test03CreditCardIsNotValidIfNameContainsNumbers

	self should: [CreditCard withNumber: 123 name: '123' expiration: self date monthOfYear ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: CreditCard invalidNameErrorDescription
			]! !

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50790739!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50790734!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!Cart methodsFor: 'assertions' stamp: 'a s 11/4/2019 20:43:50' prior: 50791903!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50790750!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'a s 11/4/2019 21:13:47' prior: 50792072!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50790763!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:48:54' prior: 50791964!
price
	^items sum: [:item | self priceOf: item] ifEmpty: [0] ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 20:49:17' prior: 50791968!
priceOf: anItem
	^catalog at: anItem ! !
!Cart methodsFor: 'queries' stamp: 'a s 11/4/2019 21:18:21' prior: 50792077!
uniqueItemsDo: aBlock
	items asSet do: aBlock! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50790767!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50790771!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50790783!
add: anItem

	^ self add: 1 of: anItem ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50790775!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48' prior: 50790795!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout' stamp: 'a s 11/4/2019 21:20:51' prior: 50792112!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	self recordSalesOnLedgerFor: aCart ! !
!Cashier methodsFor: 'initialization' stamp: 'a s 11/4/2019 20:10:36' prior: 50791790!
initializeOn: aDate registeringOn: aLedger
	date := aDate.
	ledger := aLedger 
	
	! !
!Cashier methodsFor: 'private' stamp: 'a s 11/4/2019 21:20:41' prior: 50792102!
recordSalesOnLedgerFor: aCart

	aCart  uniqueItemsDo: [:item | | occurrencesOfItem |
		occurrencesOfItem := aCart occurrencesOf: item.
		ledger add: (Array with: item with: occurrencesOfItem)
	]! !
!Cashier methodsFor: 'accessing' stamp: 'a s 11/4/2019 20:10:54' prior: 50791800!
ledger 
	^ledger copy
	
	! !

!classDefinition: 'Cashier class' category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
Cashier class
	instanceVariableNames: ''!

!classDefinition: 'Cashier class' category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
Cashier class
	instanceVariableNames: ''!
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 18:51:16' prior: 50791055!
cantCheckoutEmptyCartErrorDescription
	^'cant checkout empty cart'! !
!Cashier class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 19:35:33' prior: 50791355!
expiredCreditCardErrorDescription
	^'credit card is expired'! !
!Cashier class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:10:18' prior: 50791784!
newOn: aDate registeringOn: aLedger
	^self new initializeOn: aDate registeringOn: aLedger.! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'a s 11/4/2019 19:41:02' prior: 50791471!
initializeWithNumber: aNumber name: aName expiration: anExpiration 
	number := aNumber.
	name := aName.
	expiration := anExpiration.! !
!CreditCard methodsFor: 'validation' stamp: 'a s 11/4/2019 20:01:45' prior: 50791589!
isExpiredFrom: aDate
	^expiration < (aDate monthOfYear) ! !

!classDefinition: 'CreditCard class' category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
CreditCard class
	instanceVariableNames: ''!

!classDefinition: 'CreditCard class' category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
CreditCard class
	instanceVariableNames: ''!
!CreditCard class methodsFor: 'instance creation' stamp: 'a s 11/4/2019 20:35:52' prior: 50791852!
withNumber: aNumber name: aName expiration: anExpiration 
	(self validName: aName) ifFalse: [self error: self invalidNameErrorDescription ].
	
	^self new initializeWithNumber: aNumber name: aName expiration: anExpiration ! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'a s 11/4/2019 20:34:00' prior: 50791841!
invalidNameErrorDescription
	^'invalid name'! !
!CreditCard class methodsFor: 'validating' stamp: 'a s 11/4/2019 20:35:18' prior: 50791846!
validName: aName
	^aName allSatisfy: [:aChar | aChar isLetter].! !

!classDefinition: #MerchantProcessorClient category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
Object subclass: #MerchantProcessorClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorClient category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
Object subclass: #MerchantProcessorClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorClient methodsFor: 'debit' stamp: 'ss 11/6/2019 17:24:07' prior: 50789695!
debitAnAmoutnOf: anAmount to: aCreditCard
	self subclassResponsibility! !

!classDefinition: #MockMerchantProcessor category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
MerchantProcessorClient subclass: #MockMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MockMerchantProcessor category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
MerchantProcessorClient subclass: #MockMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:26:03' prior: 50790306!
debitAnAmoutnOf: anAmount to: aCreditCard
! !

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/7/2019 19:22:56'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date merchantProcesorClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'ss 11/7/2019 19:22:57'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date merchantProcesorClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier class methodsFor: 'instance creation' stamp: 'ss 11/6/2019 17:27:18' prior: 50789735!
newOn: aDate registeringOn: aLedger withMerchantProcesorClient: aClient
	^self new initializeOn: aDate registeringOn: aLedger withMerchantProcesorClient: aClient.! !

!methodRemoval: Cashier class #newOn:registeringOn: stamp: 'ss 11/7/2019 19:22:57'!
newOn: aDate registeringOn: aLedger
	^self new initializeOn: aDate registeringOn: aLedger.!
!Cashier methodsFor: 'initialization' stamp: 'ss 11/6/2019 17:27:55' prior: 50789748!
initializeOn: aDate registeringOn: aLedger withMerchantProcesorClient: aClient
	date := aDate.
	ledger := aLedger.
	merchantProcesorClient := aClient
	
	! !

!methodRemoval: Cashier #initializeOn:registeringOn: stamp: 'ss 11/7/2019 19:22:57'!
initializeOn: aDate registeringOn: aLedger
	date := aDate.
	ledger := aLedger 
	
	!
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:28:31' prior: 50792143!
createCashier
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: MockMerchantProcessor new.! !

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:57'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:57'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'nil' stamp: 'ss 11/6/2019 17:30:34'!
setUp
	merchantProcessor := MockMerchantProcessor new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:30:53' prior: 50792720!
createCashier
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: merchantProcessor.! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:31:44' prior: 50792351!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	aCashier := self createCashier.
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:57'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: #TusLibros stamp: 'ss 11/7/2019 19:22:57'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: TusLibrosTest #setUp stamp: 'ss 11/7/2019 19:22:57'!
setUp
	merchantProcessor := MockMerchantProcessor new.!
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:32:33' prior: 50792747!
createCashier
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: MockMerchantProcessor new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:32:50' prior: 50789846!
createCashierWithMerchantProcessorClient: aClient
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: MockMerchantProcessor new.! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:32:54' prior: 50792797!
createCashierWithMerchantProcessorClient: aClient
	
	^Cashier newOn: self date 
		registeringOn: OrderedCollection new 
		withMerchantProcesorClient: aClient .! !
!TusLibrosTest methodsFor: 'support' stamp: 'ss 11/6/2019 17:33:11' prior: 50792789!
createCashier
	
	^self createCashierWithMerchantProcessorClient: MockMerchantProcessor new.! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:35:52' prior: 50789918!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:36:16' prior: 50792820!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:36:46' prior: 50792832!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor creditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	creditCard := self validCreditCard.
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:37:57' prior: 50792846!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCashier checkoutCart: aCart withCreditCard: aCreditCard 
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:39:12' prior: 50792861!
test04CheckoutDebitsCartPriceFromCreditCard
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCashier checkoutCart: aCart withCreditCard: aCreditCard.
	
	self assert: (mockMerchantProcessor hasCharged: (aCart price) to: aCreditCard).
	
	
	
	! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:40:07' prior: 50790030!
hasCharged: aSimpleMeasure to: aCreditCard 
	self shouldBeImplemented.! !

!classDefinition: #MockMerchantProcessor category: #TusLibros stamp: 'ss 11/7/2019 19:22:57'!
MerchantProcessorClient subclass: #MockMerchantProcessor
	instanceVariableNames: 'chargesPerCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:42:18' prior: 50792898!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard) includes: anAmount.! !
!MockMerchantProcessor methodsFor: 'nil' stamp: 'ss 11/6/2019 17:42:53' prior: 50789958!
initialize
	chargesPerCreditCard := Dictionary new.! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:44:50' prior: 50792673!
debitAnAmoutnOf: anAmount to: aCreditCard
	(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new])
		add: anAmount! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:45:14' prior: 50792912!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number) includes: anAmount.! !
!CreditCard methodsFor: 'accessing' stamp: 'ss 11/6/2019 17:46:02' prior: 50789981!
number
	^number! !
!CreditCard methodsFor: 'accessing' stamp: 'ss 11/6/2019 17:46:09' prior: 50792938!
number
	^number copy! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:47:25' prior: 50792931!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new]) includes: anAmount.! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:47:29' prior: 50792946!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new]) 
		includes: anAmount.! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:47:49' prior: 50792923!
debitAnAmoutnOf: anAmount to: aCreditCard
	(chargesPerCreditCard at: aCreditCard number ifAbsent: [OrderedCollection new])
		add: anAmount! !
!Cashier methodsFor: 'checkout' stamp: 'ss 11/6/2019 17:48:18' prior: 50792523!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	self recordSalesOnLedgerFor: aCart.
	merchantProcesorClient debitAnAmoutnOf: aCart price to: aCreditCard.
	! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 17:49:58' prior: 50792962!
debitAnAmoutnOf: anAmount to: aCreditCard
	(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new])
		add: anAmount! !
!MockMerchantProcessor methodsFor: 'testing' stamp: 'ss 11/6/2019 17:50:03' prior: 50792954!
hasCharged: anAmount to: aCreditCard 
	^(chargesPerCreditCard at: aCreditCard number ifAbsent: [OrderedCollection new]) 
		includes: anAmount.! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:03' prior: 50792321!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	

	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty 
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:09' prior: 50792999!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty 
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:46' prior: 50793019!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (emptyCart price) to: self validCreditCard ).
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:54:48' prior: 50793039!
test01CantCheckoutEmptyCart
	
	| emptyCart aCashier mockMerchantProcessor |
	emptyCart := self createCart. 
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: emptyCart withCreditCard: self validCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | 
			self assert: error messageText equals: Cashier cantCheckoutEmptyCartErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (emptyCart price) to: self validCreditCard).
	]! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:55:08' prior: 50792754!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty 
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:55:26' prior: 50793085!
test03CantCheckoutWithExpiredCreditCard
	
	| aCart aCashier mockMerchantProcessor |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	 
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:57:44' prior: 50790275!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	aCashier checkoutCart: aCart withCreditCard: aCreditCard.
	
	self assert: (mockMerchantProcessor hasCharged: (aCart price) to: aCreditCard).
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:57:59' prior: 50793130!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: self expiredCreditCard] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: Cashier expiredCreditCardErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:58:42' prior: 50793151!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 17:59:12' prior: 50793179!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' expiration: self date.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:00:53' prior: 50793207!
test05CantDebitACreditCardWithNameLongerThan30Chars
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := CreditCard withNumber: 123123123 name: 'frutafrutafrutafrutafrutaaaaaaa' 
		expiration: (GregorianMonthOfYear yearNumber: 2020 month: January).
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!MockMerchantProcessor methodsFor: 'debit' stamp: 'ss 11/6/2019 18:01:50' prior: 50792983!
debitAnAmoutnOf: anAmount to: aCreditCard
	self assertNameLengthFor: aCreditCard.

	(chargesPerCreditCard at: aCreditCard number ifAbsentPut: [OrderedCollection new])
		add: anAmount! !
!MockMerchantProcessor methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:02:13'!
assertNameLengthFor: aCreditCard 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'accessing' stamp: 'ss 11/6/2019 18:03:05' prior: 50790320!
name
	^name! !
!MockMerchantProcessor methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:03:26' prior: 50793276!
assertNameLengthFor: aCreditCard 
	aCreditCard name size > 30 ifTrue: [self error: self class creditCardNameTooLongErrorDescription]! !
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:03:45' prior: 50790345!
creditCardNameTooLongErrorDescription
	self shouldBeImplemented.! !
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:04:02' prior: 50793293!
creditCardNameTooLongErrorDescription
	^'credit card name cant be larger than 30 characters'! !
!MerchantProcessorClient class methodsFor: 'error descriptions' stamp: 'ss 11/6/2019 18:04:07' prior: 50793299!
creditCardNameTooLongErrorDescription
	^'credit card name cant be longer than 30 characters'! !
!Cashier methodsFor: 'checkout' stamp: 'ss 11/6/2019 18:04:51' prior: 50792969!
checkoutCart: aCart withCreditCard: aCreditCard
	aCart isEmpty ifTrue: [self error: self class cantCheckoutEmptyCartErrorDescription].
	(aCreditCard isExpiredFrom: date) ifTrue: [self error: self class expiredCreditCardErrorDescription ].

	merchantProcesorClient debitAnAmoutnOf: aCart price to: aCreditCard.
	self recordSalesOnLedgerFor: aCart.
	! !
!MerchantProcessorClient methodsFor: 'assertions' stamp: 'ss 11/6/2019 18:08:11' prior: 50790365!
assertNameLengthFor: aCreditCard 
	aCreditCard name size > 30 ifTrue: [self error: self class creditCardNameTooLongErrorDescription]! !

!methodRemoval: MockMerchantProcessor #assertNameLengthFor: stamp: 'ss 11/7/2019 19:22:57'!
assertNameLengthFor: aCreditCard 
	aCreditCard name size > 30 ifTrue: [self error: self class creditCardNameTooLongErrorDescription]!
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:09:55' prior: 50790489!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard .
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:09:57' prior: 50793341!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	aCart := self createCart.
	aCart add: self itemSellByTheStore.
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:12:39' prior: 50793368!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: (10^15 / self priceOfItemSellByTheStore) + 1 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient creditCardNameTooLongErrorDescription.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:13:46' prior: 50793395!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: (10^15 / self priceOfItemSellByTheStore) truncated + 2 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionAmountTooBig.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:16:02' prior: 50793423!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: (10^15 / self priceOfItemSellByTheStore amount) truncated + 2 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionAmountTooBig.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'ss 11/6/2019 18:19:15' prior: 50793451!
test06CantDebitACreditCardWithAnAmountGreaterThan10ToThePowerOf15
	
	| aCart aCashier mockMerchantProcessor aCreditCard |
	
	mockMerchantProcessor := MockMerchantProcessor new.
	aCashier := self createCashierWithMerchantProcessorClient: mockMerchantProcessor.
	
	aCreditCard := self validCreditCard.
	
	aCart := self createCart.
	aCart add: 10^15 of: self itemSellByTheStore.
	
	self should: [aCashier checkoutCart: aCart withCreditCard: aCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error |
			self assert: error messageText equals: MerchantProcessorClient transactionAmountTooBig.
			self assert: aCashier ledger isEmpty.
			self deny: (mockMerchantProcessor hasCharged: (aCart price) to: self validCreditCard).
		].
	
	
	
	! !

!classRemoval: #MockMerchantProcessor stamp: 'ss 11/7/2019 19:23:14'!
MerchantProcessorClient subclass: #MockMerchantProcessor
	instanceVariableNames: 'chargesPerCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorClient stamp: 'ss 11/7/2019 19:23:14'!
Object subclass: #MerchantProcessorClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'ss 11/7/2019 19:23:14'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'ss 11/7/2019 19:23:15'!
Object subclass: #Cashier
	instanceVariableNames: 'ledger date merchantProcesorClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'ss 11/7/2019 19:23:15'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'ss 11/7/2019 19:23:15'!
TusLibrosTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'ss 11/7/2019 19:23:15'!
TusLibrosTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'ss 11/7/2019 19:23:15'!
TusLibrosTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #TusLibrosTest stamp: 'ss 11/7/2019 19:23:16'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /Users/ssujarchuk/facultad/2019-2c/25-TusLibros/Iteracion2/TusLibros-33.st----!

TestCase subclass: #RestAPI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestAPI category: #TusLibros stamp: 'ss 11/7/2019 19:25:27'!
TestCase subclass: #RestAPI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestAPITest category: #TusLibros stamp: 'ss 11/7/2019 19:26:05'!
TestCase subclass: #RestAPITest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestAPITest methodsFor: 'setUp' stamp: 'ss 11/7/2019 19:26:02'!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 19:26:28'!
test01ListCartFailsIfIDDoesNotExist! !
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 19:26:52' prior: 50794138!
test01ListCartFailsIfIDDoesNotExist

	| restAPI |
	restAPI := testObjectsFactory createRestAPI.
	
	! !

!classDefinition: #RestAPI category: #TusLibros stamp: 'ss 11/7/2019 19:28:24'!
Object subclass: #RestAPI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 19:28:19' prior: 50794142!
test01ListCartFailsIfIDDoesNotExist
	| restAPI |
	
	restAPI := testObjectsFactory createRestAPI.
	
	self should: [restAPI listCartWithID: 'some_invalid_id'] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error | 
				self assert: error messageText equals: RestAPI cartNotFoundErrorDescription
			]
	! !

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 19:28:31'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 19:28:43'!
createRestAPI
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 19:29:13' prior: 50794171!
createRestAPI
	^RestAPI new.! !

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 19:29:18'!
ERROR!
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 19:29:32'!
listCartWithID: aString 
	self shouldBeImplemented.! !
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 19:29:49' prior: 50794183!
listCartWithID: cartID 
	
	self error: self class cartNotFoundErrorDescription.! !

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 19:29:54'!
ERROR!
!RestAPI class methodsFor: 'error descriptions' stamp: 'ss 11/7/2019 19:30:02'!
cartNotFoundErrorDescription
	self shouldBeImplemented.! !
!RestAPI class methodsFor: 'error descriptions' stamp: 'ss 11/7/2019 19:30:09' prior: 50794197!
cartNotFoundErrorDescription
	^'cart not found'! !

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 19:30:11'!
PASSED!

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 19:30:11'!
PASSED!
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 19:32:02'!
test02CreateCartReturnsIDToListCart
	| restAPI |
	
	restAPI := testObjectsFactory createRestAPI.
	
	self should: [restAPI listCartWithID: 'some_invalid_id'] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error | 
				self assert: error messageText equals: RestAPI cartNotFoundErrorDescription
			]
	! !
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 19:33:40'!
test02CreateCartReturnsIDToListCartThatIsEmpty
	| restAPI cartID |
	
	restAPI := testObjectsFactory createRestAPI.
	
	cartID := restAPI createCartForClient: 'client_id' withPassword: 'top_secret_password'.
	
	restAPI listCartWithID: cartID
	! !

!methodRemoval: RestAPITest #test02CreateCartReturnsIDToListCart stamp: 'ss 11/7/2019 19:33:46'!
test02CreateCartReturnsIDToListCart
	| restAPI |
	
	restAPI := testObjectsFactory createRestAPI.
	
	self should: [restAPI listCartWithID: 'some_invalid_id'] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error | 
				self assert: error messageText equals: RestAPI cartNotFoundErrorDescription
			]
	!
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 19:34:00' prior: 50794224!
test02CreateCartReturnsIDToListCartThatIsEmpty
	| restAPI cartID |
	
	restAPI := testObjectsFactory createRestAPI.
	
	cartID := restAPI createCartForClient: 'client_id' withPassword: 'top_secret_password'.
	
	self assert: (restAPI listCartWithID: cartID) isEmpty.
	! !

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 19:34:05'!
ERROR!
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 19:34:11'!
createCartForClient: aString withPassword: aString2 
	self shouldBeImplemented.! !
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 19:34:18' prior: 50794263!
createCartForClient: clientID withPassword: password 
	self shouldBeImplemented.! !

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 19:34:34'!
ERROR!

Random new!

Number random !
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 19:37:45' prior: 50794269!
createCartForClient: clientID withPassword: password 
	^1 ! !

!classDefinition: #RestAPI category: #TusLibros stamp: 'ss 11/7/2019 19:38:31'!
Object subclass: #RestAPI
	instanceVariableNames: 'catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 19:38:26' prior: 50794188!
listCartWithID: cartID 
	
	cartID = 1 ifFalse: [self error: self class cartNotFoundErrorDescription].
	
	^Cart acceptingItemsOf: catalog.! !

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 19:38:37'!
PASSED!

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 19:38:37'!
PASSED!

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 19:38:37'!
PASSED!
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 19:39:59'!
test03CreateCartReturnsDifferentIDsForEachCart
	| restAPI cartID |
	
	restAPI := testObjectsFactory createRestAPI.
	
	cartID := restAPI createCartForClient: 'client_id' withPassword: 'top_secret_password'.
	
	self assert: (restAPI listCartWithID: cartID) isEmpty.
	! !
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 19:40:51' prior: 50794308!
test03CreateCartReturnsDifferentIDsForEachCart
	| restAPI firstCartID secondCartID |
	
	restAPI := testObjectsFactory createRestAPI.
	
	firstCartID := restAPI createCartForClient: 'client_id' withPassword: 'top_secret_password'.
	secondCartID := restAPI createCartForClient: 'other_client_id' withPassword: 'another_top_secret_password'.
	
	self deny: firstCartID = secondCartID.
	! !
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 19:42:43' prior: 50794319!
test03CreateCartReturnsDifferentIDsForEachCart
	| restAPI cartIDs |
	
	restAPI := testObjectsFactory createRestAPI.
	
	cartIDs := Set new.
	
	cartIDs add: (restAPI createCartForClient: '1' withPassword: '1').
	cartIDs add: (restAPI createCartForClient: '2' withPassword: '1').
	cartIDs add: (restAPI createCartForClient: '3' withPassword: '1').
	cartIDs add: (restAPI createCartForClient: '4' withPassword: '1').
	
	self assert: cartIDs size equals: 4.
	! !

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 19:42:48'!
FAILURE!

----End fileIn of /Users/ssujarchuk/Downloads/macos64/Packages/TerseGuide.pck.st----!
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 19:43:50' prior: 50794279!
createCartForClient: clientID withPassword: password 
	^Random new next.! !

Random new next.!

	^Random new next yourself !

	^100000 random!
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 19:44:58' prior: 50797366!
createCartForClient: clientID withPassword: password 
	^100000 atRandom! !

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 19:45:03'!
PASSED!

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 19:45:03'!
PASSED!

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 19:45:03'!
ERROR!

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 19:45:03'!
PASSED!

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 19:45:03'!
ERROR!
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 19:46:07' prior: 50797374!
createCartForClient: clientID withPassword: password 
	| cartID |
	cartID := 100000 atRandom
	
	cartByID at: cartID put: (Cart acceptingItemsOf: catalog).! !

!classDefinition: #RestAPI category: #TusLibros stamp: 'ss 11/7/2019 19:46:30'!
Object subclass: #RestAPI
	instanceVariableNames: 'catalog cartsByID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 19:46:29' prior: 50797397!
createCartForClient: clientID withPassword: password 
	| cartID |
	cartID := 100000 atRandom.

	cartsByID at: cartID put: (Cart acceptingItemsOf: catalog).! !
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 19:46:33' prior: 50797412!
createCartForClient: clientID withPassword: password 
	| cartID |
	
	cartID := 100000 atRandom.
	cartsByID at: cartID put: (Cart acceptingItemsOf: catalog).! !
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 19:46:45'!
initialize

	cartsByID := Dictionary new.! !
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 19:47:26' prior: 50794291!
listCartWithID: cartID 
	
	^cartsByID at: cartID ifAbsent: [self error: self class cartNotFoundErrorDescription].! !

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 19:47:30'!
PASSED!

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 19:47:30'!
ERROR!

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 19:47:30'!
FAILURE!

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 19:47:33'!
FAILURE!
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 19:47:52' prior: 50797420!
createCartForClient: clientID withPassword: password 
	| cartID |
	
	cartID := 100000 atRandom.
	cartsByID at: cartID put: (Cart acceptingItemsOf: catalog).
	
	^cartID ! !

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 19:47:54'!
PASSED!

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 19:47:54'!
PASSED!

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 19:47:54'!
PASSED!
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 19:49:22'!
test04AddToCartFailsIfCartDoesNotExist
	| restAPI cartIDs |
	
	restAPI := testObjectsFactory createRestAPI.
	
	cartIDs := Set new.
	
	cartIDs add: (restAPI createCartForClient: '1' withPassword: '1').
	cartIDs add: (restAPI createCartForClient: '2' withPassword: '1').
	cartIDs add: (restAPI createCartForClient: '3' withPassword: '1').
	cartIDs add: (restAPI createCartForClient: '4' withPassword: '1').
	
	self assert: cartIDs size equals: 4.
	! !
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 19:49:32' prior: 50797472!
test04AddToCartFailsIfCartDoesNotExist
	| restAPI cartIDs |
	
	restAPI := testObjectsFactory createRestAPI.
	
	
	! !

TestCase subclass: #RestAPITest
	instanceVariableNames: 'testObjectsFactory restAPI'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #RestAPITest
	instanceVariableNames: 'testObjectsFactory restapi'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestAPITest category: #TusLibros stamp: 'ss 11/7/2019 19:51:17'!
TestCase subclass: #RestAPITest
	instanceVariableNames: 'testObjectsFactory restapi'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestAPITest methodsFor: 'setUp' stamp: 'ss 11/7/2019 19:51:32' prior: 50794133!
setUp 
	
	testObjectsFactory := StoreTestObjectsFactory new.
	
	restapi := testObjectsFactory createRestAPI ! !
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 19:51:56' prior: 50794155!
test01ListCartFailsIfIDDoesNotExist

	self should: [restapi listCartWithID: 'some_invalid_id'] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error | 
				self assert: error messageText equals: RestAPI cartNotFoundErrorDescription
			]
	! !
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 19:52:03' prior: 50794248!
test02CreateCartReturnsIDToListCartThatIsEmpty
	| cartID |
	cartID := restapi createCartForClient: 'client_id' withPassword: 'top_secret_password'.
	
	self assert: (restapi listCartWithID: cartID) isEmpty.
	! !
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 19:52:17' prior: 50794334!
test03CreateCartReturnsDifferentIDsForEachCart
	| cartIDs |
	
	cartIDs := Set new.
	
	cartIDs add: (restapi createCartForClient: '1' withPassword: '1').
	cartIDs add: (restapi createCartForClient: '2' withPassword: '1').
	cartIDs add: (restapi createCartForClient: '3' withPassword: '1').
	cartIDs add: (restapi createCartForClient: '4' withPassword: '1').
	
	self assert: cartIDs size equals: 4.
	! !
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 19:52:35' prior: 50797489!
test04AddToCartFailsIfCartDoesNotExist
	| |
	
	! !
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 19:53:53' prior: 50797557!
test04AddToCartFailsIfCartDoesNotExist

	self should: [restapi add: 50 of: 'ISBN131231231' toCartWithID: 'some_invalid_id'] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error | 
				self assert: error messageText equals: RestAPI cartNotFoundErrorDescription
			]
	! !

!testRun: #RestAPITest #test04AddToCartFailsIfCartDoesNotExist stamp: 'ss 11/7/2019 19:54:00'!
ERROR!
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 19:54:05'!
add: aSmallInteger of: aString toCartWithID: aString3 
	self shouldBeImplemented.! !
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 19:54:38' prior: 50797577!
add: anAmount of: anISBN toCartWithID: cartID
	self error: self class cartNotFoundErrorDescription.
	! !

!testRun: #RestAPITest #test04AddToCartFailsIfCartDoesNotExist stamp: 'ss 11/7/2019 19:54:39'!
PASSED!

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 19:54:39'!
PASSED!

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 19:54:39'!
PASSED!

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 19:54:39'!
PASSED!

!testRun: #RestAPITest #test04AddToCartFailsIfCartDoesNotExist stamp: 'ss 11/7/2019 19:54:39'!
PASSED!
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 19:56:41'!
test05CanListItemsAfterAddingToExistingCart
	| cartID |
	cartID 

	self should: [restapi add: 50 of: 'ISBN131231231' toCartWithID: 'some_invalid_id'] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error | 
				self assert: error messageText equals: RestAPI cartNotFoundErrorDescription
			]
	! !
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 19:58:04' prior: 50797606!
test05CanListItemsAfterAddingToExistingCart
	| cartID |
	
	cartID := restapi createCartForClient: 'client_id' withPassword: 'top_secret_password'. 

	restapi add: 5 of: (testObjectsFactory itemSellByTheStore) toCartWithID: cartID.
	
	
	! !
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 19:59:13' prior: 50797619!
test05CanListItemsAfterAddingToExistingCart
	| cartID cart |
	
	cartID := restapi createCartForClient: 'client_id' withPassword: 'top_secret_password'. 

	restapi add: 5 of: (testObjectsFactory itemSellByTheStore) toCartWithID: cartID.
	
	cart := restapi listCartWithID: cartID.
	
	"self assert: cart"
	! !
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 20:00:50' prior: 50797630!
test05CanListItemsAfterAddingToExistingCart
	| cartID cart item |
	
	cartID := restapi createCartForClient: 'client_id' withPassword: 'top_secret_password'. 
	item := testObjectsFactory itemSellByTheStore.

	restapi add: 5 of: item toCartWithID: cartID.
	
	cart := restapi listCartWithID: cartID.
	
	self assert: cart size equals: 5.
	self assert: (cart ocurrencesOf: item) equals: 5.	! !
!Cart methodsFor: 'queries' stamp: 'ss 11/7/2019 20:01:54'!
size
	^items size.! !

!testRun: #RestAPITest #test05CanListItemsAfterAddingToExistingCart stamp: 'ss 11/7/2019 20:02:16'!
ERROR!
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 20:03:40' prior: 50797583!
add: anAmount of: anISBN toCartWithID: cartID
	| cart |
	cart := cartsByID at: cartID ifAbsent: [self error: self class cartNotFoundErrorDescription].
	
	cart add: anAmount of: anISBN.
	
	cartsByID at: cartID put: cart.! !

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 20:03:46'!
PASSED!

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 20:03:46'!
PASSED!

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 20:03:46'!
PASSED!

!testRun: #RestAPITest #test04AddToCartFailsIfCartDoesNotExist stamp: 'ss 11/7/2019 20:03:46'!
PASSED!

!testRun: #RestAPITest #test05CanListItemsAfterAddingToExistingCart stamp: 'ss 11/7/2019 20:03:46'!
ERROR!

!testRun: #RestAPITest #test05CanListItemsAfterAddingToExistingCart stamp: 'ss 11/7/2019 20:03:46'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'REST API' stamp: 'ss 11/7/2019 20:04:57' prior: 50794176!
createRestAPI
	^RestAPI newWithCatalog: self defaultCatalog.! !
!RestAPI class methodsFor: 'instance creation' stamp: 'ss 11/7/2019 20:05:08'!
newWithCatalog: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNewWithCatalog: aDictionary ! !
!RestAPI class methodsFor: 'instance creation' stamp: 'ss 11/7/2019 20:05:20' prior: 50797701!
newWithCatalog: aCatalog 
	^self new initializeNewWithCatalog: aCatalog ! !
!RestAPI class methodsFor: 'instance creation' stamp: 'ss 11/7/2019 20:05:23' prior: 50797710!
newWithCatalog: aCatalog 
	^self new initializeNewWithCatalog: aCatalog! !
!RestAPI methodsFor: 'initialization' stamp: 'ss 11/7/2019 20:05:36'!
initializeNewWithCatalog: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!RestAPI methodsFor: 'initialization' stamp: 'ss 11/7/2019 20:05:39' prior: 50797721!
initializeNewWithCatalog: aCatalog 
	catalog := aCatalog.! !

!testRun: #RestAPITest #test05CanListItemsAfterAddingToExistingCart stamp: 'ss 11/7/2019 20:05:41'!
ERROR!
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 20:05:59' prior: 50797643!
test05CanListItemsAfterAddingToExistingCart
	| cartID cart item |
	
	cartID := restapi createCartForClient: 'client_id' withPassword: 'top_secret_password'. 
	item := testObjectsFactory itemSellByTheStore.

	restapi add: 5 of: item toCartWithID: cartID.
	
	cart := restapi listCartWithID: cartID.
	
	self assert: cart size equals: 5.
	self assert: (cart occurrencesOf: item) equals: 5.	! !

!testRun: #RestAPITest #test05CanListItemsAfterAddingToExistingCart stamp: 'ss 11/7/2019 20:06:00'!
PASSED!

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 20:06:00'!
PASSED!

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 20:06:00'!
PASSED!

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 20:06:00'!
PASSED!

!testRun: #RestAPITest #test04AddToCartFailsIfCartDoesNotExist stamp: 'ss 11/7/2019 20:06:00'!
PASSED!

!testRun: #RestAPITest #test05CanListItemsAfterAddingToExistingCart stamp: 'ss 11/7/2019 20:06:00'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'REST API' stamp: 'ss 11/7/2019 20:08:33' prior: 50797696!
createRestAPI
	^RestAPI newWithCatalog: self defaultCatalog authenticatingOn: self userStore.! !
!StoreTestObjectsFactory methodsFor: 'REST API' stamp: 'ss 11/7/2019 20:09:39'!
userStore

	 ^Dictionary new
		at: self validUser put: self validPassword;
		yourself ! !
!StoreTestObjectsFactory methodsFor: 'REST API' stamp: 'ss 11/7/2019 20:10:04'!
validUser
	^'a_valid_user'! !
!StoreTestObjectsFactory methodsFor: 'REST API' stamp: 'ss 11/7/2019 20:10:14'!
validPassword
	^'top_secret'! !
!RestAPI class methodsFor: 'instance creation' stamp: 'ss 11/7/2019 20:10:47'!
newWithCatalog: aDictionary authenticatingOn: aDictionary2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNewWithCatalog: aDictionary authenticatingOn: aDictionary2 ! !
!RestAPI class methodsFor: 'instance creation' stamp: 'ss 11/7/2019 20:11:11' prior: 50797791!
newWithCatalog: aCatalog authenticatingOn: userStore 
	^self new initializeNewWithCatalog: aCatalog authenticatingOn: userStore. ! !

!classDefinition: #RestAPI category: #TusLibros stamp: 'ss 11/7/2019 20:11:20'!
Object subclass: #RestAPI
	instanceVariableNames: 'catalog cartsByID userStore_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestAPI methodsFor: 'initialization' stamp: 'ss 11/7/2019 20:11:20'!
initializeNewWithCatalog: aCatalog authenticatingOn: userStore 
	self shouldBeImplemented.
	catalog := aCatalog.
	userStore_CHANGE_ME := userStore.! !
!RestAPI methodsFor: 'initialization' stamp: 'ss 11/7/2019 20:12:18' prior: 50797816!
initializeNewWithCatalog: aCatalog authenticatingOn: userStore 
	catalog := aCatalog.
	userStore_CHANGE_ME := userStore.! !

Object subclass: #RestAPI
	instanceVariableNames: 'catalog cartsByID userStore'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #RestAPI
	instanceVariableNames: 'catalog cartsByID usersStore'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestAPI category: #TusLibros stamp: 'ss 11/7/2019 20:12:51'!
Object subclass: #RestAPI
	instanceVariableNames: 'catalog cartsByID usersStore'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestAPI methodsFor: 'initialization' stamp: 'ss 11/7/2019 20:13:26' prior: 50797824!
initializeNewWithCatalog: aCatalog authenticatingOn: aUsersStore 
	catalog := aCatalog.
	usersStore := aUsersStore.! !

!testRun: #RestAPITest #test05CanListItemsAfterAddingToExistingCart stamp: 'ss 11/7/2019 20:13:30'!
PASSED!

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 20:13:30'!
PASSED!

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 20:13:30'!
PASSED!

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 20:13:30'!
PASSED!

!testRun: #RestAPITest #test04AddToCartFailsIfCartDoesNotExist stamp: 'ss 11/7/2019 20:13:30'!
PASSED!

!testRun: #RestAPITest #test05CanListItemsAfterAddingToExistingCart stamp: 'ss 11/7/2019 20:13:30'!
PASSED!
!RestAPITest methodsFor: 'support' stamp: 'ss 11/7/2019 20:14:23'!
createCart
! !
!RestAPITest methodsFor: 'support' stamp: 'ss 11/7/2019 20:15:00' prior: 50797875!
createCart
	^restapi createCartForClient: '' withPassword: ''
! !
!RestAPITest methodsFor: 'support' stamp: 'ss 11/7/2019 20:15:24' prior: 50797879!
createCart
	^restapi createCartForClient: testObjectsFactory validUser withPassword: testObjectsFactory validPassword 
! !
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 20:15:40' prior: 50797531!
test02CreateCartReturnsIDToListCartThatIsEmpty
	| cartID |
	cartID := self createCart.
	
	self assert: (restapi listCartWithID: cartID) isEmpty.
	! !
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 20:16:17' prior: 50797541!
test03CreateCartReturnsDifferentIDsForEachCart
	| cartIDs |
	
	cartIDs := Set new.
	
	1 to: 4 do: [cartIDs add: self createCart ].
	
	self assert: cartIDs size equals: 4.
	! !
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 20:16:40' prior: 50797735!
test05CanListItemsAfterAddingToExistingCart
	| cartID cart item |
	
	cartID := self createCart.
	item := testObjectsFactory itemSellByTheStore.

	restapi add: 5 of: item toCartWithID: cartID.
	
	cart := restapi listCartWithID: cartID.
	
	self assert: cart size equals: 5.
	self assert: (cart occurrencesOf: item) equals: 5.	! !

!testRun: #RestAPITest #test05CanListItemsAfterAddingToExistingCart stamp: 'ss 11/7/2019 20:16:41'!
PASSED!

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 20:16:41'!
PASSED!

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 20:16:41'!
PASSED!

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 20:16:41'!
ERROR!

!testRun: #RestAPITest #test04AddToCartFailsIfCartDoesNotExist stamp: 'ss 11/7/2019 20:16:41'!
PASSED!

!testRun: #RestAPITest #test05CanListItemsAfterAddingToExistingCart stamp: 'ss 11/7/2019 20:16:41'!
PASSED!

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 20:16:41'!
ERROR!

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 20:16:47'!
ERROR!
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 20:17:11' prior: 50797899!
test03CreateCartReturnsDifferentIDsForEachCart
	| cartIDs |
	
	cartIDs := Set new.
	
	1 to: 4 do: [:n | cartIDs add: self createCart ].
	
	self assert: cartIDs size equals: 4.
	! !

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 20:17:12'!
PASSED!

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 20:17:12'!
PASSED!

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 20:17:12'!
PASSED!

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 20:17:12'!
PASSED!

!testRun: #RestAPITest #test04AddToCartFailsIfCartDoesNotExist stamp: 'ss 11/7/2019 20:17:12'!
PASSED!

!testRun: #RestAPITest #test05CanListItemsAfterAddingToExistingCart stamp: 'ss 11/7/2019 20:17:12'!
PASSED!

!testRun: #RestAPITest #test05CanListItemsAfterAddingToExistingCart stamp: 'ss 11/7/2019 20:17:26'!
PASSED!

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 20:17:26'!
PASSED!

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 20:17:26'!
PASSED!

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 20:17:26'!
PASSED!

!testRun: #RestAPITest #test04AddToCartFailsIfCartDoesNotExist stamp: 'ss 11/7/2019 20:17:26'!
PASSED!

!testRun: #RestAPITest #test05CanListItemsAfterAddingToExistingCart stamp: 'ss 11/7/2019 20:17:26'!
PASSED!
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 20:18:00'!
test06CantCreateCartIfClientDoesNotExist
	| |
	
		! !
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 20:19:02' prior: 50797997!
test06CantCreateCartIfClientDoesNotExist
	
	self should: [restapi createCartForClient: 'fake_user' withPassword: 'invalid_password'] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error | 
				self assert: error messageText equals: RestAPI userDoesNotExistErrorDescription.
			]
	! !

!testRun: #RestAPITest #test06CantCreateCartIfClientDoesNotExist stamp: 'ss 11/7/2019 20:19:07'!
FAILURE!
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 20:20:03' prior: 50797454!
createCartForClient: clientID withPassword: password 
	| cartID |
	usersStore at: clientID ifAbsent: [self error: self class userDoesNotExistErrorDescription].
	
	cartID := 100000 atRandom.
	cartsByID at: cartID put: (Cart acceptingItemsOf: catalog).
	
	^cartID ! !

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 20:20:05'!
PASSED!

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 20:20:05'!
PASSED!

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 20:20:05'!
PASSED!

!testRun: #RestAPITest #test04AddToCartFailsIfCartDoesNotExist stamp: 'ss 11/7/2019 20:20:05'!
PASSED!

!testRun: #RestAPITest #test05CanListItemsAfterAddingToExistingCart stamp: 'ss 11/7/2019 20:20:05'!
PASSED!

!testRun: #RestAPITest #test06CantCreateCartIfClientDoesNotExist stamp: 'ss 11/7/2019 20:20:05'!
ERROR!

!testRun: #RestAPITest #test06CantCreateCartIfClientDoesNotExist stamp: 'ss 11/7/2019 20:20:05'!
ERROR!
!RestAPI class methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 20:20:16'!
userDoesNotExistErrorDescription
	self shouldBeImplemented.! !
!RestAPI class methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 20:20:24' prior: 50798053!
userDoesNotExistErrorDescription
	^'user does not exist'! !

!testRun: #RestAPITest #test06CantCreateCartIfClientDoesNotExist stamp: 'ss 11/7/2019 20:20:26'!
PASSED!

!testRun: #RestAPITest #test06CantCreateCartIfClientDoesNotExist stamp: 'ss 11/7/2019 20:20:30'!
PASSED!

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 20:20:30'!
PASSED!

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 20:20:30'!
PASSED!

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 20:20:30'!
PASSED!

!testRun: #RestAPITest #test04AddToCartFailsIfCartDoesNotExist stamp: 'ss 11/7/2019 20:20:30'!
PASSED!

!testRun: #RestAPITest #test05CanListItemsAfterAddingToExistingCart stamp: 'ss 11/7/2019 20:20:30'!
PASSED!

!testRun: #RestAPITest #test06CantCreateCartIfClientDoesNotExist stamp: 'ss 11/7/2019 20:20:30'!
PASSED!
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 20:20:59'!
test07CantCreateCartIfClientPasswordIsIncorrect
	
	self should: [restapi createCartForClient: (testObjectsFactory validUser) withPassword: 'invalid_password'] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error | 
				self assert: error messageText equals: RestAPI userDoesNotExistErrorDescription.
			]
	! !
!RestAPITest methodsFor: 'testing' stamp: 'ss 11/7/2019 20:21:15' prior: 50798089!
test07CantCreateCartIfClientPasswordIsIncorrect
	
	self should: [restapi createCartForClient: (testObjectsFactory validUser) withPassword: 'invalid_password'] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:error | 
				self assert: error messageText equals: RestAPI incorrectPasswordErrorDescription.
			]
	! !

!testRun: #RestAPITest #test07CantCreateCartIfClientPasswordIsIncorrect stamp: 'ss 11/7/2019 20:21:22'!
FAILURE!
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 20:22:42' prior: 50798018!
createCartForClient: clientID withPassword: password 
	| cartID |
	usersStore at: clientID 
		ifPresent: [:actualPassword | password = actualPassword ifFalse: [self error: self class incorrectPasswordErrorDescription]] 
		ifAbsent: [self error: self class userDoesNotExistErrorDescription].
	
	cartID := 100000 atRandom.
	cartsByID at: cartID put: (Cart acceptingItemsOf: catalog).
	
	^cartID ! !

!testRun: #RestAPITest #test07CantCreateCartIfClientPasswordIsIncorrect stamp: 'ss 11/7/2019 20:22:48'!
ERROR!
!RestAPI class methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 20:22:54'!
incorrectPasswordErrorDescription
	self shouldBeImplemented.! !
!RestAPI class methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 20:23:05' prior: 50798138!
incorrectPasswordErrorDescription
	^'password is incorrect'! !

!testRun: #RestAPITest #test07CantCreateCartIfClientPasswordIsIncorrect stamp: 'ss 11/7/2019 20:23:08'!
PASSED!

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 20:23:08'!
PASSED!

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 20:23:08'!
PASSED!

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 20:23:08'!
PASSED!

!testRun: #RestAPITest #test04AddToCartFailsIfCartDoesNotExist stamp: 'ss 11/7/2019 20:23:08'!
PASSED!

!testRun: #RestAPITest #test05CanListItemsAfterAddingToExistingCart stamp: 'ss 11/7/2019 20:23:08'!
PASSED!

!testRun: #RestAPITest #test06CantCreateCartIfClientDoesNotExist stamp: 'ss 11/7/2019 20:23:08'!
PASSED!

!testRun: #RestAPITest #test07CantCreateCartIfClientPasswordIsIncorrect stamp: 'ss 11/7/2019 20:23:08'!
PASSED!

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 20:23:12'!
PASSED!

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 20:23:12'!
PASSED!

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 20:23:12'!
PASSED!

!testRun: #RestAPITest #test04AddToCartFailsIfCartDoesNotExist stamp: 'ss 11/7/2019 20:23:12'!
PASSED!

!testRun: #RestAPITest #test05CanListItemsAfterAddingToExistingCart stamp: 'ss 11/7/2019 20:23:12'!
PASSED!

!testRun: #RestAPITest #test06CantCreateCartIfClientDoesNotExist stamp: 'ss 11/7/2019 20:23:12'!
PASSED!

!testRun: #RestAPITest #test07CantCreateCartIfClientPasswordIsIncorrect stamp: 'ss 11/7/2019 20:23:12'!
PASSED!
!RestAPI methodsFor: 'assertions' stamp: 'ss 11/7/2019 20:24:33'!
assert: aUser hasPassword: aPassword ! !
!RestAPI methodsFor: 'assertions' stamp: 'ss 11/7/2019 20:24:53' prior: 50798199!
assert: aUser hasPassword: aPassword 

	usersStore at: aUser 
		ifPresent: [:actualPassword | aPassword = actualPassword ifFalse: [self error: self class incorrectPasswordErrorDescription]] 
		ifAbsent: [self error: self class userDoesNotExistErrorDescription].! !
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 20:25:17' prior: 50798119!
createCartForClient: clientID withPassword: password 
	| cartID |
	self assert: clientID hasPassword: password.
	
	cartID := 100000 atRandom.
	cartsByID at: cartID put: (Cart acceptingItemsOf: catalog).
	
	^cartID ! !
!RestAPI methodsFor: 'assertions' stamp: 'ss 11/7/2019 20:25:49'!
assertCartExistsWithID: aCartID! !
!RestAPI methodsFor: 'assertions' stamp: 'ss 11/7/2019 20:26:21' prior: 50798224!
assertCartExistsWithID: aCartID
	 cartsByID at: aCartID ifAbsent: [self error: self class cartNotFoundErrorDescription].! !
!RestAPI methodsFor: 'cart' stamp: 'ss 11/7/2019 20:27:17'!
cartWithID: cartID
	! !
!RestAPI methodsFor: 'assertions' stamp: 'ss 11/7/2019 20:27:38' prior: 50798228!
assertCartExistsWithID: aCartID
	 cartsByID at: aCartID ifAbsent: [self error: self class cartNotFoundErrorDescription].! !
!RestAPI methodsFor: 'cart' stamp: 'ss 11/7/2019 20:28:07' prior: 50798234!
cartWithID: aCartID
	self assertCartExistsWithID: aCartID .
	 ^cartsByID at: aCartID! !
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 20:28:21' prior: 50797665!
add: anAmount of: anISBN toCartWithID: cartID
	| cart |
	cart := self cartWithID: cartID.
	
	cart add: anAmount of: anISBN.
	
	cartsByID at: cartID put: cart.! !

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 20:29:09'!
PASSED!

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 20:29:09'!
PASSED!

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 20:29:09'!
PASSED!

!testRun: #RestAPITest #test04AddToCartFailsIfCartDoesNotExist stamp: 'ss 11/7/2019 20:29:09'!
PASSED!

!testRun: #RestAPITest #test05CanListItemsAfterAddingToExistingCart stamp: 'ss 11/7/2019 20:29:09'!
PASSED!

!testRun: #RestAPITest #test06CantCreateCartIfClientDoesNotExist stamp: 'ss 11/7/2019 20:29:09'!
PASSED!

!testRun: #RestAPITest #test07CantCreateCartIfClientPasswordIsIncorrect stamp: 'ss 11/7/2019 20:29:09'!
PASSED!
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 20:29:56' prior: 50797433!
listCartWithID: cartID 
	
	^self cartWithID: cartID.! !
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 20:30:33' prior: 50798283!
listCartWithID: cartID 
	
	^self cartWithID: cartID.! !
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 20:30:49' prior: 50798288!
listCartWithID: cartID 
	self assertCartExistsWithID: cartID .
	 ^cartsByID at: cartID! !

!methodRemoval: RestAPI #cartWithID: stamp: 'ss 11/7/2019 20:30:52'!
cartWithID: aCartID
	self assertCartExistsWithID: aCartID .
	 ^cartsByID at: aCartID!
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 20:30:59' prior: 50798251!
add: anAmount of: anISBN toCartWithID: cartID
	| cart |
	cart := self listCartWithID: cartID.
	
	cart add: anAmount of: anISBN.
	
	cartsByID at: cartID put: cart.! !

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 20:31:12'!
PASSED!

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 20:31:12'!
PASSED!

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 20:31:12'!
PASSED!

!testRun: #RestAPITest #test04AddToCartFailsIfCartDoesNotExist stamp: 'ss 11/7/2019 20:31:12'!
PASSED!

!testRun: #RestAPITest #test05CanListItemsAfterAddingToExistingCart stamp: 'ss 11/7/2019 20:31:12'!
PASSED!

!testRun: #RestAPITest #test06CantCreateCartIfClientDoesNotExist stamp: 'ss 11/7/2019 20:31:12'!
PASSED!

!testRun: #RestAPITest #test07CantCreateCartIfClientPasswordIsIncorrect stamp: 'ss 11/7/2019 20:31:12'!
PASSED!
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 20:36:38'!
createNewCartID

	^100000 atRandom.! !
!RestAPI methodsFor: 'as yet unclassified' stamp: 'ss 11/7/2019 20:36:54' prior: 50798215!
createCartForClient: clientID withPassword: password 
	| cartID |
	self assert: clientID hasPassword: password.
	
	cartID := self createNewCartID.
	cartsByID at: cartID put: (Cart acceptingItemsOf: catalog).
	
	^cartID ! !

!testRun: #RestAPITest #test01ListCartFailsIfIDDoesNotExist stamp: 'ss 11/7/2019 20:43:31'!
PASSED!

!testRun: #RestAPITest #test02CreateCartReturnsIDToListCartThatIsEmpty stamp: 'ss 11/7/2019 20:43:31'!
PASSED!

!testRun: #RestAPITest #test03CreateCartReturnsDifferentIDsForEachCart stamp: 'ss 11/7/2019 20:43:31'!
PASSED!

!testRun: #RestAPITest #test04AddToCartFailsIfCartDoesNotExist stamp: 'ss 11/7/2019 20:43:31'!
PASSED!

!testRun: #RestAPITest #test05CanListItemsAfterAddingToExistingCart stamp: 'ss 11/7/2019 20:43:31'!
PASSED!

!testRun: #RestAPITest #test06CantCreateCartIfClientDoesNotExist stamp: 'ss 11/7/2019 20:43:31'!
PASSED!

!testRun: #RestAPITest #test07CantCreateCartIfClientPasswordIsIncorrect stamp: 'ss 11/7/2019 20:43:31'!
PASSED!